#!/bin/bash

Help() {
    # Display Help
    echo "Json.sh helps to view and modify the commands.json file"
    echo
    echo "Syntax: ./json.sh [-f|c|i|a|h]"
    echo "options:"
    echo "  -f 'SEARCH_TERM'  Search by id string and print any results"
    echo "  -c INDEX          Copy the json at the supplied INDEX to the clipboard. Overwrites clipboard without confirmation!"
    echo "  -i INDEX          Insert into commands.json at the supplied INDEX the contents of the clipboard. Json will be validated before overwriting commands.json"
    echo "  -a                Append to commands.json the clipboard json contents. Json will be validated before overwriting commands.json"
    echo "  -h                Print this help and exit."
    echo
}

validate_tmp_json() {
    # validate that the tmp.json file is valid before overwriting the command.json
    id_results=$(jq 'map(.id) | length == (unique | length)' tmp.json)

    if [ $? -ne 0 ]; then
        # errors happend, probabably syntax
        echo "Json is malformed, validation has failed. commands.json not updated. Ensure clipboard contains valid json."
        exit
    else

        # test if the id results are unique
        case $id_results in
        true)
            # echo "Json is valid"
            ;;
        false)
            echo "Json is invalid, id must be unique!"
            exit
            ;;
        *)
            echo "Json is invalid, does your clipboard contain valid json?"
            exit
            ;;
        esac

        # test if the cmds array length is > 0
        cmd_results=$(jq '.[].cmds | length > 0' tmp.json)

        if [ $? -ne 0 ]; then
            # errors happend, probabably syntax
            echo "Json is malformed, validation has failed. commands.json not updated. Ensure clipboard contains valid json."
            exit
        fi

        # echo "$cmd_results" | while read -r line; do
        linenumber=0
        while read -r line; do

            case $line in
            true)
                # echo "Json is valid"
                # echo "cmd_results true"
                ;;
            false)
                echo "Json is invalid, cmds array must have at least 1 element!"
                echo "element $linenumber with id $(jq '.['$linenumber'].id' tmp.json) contains the problem"
                
                # echo "cmd_results false $line"
                exit
                ;;
            *)
                echo "Json is invalid, does your clipboard contain valid json?"
                # echo "cmd_results default $line"
                exit
                ;;
            esac

            ((linenumber += 1))

        done < <(echo "$cmd_results")

        echo "Json is valid, updating commands.json"

        mv tmp.json src/assets/commands.json

    fi
}

# process the arguments supplied to this script
while getopts ":f:c:i:ha" option; do
    case $option in
    h) # display Help
        Help
        exit
        ;;

    f) # find index by id string
        SEARCH=$OPTARG ;;

    c) # copy index to clipboard
        INDEX=$OPTARG ;;

    i) # insert clipboard json at index
        INSERT=$OPTARG ;;

    a) # add clipboard json to end of array
        ADD="true" ;;

    \?) # Invalid option
        echo "Error: Invalid option"
        exit
        ;;
    esac
done

if [ ! -z "${SEARCH}" ]; then
    
    results=$(cat src/assets/commands.json | jq 'to_entries | .[] | select(.value.id | contains("'$SEARCH'")) | "\(.key) \(.value.id)"')

    if [ -z "${results}" ]; then
        echo "no results found"
    else
        echo $results
    fi
elif [ ! -z "${INDEX}" ]; then
    echo "copying json to clipboard"
    cat src/assets/commands.json | jq '.['$INDEX']' | xclip -selection clipboard

elif [ ! -z "${INSERT}" ]; then
    res=$(jq --argjson newElement "$(xclip -o -selection clipboard)" '.['$INSERT'] = $newElement' src/assets/commands.json >tmp.json)

    validate_tmp_json
elif [ ! -z "${ADD}" ]; then
    res=$(jq --argjson newElement "$(xclip -o -selection clipboard)" '. += [$newElement]' src/assets/commands.json >tmp.json)

    validate_tmp_json
else
    echo "INFO: No Valid Args supplied, listing all index and ids of commands.json"
    # no args supplied, just list out the index and id strings as a default behavior
    cat src/assets/commands.json | jq 'to_entries | .[] | "\(.key) \(.value.id)"'
fi
