import { Box, Typography } from '@mui/material'

import React, { useCallback, useContext } from 'react'
import CopyItem from '../../../../../components/CopyItem'
import { CMDProps } from '../../ConfigInput/ConfigInput'
import { AppState } from '../../../Home'
import { useSignal, useSignalEffect } from '@preact/signals-react'
import SuccessTooltip from '../../../../../components/SuccessTooltip'
import WarningIcon from '@mui/icons-material/Warning'
import AlertDialog from '../../../../../components/AlertDialog'

interface CommandTextProps {
  cwin: CMDProps
}

const CommandText = React.memo(({ cwin }: CommandTextProps) => {
  const { ahost, aport, httpFile, replacements, terminalWraps, vhost, vport } =
    useContext(AppState)

  const cmdText = useSignal<string>('')
  const updateStatus = useSignal<boolean>(false)
  const displayUnreplacedValueWarning = useSignal<boolean>(false)

  const powershellEncodeBase64Command = useCallback((cmd: string): string => {
    const encoder = new TextEncoder()
    const encoded = encoder.encode(cmd)
    let binaryString = ''
    const nullString = String.fromCharCode(0)
    encoded.forEach((byte) => {
      binaryString += String.fromCharCode(byte) + nullString
    })
    return btoa(binaryString)
  }, [])

  const ReplaceVars = useCallback(
    (winN: number, cmd: string, allowTerminalWrap: boolean) => {
      if (
        ahost.value === undefined ||
        aport.value === undefined ||
        httpFile.value === undefined
      ) {
        return ''
      }

      let tmp = cmd
      let i = 0
      while (i < 2) {
        // to ensure layered/cascaded values get replaced properly, run this code a few times
        tmp = tmp.replaceAll('__ATTACKER_HOST__', ahost.value)
        tmp = tmp.replaceAll('__ATTACKER_PORT__', aport.value.toString())

        tmp = tmp.replaceAll('__TARGET_HOST__', vhost.value)
        tmp = tmp.replaceAll('__TARGET_PORT__', vport.value.toString())

        const httpPath = httpFile.value.split('/')
        const httpFileName = httpPath.pop()
        const httpRootPath = httpPath.join('/')

        tmp = tmp.replaceAll('/__PATH__', httpRootPath)
        tmp = tmp.replaceAll(
          '__FILE__',
          httpFileName !== undefined ? httpFileName : ''
        )

        //   wrap the running command with the process spawn of choice on the first iteration only
        if (
          allowTerminalWrap === true &&
          terminalWraps.value !== undefined &&
          terminalWraps.value[`win-${winN}`] !== undefined &&
          i === 0
        ) {
          // TODO: extend these options with each addition to the CommandWrap array
          const wrapOptions = ['__CMD__']
          const wrap = terminalWraps.value[`win-${winN}`].toString()

          wrapOptions.forEach((w) => {
            if (wrap.indexOf(w) > -1) {
              tmp = wrap.replaceAll(w, tmp)
            }
          })

          if (wrap.indexOf('__PS_BASE64_ENC__') > -1) {
            tmp = wrap.replaceAll(
              '__PS_BASE64_ENC__',
              powershellEncodeBase64Command(tmp)
            )
          }
        }

        //   replace all of the config set properties
        if (replacements.value !== undefined) {
          Object.keys(replacements.value).forEach(function (key) {
            tmp = tmp.replaceAll(key, replacements.value[key].toString())
          })
        }
        i++
      }
      return tmp
    },
    [
      powershellEncodeBase64Command,
      ahost.value,
      aport.value,
      httpFile.value,
      replacements.value,
      terminalWraps.value,
      vhost.value,
      vport.value,
    ]
  )

  useSignalEffect(() => {
    const rep = ReplaceVars(cwin.win, cwin.cmd, cwin.allowTerminalWrap)
    cmdText.value = rep

    // check if a warning to the user about unreplaced values is necessary
    const re = new RegExp('__[A-Za-z0-9_]*__')

    displayUnreplacedValueWarning.value = re.test(rep)

    // flash tooltip that the component updated
    updateStatus.value = true
    const timer1 = setTimeout(() => {
      updateStatus.value = false
    }, 500)
    return () => {
      clearTimeout(timer1)
    }
  })

  return (
    <Box key={`window-${cwin.win}`} sx={{ borderBottom: '1px solid #cecece' }}>
      <SuccessTooltip
        PopperProps={{
          disablePortal: true,
        }}
        open={updateStatus.value}
        disableFocusListener
        disableHoverListener
        disableTouchListener
        title="Updated!"
        placement="left"
      >
        <Typography variant="h5">
          {displayUnreplacedValueWarning.value === true && (
            <AlertDialog
              title="Warning: Possibly unreplaced values"
              CustomIcon={<WarningIcon color="warning" />}
            >
              <Typography>
                If the command-to-run has unreplaced values, then it's not
                expected to function correctly. Ensure the command has the
                values expected before attempting to run!
                <br />
                <br />
                NOTE: the Warning Icon will disappear when the command-to-run
                has all replacement values replaced.
              </Typography>
            </AlertDialog>
          )}
          {cwin.label} - Window {cwin.win} Platform:{cwin.platform}
        </Typography>
      </SuccessTooltip>

      <CopyItem val={cmdText.value}>
        <Typography
          variant="caption"
          sx={{
            fontFamily: 'monospace',
            background: '#000',
            padding: '10px',
            borderRadius: '5px',
            margin: '10px 20px 10px 10px',
            maxWidth: '90%',
            overflowWrap: 'break-word',
            userSelect: 'none',
            // overflowX: 'scroll'
          }}
        >
          {cmdText.value}
        </Typography>
      </CopyItem>
    </Box>
  )
})

export default CommandText
