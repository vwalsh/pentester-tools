import React, { useContext } from 'react'
import { useComputed, useSignal } from '@preact/signals-react'
import AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline'
import TuneIcon from '@mui/icons-material/Tune'

import {
  ListItem,
  Typography,
  Box,
  TextField,
  InputAdornment,
  IconButton,
  List,
  Button,
} from '@mui/material'
import AlertDialog from '../../../../../../../components/AlertDialog'
import ConfirmDialog from '../../../../../../../components/ConfirmDialog'
import { AppState } from '../../../../../Home'
import CodeTypography from '../../../../../../../components/CodeTypography'
import CopyItem from '../../../../../../../components/CopyItem'

const LootEditor = React.memo(() => {
  const newLoot = useSignal<{ name: string; value: string }>({
    name: '',
    value: '',
  })
  const editLoot = useSignal<{ name: string; value: string } | undefined>(
    undefined
  )

  const errors = useSignal<{
    name: boolean
    value: boolean
    validation: boolean
  }>({
    name: false,
    value: false,
    validation: false,
  })

  const { loot, setLoot } = useContext(AppState)

  const handleAddEntry = () => {
    if (newLoot.value) {
      const f = loot.value[newLoot.value.name]
      if (
        (f !== undefined && editLoot.value === undefined) ||
        newLoot.value.name === ''
        // ||        newLoot.value.value === ''
      ) {
        // this is an error because:
        // 1. not editing and name already exists
        errors.value = { ...errors.value, validation: true }
        return
      }

      //   setLoot(newLoot.value)
      setLoot({
        value: newLoot.value.value,
        name: `__LOOT_${newLoot.value.name
          .replaceAll(' ', '_')
          .toUpperCase()}__`,
      })
      newLoot.value = { value: '', name: '' }
      editLoot.value = undefined
    }
  }

  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    newLoot.value = { ...newLoot.value, name: event.target.value }

    const f = loot.value[event.target.value]

    if (f !== undefined && editLoot.value === undefined) {
      errors.value = { ...errors.value, name: true }
    } else {
      errors.value = { ...errors.value, name: false }
    }
  }

  const handleValueChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    newLoot.value = { ...newLoot.value, value: event.target.value }

    // no conditions are necessary for the value. it can be blank or filled
  }

  const AllLoot = useComputed(() => {
    const tmp = Object.entries(loot.value)
    if (tmp.length < 1) {
      return <></>
    }

    return tmp.map((l) => {
      // object.entries().map(l) turns an object properties and associated value into an array of length 2
      // this means the object property is in l[0] (aka name) and l[1] contains the value
      const entry = { name: l[0], value: l[1] }

      const handleDeleteEntry = (name: string) => {
        const trimmedLoot = { ...loot.value }
        delete trimmedLoot[name]
        loot.value = trimmedLoot
      }

      return (
        <ListItem key={`loot-editor-${entry.name}`}>
          <Box sx={{ width: '100%', borderBottom: '1px solid #cecece' }}>
            <CopyItem val={entry.name}>
              <CodeTypography>{entry.name}</CodeTypography>
            </CopyItem>

            <CopyItem val={entry.value}>
              <CodeTypography>{entry.value}</CodeTypography>
            </CopyItem>

            {/* <Typography
              sx={{
                wordWrap: 'break-word',
                width: '80%',
                maxHeight: '4.5em',
                overflow: 'hidden',
                // userSelect: 'none',
              }}
            >
              {entry.value}
            </Typography> */}

            <Box sx={{ display: 'flex', gap: '5px', padding: '5px' }}>
              <Button
                variant="outlined"
                disabled={editLoot.value !== undefined}
                onClick={() => {
                  const tmp = {
                    name: entry.name
                      .replace('__LOOT_', '')
                      .slice(0, -2)
                      .replace('_', ' ')
                      .toLowerCase(),
                    value: entry.value,
                  }
                  editLoot.value = tmp
                  newLoot.value = tmp
                }}
              >
                <TuneIcon />
              </Button>
              <ConfirmDialog
                title={`Delete '${entry.name}'?`}
                buttonText=""
                desc="Once this is removed it cannot be undone. Are you sure?"
                onConfirm={() => handleDeleteEntry(entry.name)}
              />
            </Box>
          </Box>
        </ListItem>
      )
    })
  })
  //   }, [loot, loot.value])

  return (
    <Box sx={{ position: 'relative', width: '100%' }}>
      <Box>
        {errors.value.validation && (
          <Typography sx={{ display: 'inline' }} color="error">
            ERROR: Both the Loot name and value input need a value set before
            this can be added.
          </Typography>
        )}
        <TextField
          label={`${editLoot.value === undefined ? 'Add' : 'Edit'} Loot - Name`}
          //   placeholder='* (asterisk) for all loot'
          sx={{ marginTop: '15px' }}
          fullWidth
          error={errors.value.name}
          helperText={
            errors.value.name === true ? 'Unique Loot Names are required' : ''
          }
          value={newLoot.value.name}
          onChange={handleNameChange}
          onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => {
            if (event.key === 'Enter') {
              handleAddEntry()
            }
          }}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <AlertDialog title={`Help: Loot Management - name`}>
                  <Typography>
                    Saving loot allows for adding the loot value to a given
                    command.
                    <br />
                    <br />
                    NOTE: The loot name will be put into the format of
                    <CodeTypography>__LOOT_NAME_HERE__</CodeTypography>
                    <br />
                    <br />
                    The Loot name must be unique. This is used for referencing
                    the loot value when inputting to a command. Use the copy
                    button to get the loot reference from either the Search to
                    the right or the list below.
                  </Typography>
                </AlertDialog>
                <IconButton
                  edge="end"
                  aria-label="add entry"
                  onClick={handleAddEntry}
                >
                  <AddCircleOutlineIcon />
                </IconButton>
              </InputAdornment>
            ),
          }}
        />
        <TextField
          label={`${
            editLoot.value === undefined ? 'Add' : 'Edit'
          } Loot - Value`}
          //   placeholder='* (asterisk) for all loot'
          sx={{ marginTop: '15px' }}
          fullWidth
          error={errors.value.value}
          helperText={
            errors.value.value === true ? 'Loot values must not be blank' : ''
          }
          value={newLoot.value.value}
          onChange={handleValueChange}
          onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => {
            if (event.key === 'Enter') {
              handleAddEntry()
            }
          }}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <AlertDialog title={`Help: Loot Management - value`}>
                  <Typography>
                    The loot value can be inserted into a given command via
                    copying the reference to the loot name, then paste the
                    copied reference value into the command input.
                    <br />
                    <br />
                    Using loot within commands is especially useful for tasks
                    like hash cracking or credential spraying.
                    <br />
                    <br />
                    NOTE: only the Loot name must be unique, the Loot value is
                    not enforced as unique! This allows for multiple Loot names
                    with the same value which can be useful for managing and
                    building multiple commands. However the general advice is to
                    keep the Loot values unique until you find an absolute need
                    for duplicate value entries
                  </Typography>
                </AlertDialog>
              </InputAdornment>
            ),
          }}
        />
      </Box>
      <Box sx={{ marginTop: '10px' }}>
        <List
          sx={{
            width: '100%',
            maxWidth: '100%',
            // bgcolor: 'background.paper',
            position: 'relative',
            overflow: 'auto',
            maxHeight: '60vh',
          }}
        >
          {AllLoot.value}
        </List>
      </Box>
    </Box>
  )
})

export default LootEditor
