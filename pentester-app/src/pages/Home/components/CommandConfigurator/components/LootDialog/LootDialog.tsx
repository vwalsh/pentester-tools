import React, { useContext } from 'react'
import DiamondOutlinedIcon from '@mui/icons-material/DiamondOutlined'

import AlertDialog from '../../../../../../components/AlertDialog'
import { AppState } from '../../../../Home'
import {
  Grid,
  List,
  TextField,
  InputAdornment,
  IconButton,
  Box,
  ListItem,
} from '@mui/material'
import { useComputed, useSignal } from '@preact/signals-react'
import CloseIcon from '@mui/icons-material/Close'
import LootEditor from './components/LootEditor'
import CodeTypography from '../../../../../../components/CodeTypography'
import CopyItem from '../../../../../../components/CopyItem'

const LootDialog = React.memo(() => {
  const search = useSignal<string>('')

  const { loot } = useContext(AppState)

  const LootFound = useComputed(() => {
    if (search.value === '') {
      return <></>
    }

    let tmp = []
    if (search.value === '*') {
      // return all
      tmp = Object.entries(loot.value)
    } else {
      // return only found search entries
      tmp = Object.entries(loot.value).filter((l) => {
        const entry = { name: l[0], value: l[1] }

        return (
          entry.name.toLowerCase().indexOf(search.value.toLowerCase()) > -1 ||
          entry.value.toLowerCase().indexOf(search.value.toLowerCase()) > -1
        )
      })
    }

    return tmp.map((l) => {
      // object.entries().map(l) turns an object properties and associated value into an array of length 2
      // this means the object property is in l[0] (aka name) and l[1] contains the value
      const entry = { name: l[0], value: l[1] }
      return (
        <ListItem
          key={`found-loot-${entry.name}`}
          sx={{ borderBottom: '1px solid #cecece' }}
        >
          <Box sx={{ width: '100%' }}>
            <CopyItem val={entry.name}>
              <CodeTypography>{entry.name}</CodeTypography>
            </CopyItem>

            <CopyItem val={entry.value}>
              <CodeTypography>{entry.value}</CodeTypography>
            </CopyItem>
          </Box>
        </ListItem>
      )
    })
  })

  return (
    <AlertDialog
      title="Loot Managment - Add/Edit/Search Loot"
      CustomIcon={<DiamondOutlinedIcon />}
    >
      <>
        <Grid container spacing={'10px'}>
          <Grid item xs={6}>
            <LootEditor />
          </Grid>
          <Grid item xs={6}>
            <TextField
              label="Search Loot"
              placeholder="* (asterisk) for all loot"
              sx={{ marginTop: '15px' }}
              fullWidth
              value={search.value}
              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                search.value = event.target.value
              }}
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton
                      onClick={() => {
                        search.value = ''
                      }}
                    >
                      <CloseIcon />
                    </IconButton>
                  </InputAdornment>
                ),
              }}
            />
            <List
              sx={{
                width: '100%',
                maxWidth: '100%',
                // bgcolor: 'background.paper',
                position: 'relative',
                overflowX: 'hidden',
                overflowY: 'auto',
                maxHeight: '70vh',
              }}
            >
              {LootFound.value}
            </List>
          </Grid>
        </Grid>
      </>
    </AlertDialog>
  )
})

export default LootDialog
