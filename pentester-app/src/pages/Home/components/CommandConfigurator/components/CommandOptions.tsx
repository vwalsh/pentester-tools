import { useSignal, useSignalEffect } from '@preact/signals-react'
import {
  CommandWindowsProps,
  CommandsProps,
} from '../../ConfigInput/ConfigInput'
import React, { useContext } from 'react'
import {
  ListItem,
  ListItemButton,
  ListSubheader,
  Divider,
  ListItemText,
  Typography,
  Box,
} from '@mui/material'
import { AppState } from '../../../Home'
import Commands from '../../../../../assets/commands.json'

import TerminalIcon from '@mui/icons-material/Terminal'

const CommandOptions = React.memo(() => {
  const { commandSearch, command_windows, setCommand_windows } =
    useContext(AppState)
  const unique_found = useSignal<undefined | Array<CommandsProps>>(undefined)

  useSignalEffect(() => {
    let found: Array<CommandsProps> = []

    for (let searchTerm of commandSearch.value) {
      searchTerm = searchTerm.toLowerCase()
      // find all of the commands which match the search term(s))
      const f = (Commands as Array<CommandsProps>).filter((c) => {
        const cmdId = c.id.replaceAll('-', ' ').toLowerCase()
        if (cmdId.indexOf(searchTerm) > -1) {
          // matched the command.id partially or fully
          return true
        }

        const KeywordMatch =
          c.keywords.filter((k) => {
            // matched a keyword partially or fully
            return k.toLowerCase().indexOf(searchTerm) > -1
          }).length > 0

        if (KeywordMatch === true) {
          return true
        }

        // default return false; no previous matches existed
        return false
      })

      if (f.length > 0) {
        found = [...found, ...f]
      }
    }

    if (found.length < 1) {
      command_windows.value = []
    }
    // filter out the command_windows which have been removed by the user from the search
    else if (command_windows.value.length > 0) {
      const tmp = [...command_windows.value].map((unusedWin) => {
        if (unusedWin === undefined) {
          return unusedWin
        }
        const f =
          found.filter((f) => {
            return f.id === unusedWin.id
          }).length > 0
        if (f === true) {
          return unusedWin
        }

        return undefined
      })

      for (let i = 0; i < command_windows.value.length; i++) {
        // compare the arrays before attempting to update
        if (command_windows.value[i]?.id !== tmp[i]?.id) {
          command_windows.value = tmp
          break
        }
      }
    }

    // filter out only the unique ids from the matches
    unique_found.value = found.filter(
      (value, index, self) => self.findIndex((v) => v.id === value.id) === index
    )
  })

  if (
    commandSearch.value === undefined ||
    commandSearch.value.length < 1 ||
    commandSearch.value[0] === '' ||
    unique_found.value === undefined
  ) {
    return <></>
  }

  // create GUI options for the user to start drilling into the command to build
  return unique_found.value.map((f) => {
    return (
      <React.Fragment key={`cmd-header-${f.id}`}>
        <ListSubheader>
          <Box
            sx={{
              display: 'flex',
              alignContent: 'center',
              alignItems: 'center',
              gap: '4px',
            }}
          >
            <TerminalIcon />

            <Typography variant="h6" sx={{ textTransform: 'capitalize' }}>
              {f.id.replaceAll('-', ' ')}
            </Typography>
          </Box>
        </ListSubheader>

        {f.cmds.map((c) => {
          const isCmdInWindow =
            command_windows.value.filter(
              (cmdCol) =>
                cmdCol !== undefined &&
                cmdCol.label === c.label &&
                cmdCol.cmd === c.cmd &&
                cmdCol.id === f.id
            ).length > 0

          return (
            <ListItem
              disablePadding
              key={`cmd-option-${f.id}-${c.win}-${c.label.replace(' ', '-')}`}
            >
              <ListItemButton
                selected={isCmdInWindow}
                disabled={isCmdInWindow}
                onClick={() => {
                  const maxLen =
                    command_windows.value?.length > 0 &&
                    command_windows.value.length > c.win
                      ? command_windows.value.length
                      : c.win + 1
                  const tmp = new Array<CommandWindowsProps | undefined>(maxLen)

                  for (let i = 0; i < tmp.length; i++) {
                    if (c.win === i) {
                      // tmp.push({ ...c, id: f.id })
                      tmp[i] = { ...c, id: f.id }
                    } else if (i < command_windows.value.length) {
                      // tmp.push(command_windows.value[i])
                      tmp[i] = command_windows.value[i]
                    }
                  }

                  setCommand_windows(tmp)
                }}
              >
                <ListItemText
                  sx={{
                    paddingLeft: '10px',
                    '& .MuiListItemText-secondary': {
                      paddingLeft: '10px',
                    },
                  }}
                  primary={c.label}
                  secondary={`Window ${c.win}`}
                />
              </ListItemButton>
            </ListItem>
          )
        })}
        <Divider />
      </React.Fragment>
    )
  })
})

export default CommandOptions
