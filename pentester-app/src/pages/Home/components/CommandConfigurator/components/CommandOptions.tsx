import { Signal, useSignal, useSignalEffect } from '@preact/signals-react'
import {
  CommandWindowsProps,
  CommandsProps,
} from '../../ConfigInput/ConfigInput'
import React, { useContext } from 'react'
import {
  ListItem,
  ListItemButton,
  ListSubheader,
  Divider,
  ListItemText,
  Typography,
  Box,
} from '@mui/material'
import { AppState } from '../../../Home'
import Commands from '../../../../../assets/commands.json'

import TerminalIcon from '@mui/icons-material/Terminal'

interface CommandOptionsProps {
  command_windows: Signal<CommandWindowsProps[]>
}

const CommandOptions = React.memo(
  ({ command_windows }: CommandOptionsProps) => {
    const { fileSearchEnabled, commandSearch, setCommand_windows } =
      useContext(AppState)
    const unique_found = useSignal<undefined | Array<CommandsProps>>(undefined)

    useSignalEffect(() => {
      let found: Array<CommandsProps> = []

      for (const searchTerm of commandSearch.value) {
        for (const term of searchTerm.toLowerCase().split(' ')) {
          // find all of the commands which match the search term(s))
          const f = (Commands as Array<CommandsProps>).filter((c) => {
            if (c.id.replaceAll('-', ' ').indexOf(searchTerm) > -1) {
              return true
            }

            return (
              c.keywords.filter((k) => {
                return k.toLowerCase().indexOf(term) > -1
              }).length > 0
            )
          })

          if (f.length > 0) {
            found = [...found, ...f]
          }
        }
      }

      if (found.length < 1) {
        command_windows.value = []
      }

      // filter out only the unique ids from the matches
      unique_found.value = found.filter(
        (value, index, self) =>
          self.findIndex((v) => v.id === value.id) === index
      )
    })

    if (
      commandSearch.value === undefined ||
      commandSearch.value.length < 1 ||
      commandSearch.value[0] === '' ||
      unique_found.value === undefined
    ) {
      return <></>
    }

    // create GUI options for the user to start drilling into the command to build
    return unique_found.value.map((f) => {
      return (
        <React.Fragment key={`cmd-header-${f.id}`}>
          <ListSubheader>
            <Box
              sx={{
                display: 'flex',
                alignContent: 'center',
                alignItems: 'center',
                gap: '4px',
              }}
            >
              <TerminalIcon />

              <Typography variant="h6" sx={{ textTransform: 'capitalize' }}>
                {f.id.replaceAll('-', ' ')}
              </Typography>
            </Box>
          </ListSubheader>

          {f.cmds.map((c) => {
            if (
              c.cmd.indexOf('__PATH__') > -1 &&
              c.cmd.indexOf('__FILE__') > -1
            ) {
              setTimeout(() => {
                // NOTE: setTimeout this fixes a render error in react; when rendering the Home comp you can't also set a state!
                fileSearchEnabled.value = true
              }, 1)
            }

            const isCmdInWindow =
              command_windows.value.filter(
                (cmdCol) =>
                  cmdCol !== undefined &&
                  cmdCol.label === c.label &&
                  cmdCol.cmd === c.cmd &&
                  cmdCol.id === f.id
              ).length > 0

            return (
              <ListItem
                disablePadding
                key={`cmd-option-${f.id}-${c.win}-${c.label.replace(' ', '-')}`}
              >
                <ListItemButton
                  // variant="outlined"
                  selected={isCmdInWindow}
                  disabled={isCmdInWindow}
                  onClick={() => {
                    let tmp = [] as Array<CommandWindowsProps>
                    if (
                      command_windows.value === undefined ||
                      command_windows.value.length < 1
                    ) {
                      tmp = new Array<CommandWindowsProps>(c.win)
                      tmp.push({ ...c, id: f.id })
                    }
                    if (
                      command_windows.value !== undefined &&
                      command_windows.value.length > 0
                    ) {
                      tmp = [...command_windows.value]
                      if (command_windows.value.length > c.win) {
                        tmp[c.win] = { ...c, id: f.id }
                      } else {
                        tmp.push({ ...c, id: f.id })
                      }
                    }

                    setCommand_windows(tmp)
                  }}
                >
                  <ListItemText
                    sx={{
                      paddingLeft: '10px',
                      '& .MuiListItemText-secondary': {
                        paddingLeft: '10px',
                      },
                    }}
                    primary={c.label}
                    secondary={`Window ${c.win}`}
                  />
                </ListItemButton>
              </ListItem>
            )
          })}
          <Divider />
        </React.Fragment>
      )
    })
  }
)

export default CommandOptions
