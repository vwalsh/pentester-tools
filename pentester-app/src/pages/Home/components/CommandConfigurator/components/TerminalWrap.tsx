import { ListItem, Autocomplete, TextField } from '@mui/material'
import React, { useContext } from 'react'
import { AppState } from '../../../Home'
import { ConfigCompsProps } from './CommandTools'
import { useComputed } from '@preact/signals-react'

interface TerminalProps {
  term: string
  cmd: string
}

const CommandWrap: Array<TerminalProps> = [
  { term: 'None', cmd: `__CMD__` },
  { term: 'Powershell -c', cmd: `powershell -c '__CMD__'` },
  {
    term: 'PS.exe -c',
    cmd: `C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -c '__CMD__'`,
  },
  {
    term: 'Powershell -enc BASE64',
    cmd: `powershell -enc '__PS_BASE64_ENC__'`,
  },
  {
    term: 'PS.exe -enc BASE64',
    cmd: `C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -enc '__PS_BASE64_ENC__'`,
  },
  { term: 'CMD in PS Prompt', cmd: `cmd /r '__CMD__'` },
  { term: '/bin/sh -c', cmd: `/bin/sh -c '__CMD__'` },
  { term: '/bin/bash -c', cmd: `/bin/bash -c '__CMD__'` },
]

const TerminalWrap = React.memo(({ windowNum }: ConfigCompsProps) => {
  const { setTerminalWrap, terminalWraps, command_windows } =
    useContext(AppState)

  const cwin = useComputed(() => {
    return command_windows.value[windowNum]
  })

  return (
    <ListItem key={`omni-terminalsearch-box-${cwin.value.win}`}>
      <Autocomplete
        disablePortal
        id={`omni-terminalsearch-box-${cwin.value.win}`}
        options={CommandWrap as Array<TerminalProps>}
        getOptionLabel={(option) => option.term}
        sx={{ width: 300 }}
        value={
          CommandWrap.filter(
            (cmdWrap) =>
              cmdWrap.cmd ===
              (terminalWraps.value[`win-${cwin.value.win}`] !== undefined
                ? terminalWraps.value[`win-${cwin.value.win}`]
                : '__CMD__')
          )[0]
        }
        renderInput={(params) => (
          <TextField {...params} label="Process Terminal Wrap..." />
        )}
        onChange={(
          _event: React.SyntheticEvent,
          newValue: TerminalProps | null
        ) => {
          if (newValue === undefined || newValue === null) {
            return
          }

          setTerminalWrap({
            name: `win-${cwin.value.win}`,
            value: newValue.cmd,
          })
        }}
        isOptionEqualToValue={function (
          option: TerminalProps,
          value: TerminalProps
        ) {
          if (option.cmd === value.cmd && option.term === value.term) {
            return true
          }

          return false
        }}
      />
    </ListItem>
  )
})

export default TerminalWrap
