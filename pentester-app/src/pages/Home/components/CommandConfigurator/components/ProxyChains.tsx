import React, { useContext, useEffect } from 'react'
import { AppState } from '../../../Home'
import { Box, Typography, Autocomplete, TextField } from '@mui/material'
import { useComputed, useSignal } from '@preact/signals-react'
import AlertDialog from '../../../../../components/AlertDialog'
import { ConfigCompsProps } from './CommandTools'
import ConfigStringInput from '../../ConfigInput/components/ConfigStringInput'
import { CMDConfigProps, StringInputProps } from '../../ConfigInput/ConfigInput'
import CodeTypography from '../../../../../components/CodeTypography'

interface ProxychainsProps {
  term: string
  cmd: string
}

const extraProxychainsFlagCfg: CMDConfigProps = {
  help: 'enter any extra flags to be used for the proxychains command. NOTE: These values are globally shared when selecting the Proxychains Custom option for another command.',
  replace: '__EXTRA_PROXYCHAINS_ARGS__',
  defaultValue: '',
  props: {
    type: 'string',
    label: 'Extra Flags for Proxychains command',
  },
}

const ProxychainsOptions: Array<ProxychainsProps> = [
  { term: 'None', cmd: `__CMD__` }, // default option is the first index!
  { term: 'Proxychains', cmd: `proxychains __CMD__` },
  { term: 'Proxychains Quiet', cmd: `proxychains -q __CMD__` },
  {
    term: 'Proxychains Custom',
    cmd: `proxychains __EXTRA_PROXYCHAINS_ARGS__ __CMD__`,
  },
]

const ProxyChains = React.memo(({ windowNum }: ConfigCompsProps) => {
  const { setProxychainPrepends, proxychainPrepends, command_windows } =
    useContext(AppState)

  const currentProxychains = useSignal<ProxychainsProps | undefined>(undefined)
  const extraFlagsOptionEnabled = useSignal<boolean>(false)

  const cwin = useComputed(() => {
    return command_windows.value[windowNum]
  })

  // this is the ID (dict property name) within proxychainsPrepends state localstorage.
  // this allows for a specific window number from a given command id to have it's proxychains
  const proxychainsReplacementID = useComputed(() => {
    //     if(cwin.value === undefined || cwin.value?.id === undefined || cwin.value?.win){
    //         return `id-undefined-`
    //     }
    return `id-${cwin.value?.id}-win-${cwin.value?.win}`
  })

  useEffect(() => {
    // run once
    // set the currentProxychains when this component is first built
    if (currentProxychains.value !== undefined) {
      return
    }

    const currentSavedSetting =
      proxychainPrepends.value[proxychainsReplacementID.value]

    if (currentSavedSetting !== undefined) {
      const f = ProxychainsOptions.filter(
        (proxy) => proxy.cmd === currentSavedSetting
      )
      currentProxychains.value = f.length > 0 ? f[0] : ProxychainsOptions[0]

      extraFlagsOptionEnabled.value =
        f.length > 0
          ? f[0].cmd.indexOf(extraProxychainsFlagCfg.replace) > -1
          : false
    } else {
      currentProxychains.value = ProxychainsOptions[0]
    }
  }, [
    currentProxychains,
    cwin.value,
    proxychainsReplacementID.value,
    proxychainPrepends.value,
    extraFlagsOptionEnabled,
  ])

  if (cwin.value === undefined) {
    console.log('does this need a key?')
    return <></>
  }

  return (
    <Box key={`omni-proxychains-box-${cwin.value.win}`}>
      <Box sx={{ display: 'flex', padding: '5px' }}>
        <AlertDialog title="Help: Proxychains">
          <Typography>
            Proxychains allows for tunneling the network traffic for a given
            command. This setting allows Proxychains to be prepended to the
            given command, with various options, on a per-command basis.
            <br />
            <br />
            NOTE: Search for <CodeTypography>tunneling</CodeTypography>,{' '}
            <CodeTypography>chisel</CodeTypography> or{' '}
            <CodeTypography>proxychains</CodeTypography> in the search bar for
            commands to help setup <CodeTypography>proxychains</CodeTypography>{' '}
            and a tunnel
          </Typography>
        </AlertDialog>
        <Autocomplete
          disablePortal
          id={`omni-proxychains-box-${cwin.value.win}`}
          options={ProxychainsOptions as Array<ProxychainsProps>}
          getOptionLabel={(option) => option.term}
          sx={{ width: '30%' }}
          value={
            ProxychainsOptions.filter(
              (cmdWrap) =>
                cmdWrap.cmd ===
                (proxychainPrepends.value[proxychainsReplacementID.value] !==
                undefined
                  ? proxychainPrepends.value[proxychainsReplacementID.value]
                  : '__CMD__')
            )[0]
          }
          renderInput={(params) => (
            <TextField {...params} label="Proxychains Options..." />
          )}
          onChange={(
            _event: React.SyntheticEvent,
            newValue: ProxychainsProps | null
          ) => {
            if (newValue === undefined || newValue === null) {
              // this happens when the 'x' clear button is clicked, set to the default value!
              setProxychainPrepends({
                name: proxychainsReplacementID.value,
                value: ProxychainsOptions[0].cmd,
              })
              extraFlagsOptionEnabled.value = false
            } else {
              setProxychainPrepends({
                name: proxychainsReplacementID.value,
                value: newValue.cmd,
              })
              extraFlagsOptionEnabled.value =
                newValue.cmd.indexOf(extraProxychainsFlagCfg.replace) > -1
            }
          }}
          isOptionEqualToValue={function (
            option: ProxychainsProps,
            value: ProxychainsProps
          ) {
            if (option.cmd === value.cmd && option.term === value.term) {
              return true
            }

            return false
          }}
        />

        {/* Custom string input defined here for when the user selects the option for adding extra args */}

        {extraFlagsOptionEnabled.value && (
          <Box sx={{ display: 'flex' }}>
            <AlertDialog title={extraProxychainsFlagCfg.props.label}>
              <Typography>{extraProxychainsFlagCfg.help}</Typography>
            </AlertDialog>
            <ConfigStringInput
              disabled={false}
              cfg={extraProxychainsFlagCfg}
              props={extraProxychainsFlagCfg.props as StringInputProps}
              defaultValue={''}
            />
          </Box>
        )}
      </Box>
    </Box>
  )
})

export default ProxyChains
