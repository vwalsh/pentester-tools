import React, { useContext } from 'react'
import { AppState } from '../../../Home'
import { useComputed } from '@preact/signals-react'
import { Box } from '@mui/material'
import AlertDialog from '../../../../../components/AlertDialog'
import ConfigInput from '../../ConfigInput'
import RenderMarkdown from '../../../../../components/RenderMarkdown'

export interface ConfigCompsProps {
  windowNum: number
}
const CommandTools = React.memo(({ windowNum }: ConfigCompsProps) => {
  const { command_windows } = useContext(AppState)

  const cwin = useComputed(() => {
    return command_windows.value[windowNum]
  })

  const Tools = React.memo(() => {
    const { findReplacedValue } = useContext(AppState)

    const computedMap = useComputed(() => {
      if (cwin.value === undefined || cwin.value?.config === undefined) {
        return []
      }
      return cwin.value.config.map((cfg) => {
        return {
          key: btoa(JSON.stringify(cfg)),
          cfg: cfg,
          title: cfg.props.label,
          help: cfg.help,
          defaultValue: cfg.defaultValue,
          // replaceId: `id-${cwin.value.id}-win-${cwin.value.win}-${cfg.replace}`,
          // highlightComponent: highlightFound === true,
          highlightComponent: findReplacedValue(
            `id-${cwin.value?.id}-win-${cwin.value?.win}-${cfg.replace}`
          ),
        }
      })
    })

    if (
      cwin.value?.config === undefined ||
      cwin.value?.config?.length === undefined ||
      cwin.value.config.length < 1
    ) {
      return (
        <React.Fragment
          key={`command_windows_${windowNum}-${cwin.value?.win}`}
        ></React.Fragment>
      )
    }

    return computedMap.value.map((comp) => {
      return (
        <Box sx={{ display: 'block', breakInside: 'avoid' }} key={comp.key}>
          <Box sx={{ display: 'flex', minHeight: '75px', padding: '5px' }}>
            {comp.cfg.props.type !== 'radio' && (
              <AlertDialog title={comp.title}>
                <RenderMarkdown mdText={comp.help} />
              </AlertDialog>
            )}

            <ConfigInput
              help={{ title: comp.title, helptext: comp.help }}
              // help={{ title: '', helptext: '' }}

              highlightComponent={comp.highlightComponent}
              // replacements={replacements}
              cfg={comp.cfg}
              defaultValue={comp.defaultValue}
              // replaceId={comp.replaceId}
            />
          </Box>
        </Box>
      )
    })
  })

  if (
    command_windows.value === undefined ||
    command_windows.value.length < 1 ||
    command_windows.value.length < windowNum
  ) {
    return <React.Fragment key={`command_windows_undefined`}></React.Fragment>
  }

  return (
    <Box
      sx={{
        width: 'calc( 100% - 20px )',
        padding: '10px',
        columns: '2',
        breakInside: 'avoid',
      }}
      key={`command_windows_defined`}
    >
      <Tools />
    </Box>
  )
})

export default CommandTools
