import {
  Autocomplete,
  Box,
  FilterOptionsState,
  InputAdornment,
  Typography,
} from '@mui/material'
import TextField from '@mui/material/TextField'
import { useContext } from 'react'
import AlertDialog from '../../../../components/AlertDialog'
import { AppState } from '../../Home'
import ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown'

import Commands from '../../../../assets/commands.json'
import { CommandsProps } from '../ConfigInput/ConfigInput'
import CodeTypography from '../../../../components/CodeTypography'
import React from 'react'

interface TermsProps {
  label: string
  keywords: Array<string>
}

const search_terms: Array<TermsProps> = (Commands as Array<CommandsProps>).map(
  (cmd): TermsProps => {
    return {
      label: cmd.id.replaceAll('-', ' '),
      keywords: cmd.keywords,
    }
  }
)

const OmniSearch = React.memo(() => {
  const { commandSearch } = useContext(AppState)

  return (
    <>
      <Box
        sx={{
          display: 'flex',
          alignContent: 'center',
          alignItems: 'center',
          width: '100%',
        }}
      >
        <AlertDialog title="Search for a command">
          <Typography>
            Fuzzy search is applied, for best results consider a category such
            as <CodeTypography>download</CodeTypography> or a protocol like{' '}
            <CodeTypography>http</CodeTypography>
            <br />
            <br />
            TIP: Type a search term, press{' '}
            <CodeTypography>Enter</CodeTypography> to accept the search term,
            then repeat until all search terms are entered. This will allow for
            searching of multiple keywords. Any matches of each keyword will
            update the search results.
          </Typography>
        </AlertDialog>

        <Autocomplete
          multiple
          filterSelectedOptions
          clearOnEscape
          freeSolo
          disablePortal
          id="omni-search-box"
          options={search_terms}
          fullWidth
          ListboxProps={{ sx: { textTransform: 'capitalize' } }}
          renderInput={(params) => (
            <TextField
              {...params}
              label="Command Search..."
              sx={{ textTransform: 'capitalize' }}
              InputProps={{
                ...params.InputProps,
                endAdornment: (
                  <>
                    {params.InputProps.endAdornment}
                    <InputAdornment position="end">
                      <ArrowDropDownIcon />
                    </InputAdornment>
                  </>
                ),
              }}
            />
          )}
          filterOptions={(
            options: Array<TermsProps>,
            state: FilterOptionsState<TermsProps>
          ) => {
            // match on exact or partial searches
            const searchTerm = state.inputValue.toLowerCase()
            return options.filter((opt) => {
              if (opt.label.toLowerCase().indexOf(searchTerm) > -1) {
                return true
              }

              return (
                opt.keywords.filter((keyword) => {
                  return keyword.toLowerCase().indexOf(searchTerm) > -1
                }).length > 0
              )
            })
          }}
          onChange={(
            _event: React.SyntheticEvent,
            newValue: (string | TermsProps)[] | null
          ) => {
            if (newValue === null) {
              commandSearch.value = []
            } else {
              commandSearch.value = newValue.map((v) =>
                typeof v === 'string' ? v : v.label
              )
            }
          }}
          isOptionEqualToValue={function (
            option: TermsProps,
            value: TermsProps
          ) {
            const optionTitle =
              typeof option === 'string' ? option : option.label
            const valueTitle = typeof value === 'string' ? value : value.label
            return optionTitle === valueTitle
          }}
        />
      </Box>
    </>
  )
})

export default OmniSearch
