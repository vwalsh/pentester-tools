import { Autocomplete, Box, Typography } from '@mui/material'
import TextField from '@mui/material/TextField'
import { useContext } from 'react'
import AlertDialog from '../../../../components/AlertDialog'
import { AppState } from '../../Home'

import Commands from '../../../../assets/commands.json'
import { CommandsProps } from '../ConfigInput/ConfigInput'
import CodeTypography from '../../../../components/CodeTypography'
import React from 'react'

interface TermsProps {
  label: string
}

const search_terms: Array<TermsProps> = (Commands as Array<CommandsProps>).map(
  (cmd): TermsProps => {
    return {
      label: cmd.id.replaceAll('-', ' '),
    }
  }
)

const OmniSearch = React.memo(() => {
  const { commandSearch } = useContext(AppState)

  return (
    <>
      <Box
        sx={{
          display: 'flex',
          alignContent: 'center',
          alignItems: 'center',
          width: '100%',
        }}
      >
        <AlertDialog title="Search for a command">
          <Typography>
            Fuzzy search is applied, for best results consider a category such
            as <CodeTypography>download</CodeTypography> or a protocol like{' '}
            <CodeTypography>http</CodeTypography>
          </Typography>
        </AlertDialog>

        <Autocomplete
          multiple
          filterSelectedOptions
          freeSolo
          disablePortal
          id="omni-search-box"
          options={search_terms}
          // sx={{ width: '500px' }}
          fullWidth
          ListboxProps={{ sx: { textTransform: 'capitalize' } }}
          renderInput={(params) => (
            <TextField
              {...params}
              label="Command Search..."
              sx={{ textTransform: 'capitalize' }}
            />
          )}
          onChange={(
            _event: React.SyntheticEvent,
            newValue: (string | TermsProps)[] | null
          ) => {
            if (newValue === null) {
              commandSearch.value = []
            } else {
              commandSearch.value = newValue.map((v) =>
                typeof v === 'string' ? v : v.label
              )
            }
          }}
          isOptionEqualToValue={function (
            option: TermsProps,
            value: TermsProps
          ) {
            if (option.label === value.label) {
              return true
            }

            return false
          }}
        />
      </Box>
    </>
  )
})

export default OmniSearch
