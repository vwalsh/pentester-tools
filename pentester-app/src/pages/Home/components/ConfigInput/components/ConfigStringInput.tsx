import { useContext, useEffect } from 'react'
import { AppState } from '../../../Home'
import { TextField, InputAdornment, IconButton } from '@mui/material'
import { useSignal } from '@preact/signals-react'
import React from 'react'
import { CMDConfigProps, StringInputProps } from '../ConfigInput'
import CloseIcon from '@mui/icons-material/Close'

interface StringInputCompProps {
  cfg: CMDConfigProps
  props: StringInputProps
  defaultValue: string
}
const ConfigStringInput = React.memo(
  ({ cfg, props, defaultValue }: StringInputCompProps) => {
    const { replacements, setReplacements } = useContext(AppState)

    const val = useSignal<string>(defaultValue)
    const validationError = useSignal<boolean>(false)

    const handleUpdate = (eventTargetValue: string) => {
      // check if the validationRegex exists, apply it if it does
      if (cfg.validationRegex !== undefined && cfg.validationRegex !== '') {
        const re = new RegExp(cfg.validationRegex)

        validationError.value = !re.test(eventTargetValue)
      }

      val.value = eventTargetValue
      setReplacements({
        name: cfg.replace,
        value: eventTargetValue,
      })
    }

    useEffect(() => {
      // run this once
      if (cfg.props.type !== 'string') {
        return
      }

      // run once to set the defaultValue or previously set replacements value for this input
      const f = replacements.value?.[cfg.replace]

      if (f !== undefined && typeof f === 'string') {
        val.value = f
      } else {
        setReplacements({
          name: cfg.replace,
          value: defaultValue,
        })
      }
    })

    if (cfg.props.type !== 'string') {
      return <></>
    }
    return (
      <TextField
        fullWidth
        {...props}
        value={val}
        error={validationError.value}
        helperText={validationError.value === true ? cfg.validationHelp : ''}
        InputProps={{
          endAdornment: (
            <InputAdornment position="end">
              <IconButton
                tabIndex={-1}
                onClick={() => {
                  handleUpdate(defaultValue)
                }}
              >
                <CloseIcon color="error" />
              </IconButton>
            </InputAdornment>
          ),
        }}
        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
          handleUpdate(event.target.value)
        }}
      />
    )
  }
)

export default ConfigStringInput
