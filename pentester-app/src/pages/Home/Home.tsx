import {
  Autocomplete,
  Box,
  ButtonGroup,
  Grid,
  TextField,
  Typography,
} from '@mui/material'
import IPv4Input from '../../components/IPv4Input'
import OmniSearch from './components/OmniSearch'
import CommandConfigurator from './components/CommandConfigurator'

import HTTPToolsFiles from '../../assets/dirtree.json'
import { useSignalEffect } from '@preact/signals-react'
import { createContext, useContext } from 'react'
import createCommandConfiguratorState from '../../signals/signals'
import GlobalReplacementsDialog from '../../components/GlobalReplacementsDialog'
import LootDialog from './components/CommandConfigurator/components/LootDialog'
import AlertDialog from '../../components/AlertDialog'
import CommandHistoryDialog from './components/CommandConfigurator/components/CommandHistoryDialog'
import React from 'react'
import ConfigStringInput from './components/ConfigInput/components/ConfigStringInput'
import {
  CMDConfigProps,
  StringInputProps,
} from './components/ConfigInput/ConfigInput'
import CodeTypography from '../../components/CodeTypography'
import CopyItem from '../../components/CopyItem'

const signalState = createCommandConfiguratorState()
export const AppState = createContext(signalState)

const globalAuthUsernameCfg: CMDConfigProps = {
  help: "Username to authenticate with. NOTE: A command isn't required to use this value!",
  replace: '__USERNAME__',
  defaultValue: '',
  props: {
    type: 'string',
    label: 'Global: Auth Username',
  },
}
const globalAuthPasswordCfg: CMDConfigProps = {
  help: "Plaintext Password to authenticate with. NOTE: A command isn't required to use this value!",
  replace: '__PASSWORD__',
  defaultValue: '',
  props: {
    type: 'string',
    label: 'Global: Auth Password',
  },
}
const globalAuthNTLMHashCfg: CMDConfigProps = {
  help: "NTLM Password Hash to authenticate with. NOTE: A command isn't required to use this value!",
  replace: '__NTLM_PASSWORD_HASH__',
  defaultValue: '',
  props: {
    type: 'string',
    label: 'Global: NTLM Password Hash',
  },
}
const globalAuthDomainCfg: CMDConfigProps = {
  help: "AD Domain or Workgroup to authenticate to. NOTE: A command isn't required to use this value!",
  replace: '__DOMAIN__',
  defaultValue: 'WORKGROUP',
  props: {
    type: 'string',
    label: 'Global: Auth Domain or Workgroup',
  },
}

const Home = React.memo(() => {
  return (
    <AppState.Provider value={signalState}>
      <HomeUi />
    </AppState.Provider>
  )
})

const HomeUi = React.memo(() => {
  const { httpFile, ahost, aport, vhost, vport } = useContext(AppState)

  useSignalEffect(() => {
    httpFile.value =
      httpFile.value === undefined || httpFile.value === ''
        ? HTTPToolsFiles.tree[0]
        : httpFile.value
  })

  return (
    <>
      <Box sx={{ display: 'flex', margin: '10px' }}>
        <AlertDialog title="Help: What is this tool?">
          <Typography>
            The components on this page help to create a command-to-run for your
            pentest. Start by searching for a type of task to accomplish.
            <br />
            <br />
            On the left the search results will populate buttons, these are the
            Commands that can be built to run. Click a Command on the left to
            populate a window on the right. If the search results have Commands
            with more than Window 0 options, then typically there are multiple
            commands to run or setup to accomplish this task.
            <br />
            <br />
            With some Windows populated on the right, start selecting the values
            for the given flags/options to configure the command-to-run.
            <br />
            <br />
            When finished configuring the command, review it for errors and then
            click the Copy button on the left of the command text. Now you're
            ready to paste this command where you need to run it.
            <br />
            <br />
            See each info icon for specific help.
          </Typography>
        </AlertDialog>
        <Typography variant="h4">Pentester Command Configurator</Typography>
      </Box>
      <Grid container spacing={2}>
        <Grid item xs={6}>
          <IPv4Input
            hostSignal={ahost}
            portSignal={aport}
            defaultOctets={[192, 168, 90, 100]}
            role="attacker"
            akaName="kali"
          />
        </Grid>
        <Grid item xs={6}>
          <IPv4Input
            hostSignal={vhost}
            portSignal={vport}
            defaultOctets={[192, 168, 10, 200]}
            role="victim"
            akaName="target"
          />
        </Grid>

        <Grid item md={6} lg={3}>
          <Box sx={{ display: 'flex' }}>
            <AlertDialog title="Help: Username authentication">
              <Typography>
                Username Authentication is used in many commands which is why
                it's a global option to configure.
                <br />
                <br />
                NOTE: Commands can implement this by including
              </Typography>
              <CopyItem val={'__USERNAME__'}>
                <CodeTypography>__USERNAME__</CodeTypography>
              </CopyItem>{' '}
              <Typography>
                in the command string. Use of this value isn't a requirement of
                any command.
              </Typography>
            </AlertDialog>
            <ConfigStringInput
              disabled={false}
              disableColorHighlight={true}
              cfg={globalAuthUsernameCfg}
              props={globalAuthUsernameCfg.props as StringInputProps}
              defaultValue={''}
            />
          </Box>
        </Grid>
        <Grid item md={6} lg={3}>
          <Box sx={{ display: 'flex' }}>
            <AlertDialog title="Help: Password authentication">
              <Typography>
                Password Authentication is used in many commands which is why
                it's a global option to configure.
                <br />
                <br />
                NOTE: Commands can implement this by including
              </Typography>
              <CopyItem val={'__PASSWORD__'}>
                <CodeTypography>__PASSWORD__</CodeTypography>
              </CopyItem>{' '}
              <Typography>
                in the command string. Use of this value isn't a requirement of
                any command.
              </Typography>
            </AlertDialog>
            <ConfigStringInput
              disabled={false}
              disableColorHighlight={true}
              cfg={globalAuthPasswordCfg}
              props={globalAuthPasswordCfg.props as StringInputProps}
              defaultValue={''}
            />
          </Box>
        </Grid>
        <Grid item md={6} lg={3}>
          <Box sx={{ display: 'flex' }}>
            <AlertDialog title="Help: NTLM Password Hash authentication">
              <Typography>
                NTLM Password Hash Authentication is used in many commands which
                is why it's a global option to configure.
                <br />
                <br />
                NOTE: Commands can implement this by including
              </Typography>
              <CopyItem val={'__NTLM_PASSWORD_HASH__'}>
                <CodeTypography>__NTLM_PASSWORD_HASH__</CodeTypography>
              </CopyItem>{' '}
              <Typography>
                in the command string. Use of this value isn't a requirement of
                any command.
              </Typography>
            </AlertDialog>
            <ConfigStringInput
              disabled={false}
              disableColorHighlight={true}
              cfg={globalAuthNTLMHashCfg}
              props={globalAuthNTLMHashCfg.props as StringInputProps}
              defaultValue={''}
            />
          </Box>
        </Grid>
        <Grid item md={6} lg={3}>
          <Box sx={{ display: 'flex' }}>
            <AlertDialog title="Help: Domain or Workgroup for authentication">
              <Typography>
                Authentication to either a Domain or Workgroup is used in many
                commands which is why it's a global option to configure.
                <br />
                <br />
                NOTE: Commands can implement this by including
              </Typography>
              <CopyItem val={'__DOMAIN__'}>
                <CodeTypography>__DOMAIN__</CodeTypography>
              </CopyItem>{' '}
              <Typography>
                in the command string. Use of this value isn't a requirement of
                any command.
              </Typography>
            </AlertDialog>
            <ConfigStringInput
              disabled={false}
              disableColorHighlight={true}
              cfg={globalAuthDomainCfg}
              props={globalAuthDomainCfg.props as StringInputProps}
              defaultValue={'WORKGROUP'}
            />
          </Box>
        </Grid>

        <Grid item xs={5}>
          <OmniSearch />
        </Grid>

        <Grid item xs={2}>
          <ButtonGroup
            variant="outlined"
            size="large"
            aria-label="Global Tools Group"
          >
            <GlobalReplacementsDialog />
            <LootDialog />
            <CommandHistoryDialog />
          </ButtonGroup>
        </Grid>
        <Grid item xs={4}>
          <Autocomplete
            disablePortal
            id="omni-filesearch-box"
            options={HTTPToolsFiles.tree as Array<string>}
            sx={{ width: 300 }}
            value={httpFile.value}
            renderInput={(params) => (
              <TextField {...params} label="Tools File Search..." />
            )}
            onChange={(
              _event: React.SyntheticEvent,
              newValue: string | null
            ) => {
              httpFile.value = newValue === null ? '' : newValue
            }}
            isOptionEqualToValue={function (option: string, value: string) {
              if (option === value || value === '') {
                return true
              }

              return false
            }}
          />
        </Grid>
        <Grid item xs={3}></Grid>
      </Grid>

      <hr />

      <Box sx={{ minHeight: 'calc( 100vh - 600px )' }}>
        <CommandConfigurator />
      </Box>
    </>
  )
})

export default Home
