interface GlobalSpecialProps {
  replace: string
  desc: string
}

interface GlobalReplacementsProps {
  replace: string
  example: string
  desc: string
}

export const globalSpecialReplacements: Array<GlobalSpecialProps> = [
  {
    replace: '__CMD__',
    desc: 'used for Terminal Wraps, to wrap an entire command',
  },
  {
    replace: '__PS_BASE64_ENC__',
    desc: 'used for Terminal Wraps, when converting a command to run as base64 in powershell',
  },
  {
    replace: '__BASE64_CMD__',
    desc: 'used for Terminal Wraps, when converting a command to run as base64 in a linux shell',
  },
  {
    replace: '__EXTRA_PROXYCHAINS_ARGS__',
    desc: 'custom arguments provided by the user for their proxychains command',
  },
]

export const globalReplacements: Array<GlobalReplacementsProps> = [
  {
    replace: '__ATTACKER_HOST__',
    example: '10.10.10.100',
    desc: 'Attacker hostname or ipv4 (aka kali)',
  },
  {
    replace: '__ATTACKER_PORT__',
    example: '8888',
    desc: 'Attacker port (aka kali port). Consider using a config number input instead of this.',
  },
  {
    replace: '__TARGET_HOST__',
    example: '192.168.100.100',
    desc: 'Target hostname or ipv4 (aka victim)',
  },
  {
    replace: '__TARGET_PORT__',
    example: '9999',
    desc: 'Target port (aka victim port). Consider using a config number input instead of this.',
  },
  {
    // NOTE: this is a 'global tool' but is inserted into the replacements data structure, so it doesn't need to
    // be added to the global replacement part of the command text.
    // this is just a bad design choice but the configstringinput is nice to re-use as a component for this type of input entry...
    replace: '__USERNAME__',
    example: 'test.username',
    desc: 'Username used for authenticating for a command that needs a username',
  },
  {
    // NOTE: this is a 'global tool' but is inserted into the replacements data structure, so it doesn't need to
    // be added to the global replacement part of the command text.
    // this is just a bad design choice but the configstringinput is nice to re-use as a component for this type of input entry...
    replace: '__PASSWORD__',
    example: 'sunshine1!',
    desc: 'Plaintext Password used for authenticating for a command that needs a password',
  },
  {
    // NOTE: this is a 'global tool' but is inserted into the replacements data structure, so it doesn't need to
    // be added to the global replacement part of the command text.
    // this is just a bad design choice but the configstringinput is nice to re-use as a component for this type of input entry...
    replace: '__NTLM_PASSWORD_HASH__',
    example: 'b4b9b02e6f09a9bd760f388b67351e2b',
    desc: 'NTLM Hash used for authenticating for a command that needs an NTLM password hash (typically 32 characters hexadecimal string). The example hash is for the password "hashcat"',
  },
  {
    // NOTE: this is a 'global tool' but is inserted into the replacements data structure, so it doesn't need to
    // be added to the global replacement part of the command text.
    // this is just a bad design choice but the configstringinput is nice to re-use as a component for this type of input entry...
    replace: '__DOMAIN__',
    example: 'test.com',
    desc: 'AD Domain or Workgroup name used for authenticating for a command that needs a domain or workgroup',
  },
  {
    replace: '/__PATH__',
    example: '/path/to/http_tools_folder/',
    desc: 'The path from the Tools File Search selection. NOTE: this is the path only, the filename is not included!',
  },
  {
    replace: '__FILE__',
    example: 'chisel.exe',
    desc: 'The filename from the Tools File Search selection, without the path.',
  },
  {
    replace: '__TOOLS_PATH__',
    example: '/home/kali/oscp/tools',
    desc: 'The path to the directory where any pentesting tools, exploits, payloads or other files exist which are useful to download onto a victim machine.',
  },
  {
    replace: '__BLANK__',
    example: '',
    desc: 'This will insert an empty string aka nothing is inserted into the command. This is a default option when Custom Input is enabled on an Select Input',
  },
]
