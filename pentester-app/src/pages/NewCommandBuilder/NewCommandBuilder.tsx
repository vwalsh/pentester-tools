import {
  Box,
  Button,
  Grid,
  InputAdornment,
  ListItem,
  TextField,
  Typography,
} from '@mui/material'
import React from 'react'
import { useSignal, useComputed } from '@preact/signals-react'
import CopyItem from '../../components/CopyItem'

import AlertDialog from '../../components/AlertDialog'
import Commands from '../../assets/commands.json'
import CommandsEditor from './components/CommandsEditor'
import {
  CMDProps,
  CommandsProps,
} from '../Home/components/ConfigInput/ConfigInput'
import ListEditor from './components/ListEditor'
import TuneIcon from '@mui/icons-material/Tune'
import ConfirmDialog from '../../components/ConfirmDialog'
import ManageSearchIcon from '@mui/icons-material/ManageSearch'

const NewCommandBuilder = React.memo(() => {
  const commandId = useSignal({ id: '', error: false })
  const keywords = useSignal<Array<string>>([])
  const commandWindows = useSignal<Array<CMDProps>>([])
  const editCommandWindow = useSignal<undefined | CMDProps>(undefined)

  const resetStateToDefaults = () => {
    commandId.value = { id: '', error: false }
    keywords.value = []
    commandWindows.value = []
    editCommandWindow.value = undefined
  }

  const commandJson = useComputed(() => {
    // this builds the json to add to the commands.json file
    const tmp: CommandsProps = {
      id: commandId.value.id,
      keywords: keywords.value,
      cmds: commandWindows.value,
    }

    return JSON.stringify(tmp)
  })

  // const CommandsList = useMemo(() => {
  const CommandsList = React.memo(() => {
    if (
      commandWindows.value === undefined ||
      commandWindows.value?.length < 1
    ) {
      return <></>
    }

    return commandWindows.value.map((cmd) => {
      return (
        <ListItem
          key={cmd.label}
          sx={{
            border: '1px solid #cecece',
            display: 'flex',
            flexDirection: 'column',
            gap: '10px',
            ...(editCommandWindow.value !== undefined &&
              editCommandWindow.value === cmd && { background: '#4a2a00' }),
          }}
        >
          <Typography>
            Window:{cmd.win} - {cmd.label} with{' '}
            {cmd.config === undefined ? 0 : cmd.config.length} Config Inputs
            Total
          </Typography>

          <Box sx={{ display: 'flex', flexDirection: 'row', gap: '10px' }}>
            <Button
              variant="outlined"
              disabled={editCommandWindow.value !== undefined}
              onClick={() => {
                editCommandWindow.value = cmd
              }}
            >
              <TuneIcon />
            </Button>

            <ConfirmDialog
              buttonText=""
              title={`Delete the Command '${cmd.label}' ?`}
              desc="Deleting this Command will remove it from the json. This cannot be undone. Press Confirm below to delete."
              onConfirm={() => {
                commandWindows.value = commandWindows.value.filter((f) => {
                  return cmd.label !== f.label
                })
              }}
            />
          </Box>
        </ListItem>
      )
    })
  })
  // }, [commandWindows])

  return (
    <Box
      sx={{
        margin: '20px',
        display: 'flex',
        flexDirection: 'column',
        gap: '10px',
      }}
    >
      <Box sx={{ display: 'flex', margin: '10px' }}>
        <AlertDialog title="Help: What is this tool?">
          <Typography>
            Use this tool to create the JSON required for the rest of this web
            app to function.
            <br />
            <br />
            Here you'll create the JSON which is placed within the top-level
            Array in the /assets/commands.json file.
            <br />
            <br />
            The components below help to enter the required data for each
            Command and group them. Grouping is done via the Window Number. This
            is a numeric value that is expected to map to some terminal window
            or location for running the command. When two Commands have the same
            Window Number, then only one Command can be shown at a time in the
            Command Configurator. This is to help reduce confusion for the
            end-user as they can select the Command to configure, and be focused
            on fewer elements on the screen while configuring.
            <br />
            <br />
            Replacement values are patterned strings that are used to replace
            the input from the end-user and store it in the command-to-run. Try
            to re-use replacement values where it makes sense, eg a Command for
            creating an HTTP server and a Command for accessing that HTTP server
            should go in two different Window Numbers and ideally the HTTP
            Server Command Configurator would have the Server Port input so the
            HTTP Client Command can access it without forcing the end-user to
            configure the same port twice.
            <br />
            <br />
            See each info icon for specific help.
          </Typography>
        </AlertDialog>
        <Typography variant="h4">New Command JSON Builder</Typography>
      </Box>

      <Grid container>
        <Grid item xs={4}>
          <TextField
            label="Command ID"
            variant="outlined"
            value={commandId.value.id}
            error={commandId.value.error}
            helperText={commandId.value.error === true ? 'Must be unique' : ''}
            // fullWidth
            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
              const newId = event.target.value

              const f = (Commands as Array<CommandsProps>).filter((c) => {
                return c.id === newId
              })

              if (f.length > 0 && newId.length > 0) {
                // id exists, warn user
                commandId.value = { id: newId, error: true }
              } else {
                commandId.value = { id: newId, error: false }
              }
            }}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <AlertDialog title={`Command ID`}>
                    <Typography>
                      The Command ID is an unique identifier used to
                      differentiate a given search result from another. It must
                      be unique, with the convention being lowercase words
                      separated by a hyphen (aka test-id).
                    </Typography>
                  </AlertDialog>
                </InputAdornment>
              ),
            }}
          />
        </Grid>
        <Grid item xs={4}>
          <AlertDialog
            outlined={true}
            title={`Keywords Editor`}
            CustomIcon={
              <Typography>
                <ManageSearchIcon /> Keywords Editor
              </Typography>
            }
          >
            <ListEditor
              uniqueEntries={true}
              listState={keywords}
              title="Keywords Editor"
              helpText={
                <Typography>
                  Keywords are necessary so the Command Search can find results.
                  Enter all the relevant keywords, one keyword per entry. Click
                  the trash icon to remove a keyword from the list.
                  <br />
                  <br />
                  NOTE: To further improve search, edit the search_terms
                  variable in the OmniSearch component.
                  <br />
                  <br />
                  TIP: type the keyword and then press ENTER to add it to the
                  list.
                </Typography>
              }
            />
          </AlertDialog>
        </Grid>

        <Grid item xs={4}>
          <ConfirmDialog
            buttonText="RESET Editor for new commands"
            title="Discard all values and start over?"
            desc="Press Confirm below to RESET all values. Only do this after copying and saving any previously built json to the /assets/commands.json file."
            onConfirm={() => {
              resetStateToDefaults()
            }}
          />
        </Grid>
      </Grid>

      <TextField
        id="command-json"
        label="/assets/commands.json JSON value to add this command set"
        multiline
        fullWidth
        maxRows={4}
        value={commandJson.value}
        disabled={commandId.value.id === '' ? false : true}
        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
          try {
            const newJson = JSON.parse(event.target.value) as CommandsProps

            commandId.value = { id: newJson.id, error: false }
            keywords.value = newJson.keywords
            commandWindows.value = newJson.cmds
          } catch (e) {
            console.log('error parsing json', e)
          }
        }}
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <AlertDialog title={`commands.json JSON output`}>
                <Typography>
                  This is the JSON data that needs to be added to the
                  /assets/commands.json file. This is what this page helps
                  build.
                  <br />
                  <br />
                  TIP: Paste in a Command from the /assets/commands.json here to
                  edit an existing Command! Be aware the inputs need to be Reset
                  to paste in json. Don't forget to save the json to the
                  /assets/commands.json file when editing is finished.
                  <br />
                  <br />
                  NOTE: do not refresh the page or you will lose any current
                  progress within this tool!
                </Typography>
              </AlertDialog>
              <CopyItem val={commandJson.value}></CopyItem>
            </InputAdornment>
          ),
        }}
      />

      <Grid container>
        <Grid item xs={2}>
          <Box
            sx={{
              display: 'flex',
              alignContent: 'center',
              alignItems: 'center',
            }}
          >
            <Typography variant="h5">Commands:</Typography>
            <AlertDialog title={`Help: What are Commands?`}>
              <Typography>
                Commands will be shown in search results via keyword matching. A
                Command should help the end-user to do a given task and build a
                valid command-to-run. Multiple commands are usually grouped
                within a single Command ID. This allows for commands to have the
                same name under a different Command ID.
              </Typography>
            </AlertDialog>
          </Box>
          {/* {CommandsList} */}
          <CommandsList />
        </Grid>
        <Grid item xs={10}>
          <CommandsEditor
            commandWindows={commandWindows}
            editCommandWindow={editCommandWindow}
          />
        </Grid>
      </Grid>
    </Box>
  )
})

export default NewCommandBuilder
