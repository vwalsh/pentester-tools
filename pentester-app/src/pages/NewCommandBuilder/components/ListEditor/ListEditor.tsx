import { useSignal, Signal } from '@preact/signals-react'
import React from 'react'
import TextField from '@mui/material/TextField'
import List from '@mui/material/List'
import ListItem from '@mui/material/ListItem'
import IconButton from '@mui/material/IconButton'
import { Box, InputAdornment, Typography } from '@mui/material'
import AlertDialog from '../../../../components/AlertDialog'
import AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline'
import ConfirmDialog from '../../../../components/ConfirmDialog'

interface ListEditorProps {
  listState: Signal<Array<string>>
  helpText: React.ReactNode
  title: string
  uniqueEntries: boolean
}

const ListEditor = React.memo(
  ({ listState, helpText, title, uniqueEntries }: ListEditorProps) => {
    const input = useSignal<string>('')
    const error = useSignal<boolean>(false)

    const handleAddEntry = () => {
      if (input.value) {
        if (
          (uniqueEntries === true &&
            listState.value.indexOf(input.value) > -1) ||
          uniqueEntries === false
        ) {
          error.value = true
          return
        }

        listState.value = [...listState.value, input.value]
        input.value = ''
        error.value = false
      }
    }

    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
      input.value = event.target.value

      if (
        (uniqueEntries === true && listState.value.indexOf(input.value) > -1) ||
        uniqueEntries === false
      ) {
        error.value = true
      } else {
        error.value = false
      }
    }

    const handleDeleteEntry = (index: number) => {
      const newList = listState.value.filter((_, i) => i !== index)
      listState.value = newList
    }

    return (
      <Box
        sx={{
          width: '100%',
          border: '1px solid #cecece',
          padding: '10px',
          borderRadius: '10px',
          margin: '5px',
        }}
      >
        <Typography>{title}</Typography>
        <TextField
          label="Add entry to list"
          variant="outlined"
          value={input}
          fullWidth
          error={error.value}
          helperText={error.value === true ? 'Unique entries are required' : ''}
          onChange={handleInputChange}
          onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => {
            if (event.key === 'Enter') {
              handleAddEntry()
            }
          }}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <AlertDialog title={title}>{helpText}</AlertDialog>
                <IconButton
                  edge="end"
                  aria-label="add entry"
                  onClick={handleAddEntry}
                >
                  <AddCircleOutlineIcon />
                </IconButton>
              </InputAdornment>
            ),
          }}
        />
        <List>
          {listState.value.map((entry, index) => (
            <ListItem
              key={entry}
              secondaryAction={
                <ConfirmDialog
                  title={`Delete '${entry}'?`}
                  buttonText=""
                  desc="Once this is removed it cannot be undone. Are you sure?"
                  onConfirm={() => handleDeleteEntry(index)}
                />
              }
            >
              <Typography
                sx={{
                  wordWrap: 'break-word',
                  width: '80%',
                  maxHeight: '4.5em',
                  overflow: 'hidden',
                  userSelect: 'none',
                }}
              >
                {entry}
              </Typography>
            </ListItem>
          ))}
        </List>
      </Box>
    )
  }
)

export default ListEditor
