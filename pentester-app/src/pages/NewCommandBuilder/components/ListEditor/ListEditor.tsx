import { useSignal, Signal } from '@preact/signals-react'
import React, { useCallback, useEffect, useMemo } from 'react'
import TextField from '@mui/material/TextField'
import List from '@mui/material/List'
import ListItem from '@mui/material/ListItem'
import IconButton from '@mui/material/IconButton'
import { Box, Button, InputAdornment, Typography } from '@mui/material'
import AlertDialog from '../../../../components/AlertDialog'
import AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline'
import ConfirmDialog from '../../../../components/ConfirmDialog'
import SelectedAsDefaultIcon from '@mui/icons-material/Star'
import NotDefaultIcon from '@mui/icons-material/EditAttributes'
import { DefaultValueProps } from '../ConfigsEditor/ConfigsEditor'

interface ListEditorProps {
  listState: Signal<Array<string>>
  helpText: React.ReactNode
  title: string
  uniqueEntries: boolean
  onDefaultValueChange?: (value: string) => void
  defaultValue?: Signal<DefaultValueProps>
}

const ListEditor = React.memo(
  ({
    listState,
    helpText,
    title,
    uniqueEntries,
    onDefaultValueChange,
    defaultValue,
  }: ListEditorProps) => {
    const input = useSignal<string>('')
    const error = useSignal<boolean>(false)
    const defaultSelected = useSignal<string>('')

    const handleAddEntry = () => {
      if (input.value) {
        if (
          (uniqueEntries === true &&
            listState.value.indexOf(input.value) > -1) ||
          uniqueEntries === false
        ) {
          error.value = true
          return
        }

        // set the default value to the first value
        if (
          listState.value.length === 0 &&
          onDefaultValueChange !== undefined
        ) {
          defaultSelected.value = input.value
          onDefaultValueChange(input.value)
        }

        listState.value = [...listState.value, input.value]

        input.value = ''
        error.value = false
      }
    }

    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
      input.value = event.target.value

      if (
        (uniqueEntries === true && listState.value.indexOf(input.value) > -1) ||
        uniqueEntries === false
      ) {
        error.value = true
      } else {
        error.value = false
      }
    }

    const handleDeleteEntry = useCallback(
      (index: number) => {
        const newList = listState.value.filter((_, i) => i !== index)
        listState.value = newList
      },
      [listState]
    )

    const ListOptions = useMemo(() => {
      if (listState.value.length < 1) {
        return <></>
      }

      return listState.value.map((entry, index) => {
        return (
          <ListItem
            key={entry}
            secondaryAction={
              <ConfirmDialog
                title={`Delete '${entry}'?`}
                buttonText=""
                desc="Once this is removed it cannot be undone. Are you sure?"
                onConfirm={() => handleDeleteEntry(index)}
              />
            }
          >
            {onDefaultValueChange !== undefined && (
              <Button
                title="Click to set this Option as the Default"
                variant="contained"
                color={defaultSelected.value === entry ? 'success' : 'info'}
                disabled={defaultSelected.value === entry}
                onClick={() => {
                  defaultSelected.value = entry
                  onDefaultValueChange(entry)
                }}
                sx={{ margin: 0, padding: '1px' }}
              >
                {defaultSelected.value === entry ? (
                  <SelectedAsDefaultIcon
                    sx={{
                      color: defaultSelected.value === entry ? '#66bb6a' : '',
                      padding: 0,
                      fontSize: '4em',
                    }}
                  />
                ) : (
                  <NotDefaultIcon
                    sx={{
                      color: defaultSelected.value === entry ? '#66bb6a' : '',
                      padding: 0,
                      fontSize: '4em',
                    }}
                  />
                )}
              </Button>
            )}
            <Typography
              sx={{
                wordWrap: 'break-word',
                width: '80%',
                maxHeight: '4.5em',
                overflow: 'hidden',
                userSelect: 'none',
                paddingLeft: '10px',
              }}
            >
              {entry}
            </Typography>
          </ListItem>
        )
      })
    }, [
      defaultSelected,
      handleDeleteEntry,
      listState.value,
      onDefaultValueChange,
    ])

    useEffect(() => {
      if (
        defaultValue === undefined ||
        defaultValue.value === undefined ||
        defaultSelected.value === defaultValue.value.value ||
        typeof defaultValue.value.value !== 'string'
      ) {
        return
      }

      defaultSelected.value = defaultValue.value.value
    }, [defaultSelected, defaultValue, defaultValue?.value])

    return (
      <Box
        sx={{
          width: '100%',
          border: '1px solid #cecece',
          padding: '10px',
          borderRadius: '10px',
          margin: '5px',
        }}
      >
        <Typography>{title}</Typography>
        <TextField
          label="Add entry to list"
          variant="outlined"
          value={input}
          fullWidth
          error={error.value}
          helperText={error.value === true ? 'Unique entries are required' : ''}
          onChange={handleInputChange}
          onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => {
            if (event.key === 'Enter') {
              handleAddEntry()
            }
          }}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <AlertDialog title={title}>{helpText}</AlertDialog>
                <IconButton
                  edge="end"
                  aria-label="add entry"
                  onClick={handleAddEntry}
                >
                  <AddCircleOutlineIcon />
                </IconButton>
              </InputAdornment>
            ),
          }}
        />
        <List>{ListOptions}</List>
      </Box>
    )
  }
)

export default ListEditor
