import { Typography, TextField, Autocomplete } from '@mui/material'
import React, { useEffect } from 'react'
import AlertDialog from '../../../../components/AlertDialog'
import CodeTypography from '../../../../components/CodeTypography'
import PsychologyAltIcon from '@mui/icons-material/PsychologyAlt'
import { Signal, useSignal } from '@preact/signals-react'
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'

interface Props {
  helpText: Signal<string>

  // the component displayed at the top, which shows the user what context they are editing the help for.
  // this will typically have a Command: and other code highlighted values.
  HelpEditingContextComponent: React.ReactNode
}

const HelpTextEditor = React.memo(
  ({ helpText, HelpEditingContextComponent }: Props) => {
    const localHelp = useSignal<string | undefined>(helpText.value)

    const codeLang = useSignal<string>('')
    const inputRef = React.useRef<HTMLInputElement | undefined>(undefined)
    // it appears this isn't needed, keeping for a bit just to be sure no bugs crop up.
    // const updateSelectionStart = () => {
    //   console.log('selection start', inputRef?.current?.selectionStart)
    // }

    useEffect(() => {
      // the helpText will change values once per edit, which sets the current edited text to the previous value
      // aka, set the starting value for editing of this help text.
      localHelp.value = helpText.value
    }, [helpText.value, localHelp])

    return (
      <AlertDialog
        title="Add/Edit Help Markdown"
        outlined
        CustomIcon={
          <Typography variant="body1">
            <PsychologyAltIcon /> Add/Edit Help Markdown
          </Typography>
        }
        onClose={() => {
          helpText.value = localHelp.value === undefined ? '' : localHelp.value
        }}
      >
        <>
          <Typography>
            {HelpEditingContextComponent}
            <br />
            Enter the Help text (as Markdown, with syntax highlighting)
            displayed for this command so the end-user can understand better.
            <br />
            TIP: Add newlines to add breaks in the content
            <br />
            TIP: Add <CodeTypography>`</CodeTypography> (backticks) around any
            text to highlight as code.
            <br />
            NOTE: Any changes to the text are automatically saved. Use{' '}
            <CodeTypography>Ctrl + z</CodeTypography> to undo before closing
            this dialog.
            <br />
          </Typography>
          <Autocomplete
            disablePortal
            options={SyntaxHighlighter.supportedLanguages}
            sx={{ width: 300 }}
            // value={httpFile.value}
            clearOnEscape
            renderInput={(params) => (
              <TextField {...params} label="Insert Codeblock by language..." />
            )}
            value={codeLang.value}
            onChange={(
              _event: React.SyntheticEvent,
              newValue: string | null
            ) => {
              const position = inputRef?.current?.selectionStart

              if (
                newValue !== null &&
                newValue !== '' &&
                position !== undefined &&
                position !== null &&
                position > -1 &&
                inputRef.current !== undefined
              ) {
                const tmp = localHelp.value === undefined ? '' : localHelp.value
                const codeblock = '\n```' + newValue + '\n\n```\n'

                localHelp.value = [
                  tmp.slice(0, position),
                  codeblock,
                  tmp.slice(position),
                ].join('')

                inputRef.current.focus()
                codeLang.value = ''

                setTimeout(() => {
                  if (inputRef.current !== undefined) {
                    // insert after the code type AND first newline
                    inputRef.current.selectionStart =
                      inputRef.current.selectionEnd =
                        position +
                        codeblock.indexOf(newValue) +
                        newValue.length +
                        1
                  }
                }, 1)
              }
            }}
            isOptionEqualToValue={function (option: string, value: string) {
              if (option === value || value === '') {
                return true
              }

              return false
            }}
          />
          <TextField
            fullWidth
            multiline
            minRows={15}
            maxRows={24}
            sx={{ background: '#222' }}
            value={localHelp.value === undefined ? '' : localHelp.value}
            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
              localHelp.value = event.target.value
            }}
            // onSelect={updateSelectionStart}
            inputRef={inputRef}
          />
        </>
      </AlertDialog>
    )
  }
)

export default HelpTextEditor
