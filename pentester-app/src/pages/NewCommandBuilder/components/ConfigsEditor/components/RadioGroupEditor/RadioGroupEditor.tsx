import { useSignal, Signal } from '@preact/signals-react'
import React, { useCallback, useMemo } from 'react'
import TextField from '@mui/material/TextField'
import List from '@mui/material/List'
import ListItem from '@mui/material/ListItem'
import IconButton from '@mui/material/IconButton'
import { Box, InputAdornment, Typography } from '@mui/material'
import AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline'
import AlertDialog from '../../../../../../components/AlertDialog'
import CodeTypography from '../../../../../../components/CodeTypography'
import ConfirmDialog from '../../../../../../components/ConfirmDialog'

export interface RadioGroupProp {
  label: string
  replace: string
}

interface Props {
  listState: Signal<Array<RadioGroupProp>>
  uniqueEntries: boolean
}

const RadioGroupEditor = React.memo(({ listState, uniqueEntries }: Props) => {
  const input = useSignal<RadioGroupProp>({ replace: '', label: '' })
  const errors = useSignal<{
    name: boolean
    value: boolean
    validation: boolean
  }>({
    name: false,
    value: false,
    validation: false,
  })

  const handleAddEntry = () => {
    if (input.value) {
      const f = listState.value.filter(
        (item) =>
          item.replace === input.value.replace ||
          item.label === input.value.label
      )
      if (
        (uniqueEntries === true && f.length > 0) ||
        uniqueEntries === false ||
        input.value.label === '' ||
        input.value.replace === ''
      ) {
        errors.value = { ...errors.value, validation: true }
        return
      }

      listState.value = [...listState.value, input.value]
      input.value = { replace: '', label: '' }
    }
  }

  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    input.value = { ...input.value, label: event.target.value }

    const f = listState.value.filter(
      (item) => item.label === event.target.value
    )

    if ((uniqueEntries === true && f.length > 0) || uniqueEntries === false) {
      errors.value = { ...errors.value, name: true }
    } else {
      errors.value = { ...errors.value, name: false }
    }
  }

  const handleValueChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    input.value = { ...input.value, replace: event.target.value }

    const f = listState.value.filter(
      (item) => item.replace === event.target.value
    )

    if ((uniqueEntries === true && f.length > 0) || uniqueEntries === false) {
      errors.value = { ...errors.value, value: true }
    } else {
      errors.value = { ...errors.value, value: false }
    }
  }

  const handleDeleteEntry = useCallback(
    (index: number) => {
      const newList = listState.value.filter((_, i) => i !== index)
      listState.value = newList
    },
    [listState]
  )

  const AllFiles = useMemo(() => {
    if (listState.value === undefined || listState.value.length < 1) {
      return <></>
    }

    return listState.value.map((entry, index) => (
      <ListItem
        key={entry.label}
        secondaryAction={
          <>
            <ConfirmDialog
              title={`Delete '${entry.label}'?`}
              buttonText=""
              desc="Once this is removed it cannot be undone. Are you sure?"
              onConfirm={() => handleDeleteEntry(index)}
            />
          </>
        }
      >
        <Typography
          sx={{
            wordWrap: 'break-word',
            width: '80%',
            maxHeight: '4.5em',
            overflow: 'hidden',
            // userSelect: 'none',
          }}
        >
          {entry.label}
        </Typography>
      </ListItem>
    ))
  }, [listState.value, handleDeleteEntry])

  return (
    <Box
      sx={{
        width: '100%',
        border: '1px solid #cecece',
        padding: '10px',
        borderRadius: '10px',
        margin: '5px',
      }}
    >
      <Typography variant="h6">
        Radio Button Options Editor
        {errors.value.validation && (
          <Typography sx={{ display: 'inline' }} color="error">
            ERROR: Both the label and replace value are required before adding
            to the list.
          </Typography>
        )}
      </Typography>

      <Box sx={{ display: 'flex', flexDirection: 'row', gap: '10px' }}>
        <TextField
          label="label (aka Radio Option name)"
          variant="outlined"
          value={input.value.label}
          fullWidth
          error={errors.value.name}
          helperText={
            errors.value.name === true ? 'Unique labels are required' : ''
          }
          onChange={handleNameChange}
          onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => {
            if (event.key === 'Enter') {
              handleAddEntry()
            }
          }}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <AlertDialog title="Help: Radio Button Options Editor">
                  <Typography>
                    Type in a label, aka text that gives context to the
                    command-to-run flag that will be inserted when this radio
                    option is selected.
                    <br />
                    <br />
                    TIP: fill in the options and then press{' '}
                    <CodeTypography>ENTER</CodeTypography> to add it to the
                    list.
                  </Typography>
                </AlertDialog>
                <IconButton
                  edge="end"
                  aria-label="add entry"
                  onClick={handleAddEntry}
                >
                  <AddCircleOutlineIcon />
                </IconButton>
              </InputAdornment>
            ),
          }}
        />
        <TextField
          label="Replacement value (typically includes __VALUE__)"
          variant="outlined"
          value={input.value.replace}
          fullWidth
          error={errors.value.value}
          helperText={
            errors.value.value === true
              ? 'Unique replacement values are required'
              : ''
          }
          onChange={handleValueChange}
          onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => {
            if (event.key === 'Enter') {
              handleAddEntry()
            }
          }}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <AlertDialog title="Help: Radio Button Options Editor - Replacement Value">
                  <Typography>
                    Replacement Values are a string which is inserted at the
                    Value to Replace eg{' '}
                    <CodeTypography>__VALUE__</CodeTypography>. Typically a
                    replacement value for a Radio Button Option will contain
                    additional <CodeTypography>__VALUE_NAME__</CodeTypography>{' '}
                    values, however this is optional. This allows for additional
                    input by the end-user to specify the values which are
                    inserted into the enabled flag. Put another way, this allows
                    the end user to decide what flag to enable (Radio Button
                    Option selected), and then start configuring the values
                    which are necessary for that flag to function correctly
                    (entering values into String, Number or other input types).
                  </Typography>
                </AlertDialog>
              </InputAdornment>
            ),
          }}
        />
      </Box>

      <List>{AllFiles}</List>
    </Box>
  )
})

export default RadioGroupEditor
