import { useSignal, Signal } from '@preact/signals-react'
import React, { useCallback, useEffect } from 'react'
import TextField from '@mui/material/TextField'
import List from '@mui/material/List'
import ListItem from '@mui/material/ListItem'
import IconButton from '@mui/material/IconButton'
import { Box, Button, InputAdornment, Typography } from '@mui/material'
import AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline'
import AlertDialog from '../../../../../../components/AlertDialog'
import CodeTypography from '../../../../../../components/CodeTypography'
import ConfirmDialog from '../../../../../../components/ConfirmDialog'
import TuneIcon from '@mui/icons-material/Tune'
import DisabledByDefaultIcon from '@mui/icons-material/DisabledByDefault'
import CheckCircleIcon from '@mui/icons-material/CheckCircle'
import { DefaultValueProps } from '../../ConfigsEditor'
import SelectedAsDefaultIcon from '@mui/icons-material/Star'
import NotDefaultIcon from '@mui/icons-material/EditAttributes'

export interface RadioGroupProp {
  label: string
  replace: string
}

interface RadioGroupInternalState extends RadioGroupProp {
  editing: number
}

interface Props {
  listState: Signal<Array<RadioGroupProp>>
  uniqueEntries: boolean

  onDefaultValueChange: (value: RadioGroupProp) => void
  defaultValue: Signal<DefaultValueProps>
}

const RadioGroupEditor = React.memo(
  ({ listState, uniqueEntries, defaultValue, onDefaultValueChange }: Props) => {
    const input = useSignal<RadioGroupInternalState>({
      replace: '',
      label: '',
      editing: -1,
    })
    const defaultSelectedIndex = useSignal<number>(-1)

    const errors = useSignal<{
      name: boolean
      value: boolean
      validation: boolean
    }>({
      name: false,
      value: false,
      validation: false,
    })

    const handleAddEntry = () => {
      if (input.value && input.value.editing < 0) {
        // not editing, add a new entry
        const f = listState.value.filter(
          (item) =>
            item.replace === input.value.replace ||
            item.label === input.value.label
        )
        if (
          (uniqueEntries === true && f.length > 0) ||
          uniqueEntries === false ||
          input.value.label === '' ||
          input.value.replace === ''
        ) {
          errors.value = { ...errors.value, validation: true }
          return
        }

        listState.value = [
          ...listState.value,
          { replace: input.value.replace, label: input.value.label },
        ]

        // reset
        input.value = { replace: '', label: '', editing: -1 }
      } else if (input.value && input.value.editing > -1) {
        // editing a given index
        const tmp = [...listState.value]
        tmp[input.value.editing] = {
          replace: input.value.replace,
          label: input.value.label,
        }
        listState.value = tmp

        // handle setting the default value again if that was the edited value
        if (input.value.editing === defaultSelectedIndex.value) {
          onDefaultValueChange(tmp[input.value.editing])
        }

        // reset
        input.value = { replace: '', label: '', editing: -1 }
      }
    }

    const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {
      input.value = { ...input.value, label: event.target.value }

      const f = listState.value.filter(
        (item) => item.label === event.target.value
      )

      if ((uniqueEntries === true && f.length > 0) || uniqueEntries === false) {
        errors.value = { ...errors.value, name: true }
      } else {
        errors.value = { ...errors.value, name: false }
      }
    }

    const handleValueChange = (event: React.ChangeEvent<HTMLInputElement>) => {
      input.value = { ...input.value, replace: event.target.value }

      const f = listState.value.filter(
        (item) => item.replace === event.target.value
      )

      if ((uniqueEntries === true && f.length > 0) || uniqueEntries === false) {
        errors.value = { ...errors.value, value: true }
      } else {
        errors.value = { ...errors.value, value: false }
      }
    }

    const handleDeleteEntry = useCallback(
      (index: number) => {
        const newList = listState.value.filter((_, i) => i !== index)
        listState.value = newList

        // reset
        input.value = { replace: '', label: '', editing: -1 }
      },
      [listState, input]
    )

    const AllRadioOptions = React.memo(() => {
      if (listState.value === undefined || listState.value.length < 1) {
        return <></>
      }

      return listState.value.map((entry, index) => (
        <ListItem
          key={entry.label}
          sx={{
            // color the background if it's being edited
            ...(input.value.editing === index && { background: '#4a2a00' }),
            borderBottom: '1px solid #cecece',
          }}
          // secondaryAction={
          //   <>

          //   </>
          // }
        >
          <Button
            title="Click to set this Option as the Default"
            variant="contained"
            color={defaultSelectedIndex.value === index ? 'success' : 'info'}
            disabled={defaultSelectedIndex.value === index}
            onClick={() => {
              defaultSelectedIndex.value = index
              onDefaultValueChange(entry)
            }}
            sx={{ margin: 0, padding: '1px' }}
          >
            {defaultSelectedIndex.value === index ? (
              <SelectedAsDefaultIcon
                sx={{
                  color: defaultSelectedIndex.value === index ? '#66bb6a' : '',
                  padding: 0,
                  fontSize: '4em',
                }}
              />
            ) : (
              <NotDefaultIcon
                sx={{
                  color: defaultSelectedIndex.value === index ? '#66bb6a' : '',
                  padding: 0,
                  fontSize: '4em',
                }}
              />
            )}
          </Button>
          <Typography
            sx={{
              wordWrap: 'break-word',
              width: '80%',
              maxHeight: '4.5em',
              overflow: 'hidden',
              marginLeft: '8px',
              // userSelect: 'none',
            }}
          >
            {entry.label}
            <br />
            <CodeTypography>{entry.replace}</CodeTypography>
          </Typography>

          {input.value.editing === index ? (
            <Button
              variant="contained"
              color="error"
              title="Cancel editing this Radio Option?"
              onClick={() => {
                // reset
                input.value = { replace: '', label: '', editing: -1 }
              }}
            >
              <DisabledByDefaultIcon />
            </Button>
          ) : (
            <>
              <Button
                variant="outlined"
                color="info"
                title="Edit?"
                disabled={input.value.editing > -1}
                onClick={() => {
                  input.value = {
                    ...entry,
                    editing: index,
                  }
                }}
              >
                <TuneIcon />
              </Button>
              <ConfirmDialog
                title={`Delete '${entry.label}'?`}
                buttonText=""
                desc="Once this is removed it cannot be undone. Are you sure?"
                onConfirm={() => handleDeleteEntry(index)}
              />
            </>
          )}
        </ListItem>
      ))
    })

    useEffect(() => {
      // set the defaultSelectedIndex value
      if (defaultSelectedIndex.value !== -1) {
        return
      }

      if (defaultValue.value.value !== '') {
        for (let i = 0; i < listState.value.length; i++) {
          const opt = listState.value[i]

          if (opt.replace === defaultValue.value.value) {
            defaultSelectedIndex.value = i
            return
          }
        }
        // default to the first element in the listState, somehow the defaultValue is invalid.
        if (listState.value.length > 0) {
          defaultSelectedIndex.value = 0
          onDefaultValueChange(listState.value[0])
        }
      } else if (listState.value.length === 1) {
        // list has only one element, set the defaultvalue selected
        defaultSelectedIndex.value = 0
        onDefaultValueChange(listState.value[0])
      }
    }, [
      defaultValue.value,
      listState,
      defaultSelectedIndex,
      onDefaultValueChange,
    ])

    return (
      <Box
        sx={{
          width: '100%',
          border: '1px solid #cecece',
          padding: '10px',
          borderRadius: '10px',
          margin: '5px',
        }}
      >
        <Typography variant="h6">
          Radio Button Options Editor
          {errors.value.validation && (
            <Typography sx={{ display: 'inline' }} color="error">
              ERROR: Both the label and replace value are required before adding
              to the list.
            </Typography>
          )}
        </Typography>

        <Box sx={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>
          <TextField
            label="label (aka Radio Option short name)"
            variant="outlined"
            value={input.value.label}
            fullWidth
            error={errors.value.name}
            helperText={
              errors.value.name === true ? 'Unique labels are required' : ''
            }
            onChange={handleNameChange}
            onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => {
              if (event.key === 'Enter') {
                handleAddEntry()
              }
            }}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <AlertDialog title="Help: Radio Button Options Editor">
                    <Typography>
                      Type in a label, aka text that gives context to the
                      command-to-run flag that will be inserted when this radio
                      option is selected.
                      <br />
                      <br />
                      TIP: fill in the options and then press{' '}
                      <CodeTypography>ENTER</CodeTypography> to add it to the
                      list.
                    </Typography>
                  </AlertDialog>
                  <IconButton
                    edge="end"
                    aria-label={
                      input.value.editing > -1 ? 'accept edits' : 'add entry'
                    }
                    onClick={handleAddEntry}
                  >
                    {input.value.editing > -1 ? (
                      <CheckCircleIcon color="success" />
                    ) : (
                      <AddCircleOutlineIcon />
                    )}
                  </IconButton>
                </InputAdornment>
              ),
            }}
          />
          <TextField
            label="Replacement value (typically a Command, can include more __VALUE__ replacements)"
            variant="outlined"
            value={input.value.replace}
            fullWidth
            error={errors.value.value}
            helperText={
              errors.value.value === true
                ? 'Unique replacement values are required'
                : ''
            }
            onChange={handleValueChange}
            onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => {
              if (event.key === 'Enter') {
                handleAddEntry()
              }
            }}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <AlertDialog title="Help: Radio Button Options Editor - Replacement Value">
                    <Typography>
                      Replacement Values are a string which is inserted at the
                      Value to Replace eg{' '}
                      <CodeTypography>__VALUE__</CodeTypography>. Typically a
                      replacement value for a Radio Button Option will contain
                      additional <CodeTypography>__VALUE_NAME__</CodeTypography>{' '}
                      values, however this is optional. This allows for
                      additional input by the end-user to specify the values
                      which are inserted into the enabled flag. Put another way,
                      this allows the end user to decide what flag to enable
                      (Radio Button Option selected), and then start configuring
                      the values which are necessary for that flag to function
                      correctly (entering values into String, Number or other
                      input types).
                    </Typography>
                  </AlertDialog>
                </InputAdornment>
              ),
            }}
          />
        </Box>

        <List>
          {/* {AllRadioOptions} */}
          <AllRadioOptions />
        </List>
      </Box>
    )
  }
)

export default RadioGroupEditor
