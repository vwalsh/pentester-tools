import { TextField, InputAdornment, Typography } from '@mui/material'
import React from 'react'
import { Signal } from '@preact/signals-react'
import AlertDialog from '../../../../../../components/AlertDialog'

interface Props {
  validationRegex: Signal<string>
  validationHelp: Signal<string>
}

const StringConfigToolEditor = React.memo(
  ({ validationRegex, validationHelp }: Props) => {
    return (
      <>
        <TextField
          id="string-config-validationRegex"
          fullWidth
          label="Regex which validates the input for the user"
          value={validationRegex.value}
          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
            validationRegex.value = event.target.value
          }}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <AlertDialog title={`Validation Regex`}>
                  <Typography>
                    A string input allows for any valid string to be input by
                    the user. However there are times when it's nice to help the
                    user input a correct value. Validation by regex is the
                    currently available option to do so.
                    <br />
                    <br />
                    Be sure to test the regex for compatibility with JS.
                    <br />
                    <br />
                    Example: '^[^:@]+:[^@]+@$' (the characters within the quotes
                    but NOT the quotes themselves constitue the regex in this
                    example.)
                    <br />
                    <br />
                    For a validation input of 'hi:there@' the above example
                    regex would confirm the correct pattern. If the input was
                    '::asfa' the regex would fail the validation and the
                    Validation Help Text would be shown to the user, along with
                    a highlight of the component with an error status to draw
                    attention for the user to their mistake.
                    <br />
                    <br />
                    For the best help to the end-user, provide a reasonable Help
                    text which includes examples, tips and anything that might
                    be relevant for the given input.
                  </Typography>
                </AlertDialog>
              </InputAdornment>
            ),
          }}
        />

        <TextField
          id="string-config-validationHelp"
          fullWidth
          label="Validation Help Text"
          value={validationHelp.value}
          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
            validationHelp.value = event.target.value
          }}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <AlertDialog title={`Validation Help...Help`}>
                  <Typography>
                    Validation Help is a value that is displayed to the user
                    when a Validation Regex has failed on their input. This is a
                    fairly short message to the user to help them understand why
                    their input could be wrong. It's ONLY displayed on the
                    component which they are interacting with that failed
                    validation. Put another way, this text will not be displayed
                    if their input is valid.
                    <br />
                    <br />
                    If a Validation Regex is set, then this Validation Help
                    should also be set for the best user experience.
                  </Typography>
                </AlertDialog>
              </InputAdornment>
            ),
          }}
        />
      </>
    )
  }
)

export default StringConfigToolEditor
