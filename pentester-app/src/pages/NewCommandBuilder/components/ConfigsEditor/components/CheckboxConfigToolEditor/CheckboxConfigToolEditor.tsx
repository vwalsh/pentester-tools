import React from 'react'
import { Signal } from '@preact/signals-react'
import { TextField, InputAdornment, Typography } from '@mui/material'
import AlertDialog from '../../../../../../components/AlertDialog'
import CodeTypography from '../../../../../../components/CodeTypography'

interface Props {
  replaceValue: Signal<string>
}

const CheckboxConfigToolEditor = React.memo(({ replaceValue }: Props) => {
  return (
    <>
      <TextField
        id="checkbox-config-replaceValue"
        fullWidth
        label="Replacement Value when checkbox is checked"
        value={replaceValue.value}
        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
          replaceValue.value = event.target.value
        }}
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <AlertDialog
                title={`Help: Replacement Value when checkbox is checked`}
              >
                <Typography>
                  A checkbox is useful for enabling/disabling flags to a
                  command. When a checkbox input is not checked, then the
                  replace <CodeTypography>__VALUE__</CodeTypography> will be a
                  blank string (aka ''). When a checkbox input is checked, then
                  the replace <CodeTypography>__VALUE__</CodeTypography> is set
                  to this value (aka Replacement Value; the value entered in
                  this textbox)
                  <br />
                  <br />
                  TIP: Checkboxes can be used with a Replacement Value that
                  includes ANOTHER <CodeTypography>__VALUE__</CodeTypography> to
                  replace. In fact, this is their primary use-case. This allows
                  for a user to enable a complex flag while still being guided
                  on the specifics for each entry in that complex flag.
                  <br />
                  <br /> A complex flag includes additional values that need to
                  be modified to work properly or to work in all potential
                  use-cases. A simple flag is one that simply needs to be
                  included and doesn't have additional values to modify how it
                  works. An example of a simple flag could be{' '}
                  <CodeTypography>--no-color</CodeTypography>.
                  <br />
                  <br />
                  As an example of a complex flag, set the replacement value to{' '}
                  <CodeTypography>flag=__VALUE_2__:__VALUE_3__</CodeTypography>
                  and then add another Config Input to replace{' '}
                  <CodeTypography>__VALUE_2__</CodeTypography> and another for{' '}
                  <CodeTypography>__VALUE_3__</CodeTypography>. This concept is
                  extendable to including more than one replacement variable
                  within the checkbox or other config input values. Use it
                  wisely.
                </Typography>
              </AlertDialog>
            </InputAdornment>
          ),
        }}
      />
    </>
  )
})

export default CheckboxConfigToolEditor
