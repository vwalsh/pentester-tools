import React from 'react'
import { Signal } from '@preact/signals-react'
import { TextField, InputAdornment, Typography } from '@mui/material'
import AlertDialog from '../../../../../../components/AlertDialog'

interface Props {
  replaceValue: Signal<string>
}

const CheckboxConfigToolEditor = React.memo(({ replaceValue }: Props) => {
  return (
    <>
      <TextField
        id="checkbox-config-replaceValue"
        fullWidth
        label="Replacement Value when checkbox is checked"
        value={replaceValue.value}
        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
          replaceValue.value = event.target.value
        }}
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <AlertDialog
                title={`Help: Replacement Value when checkbox is checked`}
              >
                <Typography>
                  A checkbox is useful for enabling/disabling flags to a
                  command. When a checkbox input is not checked, then the
                  replace __VALUE__ will be a blank string (aka ''). When a
                  checkbox input is checked, then the replace __VALUE__ is set
                  to this value (aka Replacement Value; the value entered in
                  this textbox)
                  <br />
                  <br />
                  TIP: Checkboxes can be used with a Replacement Value that
                  includes ANOTHER __VALUE__ to replace. This allows for a user
                  to enable a complex flag while still being guided on the
                  specifics for each entry in that complex flag. As an example,
                  set the replacement value to 'flag=__VALUE_2__ and other text'
                  and then add another Config Input to replace __VALUE_2__. This
                  concept is extendable to including more than one replacement
                  variable within the checkbox or other config input values. Use
                  it wisely.
                </Typography>
              </AlertDialog>
            </InputAdornment>
          ),
        }}
      />
    </>
  )
})

export default CheckboxConfigToolEditor
