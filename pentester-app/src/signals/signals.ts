import { effect, signal } from '@preact/signals-react'

interface NameValueDict {
  [id: string]: string | number
}

interface ReplacementsProps {
  name: string
  value: string | number
}

// ============================================================================
// does any of the commands in the windows have a __FILE__ and __PATH__ var to replace?
// if so, enable the tool to select a file from the tools dir json tree
export const fileSearchEnabled = signal(false)

// ============================================================================
// name,value pair replacements for the command strings
export const replacements = signal(getReplacements())

function getReplacements(): NameValueDict {
  const value = localStorage.getItem('replacements')
  if (value == null) return {}
  return JSON.parse(value)
}

export function setReplacements({ name, value }: ReplacementsProps) {
  //   make a copy of the original values and extend them as needed
  // uses object properties to avoid name collisions
  const tmp = { ...replacements.value }
  tmp[name] = value
  replacements.value = tmp
}

effect(() => {
  localStorage.setItem('replacements', JSON.stringify(replacements.value))
})

// ============================================================================
// per command the user can decide which wrapping they want around running the command, none as default
export const terminalWraps = signal(getTerminalWrap())

function getTerminalWrap(): NameValueDict {
  const value = localStorage.getItem('terminalWraps')
  if (value == null) return {}
  return JSON.parse(value)
}

export function setTerminalWrap({ name, value }: ReplacementsProps) {
  //   make a copy of the original values and extend them as needed
  // uses object properties to avoid name collisions
  const tmp = { ...terminalWraps.value }
  tmp[name] = value
  terminalWraps.value = tmp
}

effect(() => {
  localStorage.setItem('terminalWraps', JSON.stringify(terminalWraps.value))
})

// ============================================================================
export const httpFile = signal(getHttpFile())

function getHttpFile(): string {
  const value = localStorage.getItem('httpFile')
  if (value == null) return ''
  return value
}

effect(() => {
  localStorage.setItem('httpFile', httpFile.value)
})

// ============================================================================
export const search = signal('')

// ============================================================================
export const ahost = signal(getAhost())

function getAhost(): string {
  const value = localStorage.getItem('ahost')
  if (value == null) return ''
  return value
}

effect(() => {
  localStorage.setItem('ahost', ahost.value)
})

// ============================================================================
export const aport = signal(getAport())

function getAport(): number {
  const value = localStorage.getItem('aport')
  if (value == null) return 8000
  return parseInt(value)
}

effect(() => {
  localStorage.setItem('aport', aport.value.toString())
})
