import { effect, signal } from '@preact/signals-react'
import { CMDProps } from '../components/ConfigInput/ConfigInput'

interface NameValueDict {
  [id: string]: string | number
}

interface ReplacementsProps {
  name: string
  value: string | number
}

export default function createCommandConfiguratorState() {
  // ============================================================================
  const command_windows = signal<Array<CMDProps>>([])
  const setCommand_windows = (update: Array<CMDProps>) => {
    command_windows.value = update
  }

  // ============================================================================
  // does any of the commands in the windows have a __FILE__ and __PATH__ var to replace?
  // if so, enable the tool to select a file from the tools dir json tree
  const fileSearchEnabled = signal(false)

  // ============================================================================
  // name,value pair replacements for the command strings
  const replacements = signal(getReplacements())

  function getReplacements(): NameValueDict {
    const value = localStorage.getItem('replacements')
    if (value == null) return {}
    return JSON.parse(value)
  }

  function setReplacements({ name, value }: ReplacementsProps) {
    //   make a copy of the original values and extend them as needed
    // uses object properties to avoid name collisions
    const tmp = { ...replacements.value }
    tmp[name] = value
    replacements.value = tmp
  }

  effect(() => {
    localStorage.setItem('replacements', JSON.stringify(replacements.value))
  })

  // ============================================================================
  // per command the user can decide which wrapping they want around running the command, none as default
  const terminalWraps = signal(getTerminalWrap())

  function getTerminalWrap(): NameValueDict {
    const value = localStorage.getItem('terminalWraps')
    if (value == null) return {}
    return JSON.parse(value)
  }

  function setTerminalWrap({ name, value }: ReplacementsProps) {
    //   make a copy of the original values and extend them as needed
    // uses object properties to avoid name collisions
    const tmp = { ...terminalWraps.value }
    tmp[name] = value
    terminalWraps.value = tmp
  }

  effect(() => {
    localStorage.setItem('terminalWraps', JSON.stringify(terminalWraps.value))
  })

  // ============================================================================
  const httpFile = signal(getHttpFile())

  function getHttpFile(): string {
    const value = localStorage.getItem('httpFile')
    if (value == null) return ''
    return value
  }

  effect(() => {
    localStorage.setItem('httpFile', httpFile.value)
  })

  // ============================================================================
  const search = signal('')

  // ============================================================================
  const ahost = signal(getAhost())

  function getAhost(): string {
    const value = localStorage.getItem('ahost')
    if (value == null) return ''
    return value
  }

  effect(() => {
    localStorage.setItem('ahost', ahost.value)
  })

  // ============================================================================
  const aport = signal(getAport())

  function getAport(): number {
    const value = localStorage.getItem('aport')
    if (value == null) return 8000
    return parseInt(value)
  }

  effect(() => {
    localStorage.setItem('aport', aport.value.toString())
  })

  // ============================================================================
  const vhost = signal(getVhost())

  function getVhost(): string {
    const value = localStorage.getItem('vhost')
    if (value == null) return ''
    return value
  }

  effect(() => {
    localStorage.setItem('vhost', vhost.value)
  })

  // ============================================================================
  const vport = signal(getVport())

  function getVport(): number {
    const value = localStorage.getItem('vport')
    if (value == null) return 8000
    return parseInt(value)
  }

  effect(() => {
    localStorage.setItem('vport', vport.value.toString())
  })

  //   debugging:
  //   effect(() => {
  //     console.log('ahost.value', ahost.value)
  //   })
  //   effect(() => {
  //     console.log('aport.value', aport.value)
  //   })
  //   effect(() => {
  //     console.log('fileSearchEnabled.value', fileSearchEnabled.value)
  //   })
  //   effect(() => {
  //     console.log('httpFile.value', httpFile.value)
  //   })
  // effect(() => {
  //   console.log('replacements.value', replacements.value)
  // })
  //   effect(() => {
  //     console.log('search.value', search.value)
  //   })
  //   effect(() => {
  //     console.log('terminalWraps.value', terminalWraps.value)
  //   })
  //   effect(() => {
  //     console.log('vhost.value', vhost.value)
  //   })
  //   effect(() => {
  //     console.log('vport.value', vport.value)
  //   })
  //   effect(() => {
  //     console.log('command_windows.value', command_windows.value)
  //   })
  // end debugging

  return {
    ahost,
    aport,
    fileSearchEnabled,
    httpFile,
    replacements,
    search,
    setReplacements,
    setTerminalWrap,
    terminalWraps,
    vhost,
    vport,
    command_windows,
    setCommand_windows,
  }
}
