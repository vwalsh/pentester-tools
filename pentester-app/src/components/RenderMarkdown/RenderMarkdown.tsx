import Markdown from 'react-markdown'
import remarkGfm from 'remark-gfm'
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'
import { gruvboxDark as syntaxHighlightingStyle } from 'react-syntax-highlighter/dist/esm/styles/prism'
import { Box } from '@mui/material'
import React from 'react'

type Props = {
  mdText: string

  // by default show the line numbers. or set this to false to disable them.
  showLineNumbers?: boolean
}

const RenderMarkdown = React.memo(({ mdText, showLineNumbers }: Props) => {
  // TODO: make an Autocomplete showing all of the supported languages. allow for inserting of it into the text area
  // console.log(SyntaxHighlighter.supportedLanguages.includes('cmd'))
  // console.log(SyntaxHighlighter.supportedLanguages)
  // NOTE: 'batch', 'powershell' and 'bash' exist

  return (
    <Box
      sx={{
        background: '#111',
        padding: '15px',
        borderRadius: '5px',
        minWidth: '60vw',
        maxWidth: 'calc( 100% - 60px )',
        overflowX: 'hidden',
        // link styles
        '& a': {
          color: '#2499ff',
        },
        '& a:visited': {
          color: '#8724ff',
        },
        // checkbox styles
        '& input[type=checkbox]': {
          position: 'relative',
          cursor: 'pointer',
          marginRight: '10px',
        },
        '& input[type=checkbox]:before': {
          content: '""',
          display: 'block',
          position: 'absolute',
          width: '20px',
          height: '20px',
          top: '0',
          left: '0',
          backgroundColor: '#e9e9e9',
        },
        '& input[type=checkbox]:checked:before': {
          // this is the box behind the check symbol
          content: '""',
          display: 'block',
          position: 'absolute',
          width: '20px',
          height: '20px',
          top: '0',
          left: '0',
          backgroundColor: '#1E80EF',
        },
        '& input[type=checkbox]:checked:after': {
          // this is the check symbol in the box
          content: '""',
          display: 'block',
          width: '5px',
          height: '10px',
          border: 'solid white',
          borderWidth: '0 2px 2px 0',
          transform: 'rotate(45deg)',
          position: 'absolute',
          padding: '2px',
          top: '4px',
          left: '8px',
          marginRight: '4px',
        },
        // table styles:
        '& table': {
          backgroundColor: '#333',
          fontSize: '16px',
          borderCollapse: 'collapse',
        },
        '& table th': {
          backgroundColor: '#222',
          border: '2px solid #8f8f8f',

          padding: '10px',
        },
        '& table td': {
          border: '2px solid #8f8f8f',
          padding: '8px',
        },
        // inline code blocks, not the syntax highlighted ones
        '& p > code, & pre > code': {
          padding: '2px 4px',
          borderRadius: '2px',
          background: '#1d2021',
          fontFamily: 'monospace',
        },
        '& pre > code': {
          display: 'block',
          padding: '16px',
          borderRadius: '5px',
        },
        // blockquotes
        '& blockquote': {
          borderLeft: '4px solid #333',
          color: '#eee',
          paddingLeft: '25px',
          marginLeft: '5px',
        },
        // try to get rid of the horizontal scrollbar on the code highlighted div
        '& pre > div': {
          overflowX: 'hidden !important',
        },
      }}
    >
      <Markdown
        remarkPlugins={[[remarkGfm]]}
        children={mdText}
        components={{
          code(props) {
            const {
              children,
              className,
              // eslint-disable-next-line @typescript-eslint/no-unused-vars
              node,
              // eslint-disable-next-line @typescript-eslint/no-unused-vars
              ref,
              ...rest
            } = props
            const match = /language-(\w+)/.exec(className || '')
            return match ? (
              <SyntaxHighlighter
                {...rest}
                PreTag="div"
                showLineNumbers={
                  showLineNumbers === undefined ? true : showLineNumbers
                }
                lineProps={{
                  style: {
                    flexWrap: 'wrap',
                    wordBreak: 'break-all',
                    userSelect: 'none',
                  },
                }}
                // wrapLines
                wrapLongLines
                children={String(children).replace(/\n$/, '')}
                language={match[1]}
                style={syntaxHighlightingStyle}
              />
            ) : (
              <code {...rest} className={className}>
                {children}
              </code>
            )
          },
        }}
      />
    </Box>
  )
})

export default RenderMarkdown
