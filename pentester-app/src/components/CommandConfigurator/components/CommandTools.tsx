import React, { useContext } from 'react'
import { AppState } from '../../../pages/Home/Home'
import { useComputed, useSignalEffect } from '@preact/signals-react'
import { Box, Grid, Typography } from '@mui/material'
import AlertDialog from '../../AlertDialog'
import ConfigInput from '../../ConfigInput'

export interface ConfigCompsProps {
  windowNum: number
}
const CommandTools = React.memo(({ windowNum }: ConfigCompsProps) => {
  const { command_windows, replacements, setReplacements } =
    useContext(AppState)

  const cwin = useComputed(() => {
    return command_windows.value[windowNum]
  })

  useSignalEffect(() => {
    if (cwin.value?.config === undefined) {
      return
    }
    // sets the default replacements values if they aren't defined already
    cwin.value.config.map((cfg) => {
      if (replacements.value[cfg.replace] === undefined) {
        // const replVal =
        //   cfg.props?.replaceValue === undefined
        //     ? cfg.defaultValue
        //     : !!cfg.defaultValue === false
        //       ? ''
        //       : cfg.props?.replaceValue

        let replVal = ''

        if (
          cfg.props.type === 'checkbox'
          // cfg.props.type === 'checkbox' &&
          // cfg.props.replaceValue !== undefined
        ) {
          replVal = !!cfg.defaultValue === false ? '' : cfg.props.replaceValue
        } else {
          replVal = cfg.replace
        }

        setReplacements({
          name: cfg.replace,
          value: replVal,
        })
      }
    })
  })

  const Tools = React.memo(() => {
    const computedMap = useComputed(() => {
      if (cwin.value?.config === undefined) {
        return []
      }
      return cwin.value.config.map((cfg) => {
        return {
          key: btoa(JSON.stringify(cfg)),
          cfg: cfg,
          title: cfg.props.label,
          help: cfg.help,
          defaultValue: cfg.defaultValue,
        }
      })
    })

    if (
      cwin.value?.config === undefined ||
      cwin.value?.config?.length === undefined ||
      cwin.value.config.length < 1
    ) {
      return (
        <React.Fragment
          key={`command_windows_${windowNum}-${cwin.value?.win}`}
        ></React.Fragment>
      )
    }

    // return cwin.value.config.map((cfg) => {
    return computedMap.value.map((comp) => {
      return (
        <Grid item xs={6} key={comp.key}>
          <Box sx={{ display: 'flex' }}>
            <AlertDialog title={comp.title}>
              <Typography>{comp.help}</Typography>
            </AlertDialog>

            <ConfigInput cfg={comp.cfg} defaultValue={comp.defaultValue} />
          </Box>
        </Grid>
      )
    })
  })

  if (
    command_windows.value === undefined ||
    command_windows.value.length < 1 ||
    command_windows.value.length < windowNum
  ) {
    return <React.Fragment key={`command_windows_undefined`}></React.Fragment>
  }

  return (
    <Box
      sx={{ width: 'calc( 100% - 20px )', padding: '10px' }}
      key={`command_windows_defined`}
    >
      <Grid container spacing={2}>
        <Tools />
      </Grid>
    </Box>
  )
})

export default CommandTools
