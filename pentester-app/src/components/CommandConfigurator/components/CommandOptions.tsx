import { Signal, useSignal, useSignalEffect } from '@preact/signals-react'
import { CMDProps } from '../../ConfigInput/ConfigInput'
import React, { useContext } from 'react'
import { ListItem, Button } from '@mui/material'
import { AppState } from '../../../pages/Home/Home'
import Commands from '../../../assets/commands.json'

interface CommandsProps {
  id: string
  keywords: Array<string>
  cmds: Array<CMDProps>
}

interface CommandOptionsProps {
  command_windows: Signal<CMDProps[]>
}

const CommandOptions = React.memo(
  ({ command_windows }: CommandOptionsProps) => {
    const { fileSearchEnabled, search, setCommand_windows } =
      useContext(AppState)
    const unique_found = useSignal<undefined | Array<CommandsProps>>(undefined)

    useSignalEffect(() => {
      command_windows.value = []

      let found = [] as Array<CommandsProps>
      for (const term of search.value.toLowerCase().split(' ')) {
        // find all of the commands which match the omnisearch term(s))
        const f = [
          ...(Commands as Array<CommandsProps>).filter((c) => {
            return (
              c.keywords.filter((k) => {
                return k.toLowerCase().indexOf(term) > -1
              }).length > 0
            )
          }),
        ]

        if (f.length > 0) {
          found = [...f]
        }
      }

      // filter out only the unique ids from the matches
      console.log('unique_found.value = found.filter(')
      unique_found.value = found.filter(
        (value, index, self) =>
          self.findIndex((v) => v.id === value.id) === index
      )
    })

    if (
      search.value === undefined ||
      search.value === '' ||
      unique_found.value === undefined
    ) {
      return <></>
    }

    // create GUI options for the user to start drilling into the command to build
    return unique_found?.value.map((f) => {
      return f.cmds.map((c) => {
        if (c.cmd.indexOf('__PATH__') > -1 && c.cmd.indexOf('__FILE__') > -1) {
          setTimeout(() => {
            // NOTE: this fixes a render bug in react when rendering the Home comp you can't also set a state!
            console.log('fileSearchEnabled.value = true')
            fileSearchEnabled.value = true
          }, 1)
        }

        return (
          <ListItem key={`${f.id}-${c.win}-${c.label.replace(' ', '-')}`}>
            <Button
              variant="outlined"
              onClick={() => {
                let tmp = [] as Array<CMDProps>
                if (
                  command_windows.value === undefined ||
                  command_windows.value.length < 1
                ) {
                  tmp = new Array<CMDProps>(c.win)
                  tmp.push(c)
                }
                if (
                  command_windows.value !== undefined &&
                  command_windows.value.length > 0
                ) {
                  tmp = [...command_windows.value]
                  if (command_windows.value.length > c.win) {
                    tmp[c.win] = c
                  } else {
                    tmp.push(c)
                  }
                }
                console.log('command_windows = tmp')
                // command_windows.value = tmp
                setTimeout(() => {
                  setCommand_windows(tmp)
                }, 1)
              }}
            >
              {c.label}
            </Button>
          </ListItem>
        )
      })
    })
  }
)

export default CommandOptions
