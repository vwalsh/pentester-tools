import { useCallback, useContext, useMemo } from 'react'
import { Box, Grid, List, Typography } from '@mui/material'

import CopyItem from '../CopyItem'
import React from 'react'
import { AppState } from '../../pages/Home/Home'
import CommandTools from './components/CommandTools'
import DownloadFiles from './components/DownloadFiles'
import TerminalWrap from './components/TerminalWrap'
import CommandOptions from './components/CommandOptions'

// interface ReactChildren {
//   children?: React.ReactNode
// }

const CommandConfigurator = React.memo(() => {
  const {
    ahost,
    aport,
    httpFile,
    replacements,
    terminalWraps,
    vhost,
    vport,
    command_windows,
  } = useContext(AppState)

  const powershellEncodeBase64Command = useCallback((cmd: string): string => {
    const encoder = new TextEncoder()
    const encoded = encoder.encode(cmd)
    let binaryString = ''
    const nullString = String.fromCharCode(0)
    encoded.forEach((byte) => {
      binaryString += String.fromCharCode(byte) + nullString
    })
    return btoa(binaryString)
  }, [])

  const ReplaceVars = useCallback(
    (winN: number, cmd: string, allowTerminalWrap: boolean) => {
      if (
        ahost.value === undefined ||
        aport.value === undefined ||
        httpFile.value === undefined
      ) {
        return ''
      }

      let tmp = cmd

      tmp = tmp.replaceAll('__ATTACKER_HOST__', ahost.value)
      tmp = tmp.replaceAll('__ATTACKER_PORT__', aport.value.toString())

      tmp = tmp.replaceAll('__TARGET_HOST__', vhost.value)
      tmp = tmp.replaceAll('__TARGET_PORT__', vport.value.toString())

      const httpPath = httpFile.value.split('/')
      const httpFileName = httpPath.pop()
      const httpRootPath = httpPath.join('/')

      tmp = tmp.replaceAll('/__PATH__', httpRootPath)
      tmp = tmp.replaceAll(
        '__FILE__',
        httpFileName !== undefined ? httpFileName : ''
      )

      //   wrap the running command with the process spawn of choice
      if (
        allowTerminalWrap === true &&
        terminalWraps.value !== undefined &&
        terminalWraps.value[`win-${winN}`] !== undefined
      ) {
        // TODO: extend these options with each addition to the CommandWrap array
        const wrapOptions = ['__CMD__']
        const wrap = terminalWraps.value[`win-${winN}`].toString()

        wrapOptions.forEach((w) => {
          if (wrap.indexOf(w) > -1) {
            tmp = wrap.replaceAll(w, tmp)
          }
        })

        if (wrap.indexOf('__PS_BASE64_ENC__') > -1) {
          tmp = wrap.replaceAll(
            '__PS_BASE64_ENC__',
            powershellEncodeBase64Command(tmp)
          )
        }
      }

      //   replace all of the config set properties
      if (replacements.value !== undefined) {
        Object.keys(replacements.value).forEach(function (key) {
          tmp = tmp.replaceAll(key, replacements.value[key].toString())
        })
        // replacing a second time might help for statements that stack on top of each other?
        // Object.keys(replacements.value).forEach(function (key) {
        //     tmp = tmp.replaceAll(key, replacements.value[key].toString())
        //   })
      }
      return tmp
    },
    [
      powershellEncodeBase64Command,
      ahost.value,
      aport.value,
      httpFile.value,
      replacements.value,
      terminalWraps.value,
      vhost.value,
      vport.value,
    ]
  )

  const WindowTools = useMemo(() => {
    return command_windows.value.map((cwin) => {
      return (
        <React.Fragment key={`win-${cwin.win}-tools`}>
          <List>
            <DownloadFiles windowNum={cwin.win} />

            <CommandTools windowNum={cwin.win} />
            <TerminalWrap windowNum={cwin.win} />
            <hr />
          </List>
        </React.Fragment>
      )
    })
  }, [command_windows.value])

  const Windows = React.memo(() => {
    if (
      command_windows.value === undefined ||
      command_windows.value.length < 1
    ) {
      return <></>
    }

    return command_windows.value.map((cwin) => {
      return (
        <Box
          key={`window-${cwin.win}`}
          sx={{ borderBottom: '1px solid #cecece' }}
        >
          <Typography variant="h5">
            {cwin.label} - Window {cwin.win} Platform:{cwin.platform}
          </Typography>
          <CopyItem
            val={ReplaceVars(cwin.win, cwin.cmd, cwin.allowTerminalWrap)}
          >
            <Typography
              variant="caption"
              sx={{
                fontFamily: 'monospace',
                background: '#000',
                padding: '10px',
                borderRadius: '5px',
                margin: '10px 20px 10px 10px',
                maxWidth: '90%',
                overflowWrap: 'break-word',
                userSelect: 'none',
                // overflowX: 'scroll'
              }}
            >
              {ReplaceVars(cwin.win, cwin.cmd, cwin.allowTerminalWrap)}
            </Typography>
          </CopyItem>
        </Box>
      )
    })
  })

  return (
    <>
      <Grid container>
        <Grid item xs={3}>
          <List>
            <CommandOptions command_windows={command_windows} />
          </List>
        </Grid>
        <Grid item xs={6}>
          <Box id="windows-box">
            <Windows />
          </Box>
        </Grid>
        <Grid item xs={3}>
          {WindowTools}
        </Grid>
      </Grid>
    </>
  )
})

export default CommandConfigurator
