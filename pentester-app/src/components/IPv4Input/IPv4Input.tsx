import { Box, InputAdornment, TextField, Typography } from '@mui/material'
import AlertDialog from '../AlertDialog'
import CopyItem from '../CopyItem'
import {
  Signal,
  useSignal,
  useSignalEffect,
  useComputed,
} from '@preact/signals-react'
import CodeTypography from '../CodeTypography'

interface IPv4InputProps {
  role: string
  akaName: string
  defaultOctets: [number, number, number, number]
  hostSignal: Signal
  portSignal: Signal
}

function IPv4Input({
  role,
  akaName,
  defaultOctets,
  hostSignal,
  portSignal,
}: IPv4InputProps) {
  const ipv4 = useSignal<[number, number, number, number]>(defaultOctets)

  const roleCamel = useComputed(
    () => `${role[0].toUpperCase()}${role.substring(1)}`
  )

  useSignalEffect(() => {
    hostSignal.value = ipv4.value.join('.')
  })

  return (
    <Box>
      <TextField
        required
        id={`ipv4-${role}-octet-1`}
        type="number"
        label="Octet 1"
        InputProps={{
          inputProps: {
            max: 255,
            min: 1,
          },
          startAdornment: (
            <InputAdornment position="start">
              <AlertDialog
                title={`Set the IPv4 Octets for the ${role} box (aka ${akaName})`}
              >
                <Typography>
                  TIP: <CodeTypography>Left Mouse click</CodeTypography> into
                  the text field and{' '}
                  <CodeTypography>Mouse Wheel Scroll</CodeTypography> to quickly
                  change the value of the IPv4 Octet
                </Typography>
              </AlertDialog>
            </InputAdornment>
          ),
        }}
        defaultValue={ipv4.value[0]}
        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
          let val = parseInt(event.target.value)
          if (val < 1 || val > 255) {
            val = 1
          }
          ipv4.value = [val, ipv4.value[1], ipv4.value[2], ipv4.value[3]]
        }}
      />
      <TextField
        required
        id={`ipv4-${role}-octet-2`}
        type="number"
        label="Octet 2"
        InputProps={{
          inputProps: {
            max: 255,
            min: 0,
          },
        }}
        defaultValue={ipv4.value[1]}
        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
          let val = parseInt(event.target.value)
          if (val < 0 || val > 255) {
            val = 0
          }
          ipv4.value = [ipv4.value[0], val, ipv4.value[2], ipv4.value[3]]
        }}
      />
      <TextField
        required
        id={`ipv4-${role}-octet-3`}
        type="number"
        label="Octet 3"
        InputProps={{
          inputProps: {
            max: 255,
            min: 0,
          },
        }}
        defaultValue={ipv4.value[2]}
        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
          let val = parseInt(event.target.value)
          if (val < 0 || val > 255) {
            val = 0
          }
          ipv4.value = [ipv4.value[0], ipv4.value[1], val, ipv4.value[3]]
        }}
      />
      <TextField
        required
        id={`ipv4-${role}-octet-4`}
        type="number"
        label="Octet 4"
        InputProps={{
          inputProps: {
            max: 255,
            min: 0,
          },
        }}
        defaultValue={ipv4.value[3]}
        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
          let val = parseInt(event.target.value)
          if (val < 0 || val > 255) {
            val = 0
          }
          ipv4.value = [ipv4.value[0], ipv4.value[1], ipv4.value[2], val]
        }}
      />

      <TextField
        required
        id={`port-${role}`}
        type="number"
        label={`${roleCamel} Port`}
        defaultValue={portSignal}
        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
          let val = parseInt(event.target.value)
          if (val < 0 || val > 65535) {
            val = 8000
          }
          portSignal.value = val
        }}
        InputProps={{
          inputProps: {
            max: 65535,
            min: 1,
          },
          startAdornment: (
            <InputAdornment position="start">
              <AlertDialog
                title={`Set the IPv4 Port for the ${role} box (aka ${akaName})`}
              >
                <Typography>
                  The Attacker Port is a generic port number that can easily be
                  assigned within a command. More commonly, a command will
                  define a custom port input so other commands aren't polluted
                  with the wrong port info. The Attacker Port value allows for
                  the use-case when a command needs a port and it can be
                  associated with a lot of other commands.
                  <br />
                  <br />
                  TIP: <CodeTypography>Left Mouse click</CodeTypography> into
                  the text field and{' '}
                  <CodeTypography>Mouse Wheel Scroll</CodeTypography> to quickly
                  change the value of the Port
                </Typography>
              </AlertDialog>
            </InputAdornment>
          ),
        }}
      />

      <br />
      <CopyItem val={`${ipv4.value.join('.')}:${portSignal}`}>
        <Typography variant="h6">
          {roleCamel}: {ipv4.value.join('.')}:{portSignal}
        </Typography>
      </CopyItem>
      <br />
    </Box>
  )
}

export default IPv4Input
