import { Box, InputAdornment, Typography } from '@mui/material'
import AlertDialog from '../AlertDialog'
import CopyItem from '../CopyItem'
import {
  Signal,
  useSignal,
  useSignalEffect,
  useComputed,
} from '@preact/signals-react'
import CodeTypography from '../CodeTypography'
import NumberInput from '../NumberInput'

interface IPv4InputProps {
  role: string
  akaName: string
  defaultOctets: [number, number, number, number]
  hostSignal: Signal<string>
  portSignal: Signal<number>
}

function IPv4Input({
  role,
  akaName,
  defaultOctets,
  hostSignal,
  portSignal,
}: IPv4InputProps) {
  const ipv4 = useSignal<[number, number, number, number]>(defaultOctets)

  const roleCamel = useComputed(
    () => `${role[0].toUpperCase()}${role.substring(1)}`
  )

  useSignalEffect(() => {
    if (
      hostSignal.value !== '' &&
      ipv4.value.join('.') !== hostSignal.value &&
      ipv4.value.join('.') === defaultOctets.join('.')
    ) {
      const tmp = hostSignal.value.split('.')

      if (tmp.length === 4) {
        ipv4.value = tmp.map((val) => parseInt(val)) as [
          number,
          number,
          number,
          number,
        ]
      }
    } else {
      hostSignal.value = ipv4.value.join('.')
    }
  })

  return (
    <Box>
      <NumberInput
        defaultValue={defaultOctets[0]}
        props={{
          fullWidth: false,
          label: 'Octet 1',
          InputProps: {
            inputProps: { min: 1, max: 255 },
            startAdornment: (
              <InputAdornment position="start">
                <AlertDialog
                  title={`Set the IPv4 Octets for the ${role} box (aka ${akaName})`}
                >
                  <Typography>
                    TIP: <CodeTypography>Left Mouse click</CodeTypography> into
                    the text field and{' '}
                    <CodeTypography>Mouse Wheel Scroll</CodeTypography> to
                    quickly change the value of the IPv4 Octet
                  </Typography>
                </AlertDialog>
              </InputAdornment>
            ),
          },
          value: ipv4.value[0],
        }}
        numberChangeEvent={(val) => {
          if (val < 1 || val > 255) {
            val = 1
          }
          ipv4.value = [val, ipv4.value[1], ipv4.value[2], ipv4.value[3]]
        }}
      />

      <NumberInput
        defaultValue={defaultOctets[1]}
        props={{
          fullWidth: false,
          label: 'Octet 2',
          InputProps: {
            inputProps: { min: 1, max: 255 },
          },
          value: ipv4.value[1],
        }}
        numberChangeEvent={(val) => {
          if (val < 0 || val > 255) {
            val = 0
          }
          ipv4.value = [ipv4.value[0], val, ipv4.value[2], ipv4.value[3]]
        }}
      />

      <NumberInput
        defaultValue={defaultOctets[2]}
        props={{
          fullWidth: false,
          label: 'Octet 3',
          InputProps: {
            inputProps: { min: 1, max: 255 },
          },
          value: ipv4.value[2],
        }}
        numberChangeEvent={(val) => {
          if (val < 0 || val > 255) {
            val = 0
          }
          ipv4.value = [ipv4.value[0], ipv4.value[1], val, ipv4.value[3]]
        }}
      />

      <NumberInput
        defaultValue={defaultOctets[3]}
        props={{
          fullWidth: false,
          label: 'Octet 4',
          InputProps: {
            inputProps: { min: 1, max: 255 },
          },
          value: ipv4.value[3],
        }}
        numberChangeEvent={(val) => {
          if (val < 0 || val > 255) {
            val = 0
          }
          ipv4.value = [ipv4.value[0], ipv4.value[1], ipv4.value[2], val]
        }}
      />

      <NumberInput
        defaultValue={8000}
        props={{
          fullWidth: false,
          label: `${roleCamel} Port`,
          InputProps: {
            inputProps: { min: 1, max: 65535 },
            startAdornment: (
              <InputAdornment position="start">
                <AlertDialog
                  title={`Set the IPv4 Port for the ${role} box (aka ${akaName})`}
                >
                  <Typography>
                    The Attacker Port is a generic port number that can easily
                    be assigned within a command. More commonly, a command will
                    define a custom port input so other commands aren't polluted
                    with the wrong port info. The Attacker Port value allows for
                    the use-case when a command needs a port and it can be
                    associated with a lot of other commands.
                    <br />
                    <br />
                    TIP: <CodeTypography>Left Mouse click</CodeTypography> into
                    the text field and{' '}
                    <CodeTypography>Mouse Wheel Scroll</CodeTypography> to
                    quickly change the value of the Port
                  </Typography>
                </AlertDialog>
              </InputAdornment>
            ),
          },
          value: portSignal.value,
        }}
        numberChangeEvent={(val) => {
          if (val < 0 || val > 65535) {
            val = 8000
          }
          portSignal.value = val
        }}
      />
      {/* </Box> */}

      <br />
      <CopyItem val={`${ipv4.value.join('.')}:${portSignal}`}>
        <Typography variant="h6">
          {roleCamel}: {ipv4.value.join('.')}:{portSignal}
        </Typography>
      </CopyItem>
      <br />
    </Box>
  )
}

export default IPv4Input
