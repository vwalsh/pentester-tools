import { Badge, Box, Button, TextField, Typography } from '@mui/material'
import AlertDialog from '../AlertDialog'
import SettingsIcon from '@mui/icons-material/Settings'
import { useContext, useEffect } from 'react'
import { JSONstringifyOrder, download_file, getSHA256Hash } from '../../utils'
import ConfirmDialog from '../ConfirmDialog'
import FileUploadButton from '../FileUploadButton'
import CloudDownloadIcon from '@mui/icons-material/CloudDownload'
import { useSignal } from '@preact/signals-react'
import React from 'react'
import WarningIcon from '@mui/icons-material/Warning'
import GppGoodIcon from '@mui/icons-material/GppGood'
import { AppState } from '../../pages/Home/Home'
import CopyItem from '../CopyItem'
import CodeTypography from '../CodeTypography'

// array of properties which are NOT to be included in the backup json of the localstorage object
const localStorageKeysExcludeFromBackup = ['backupJsonHash']

function convertLocalStorageForHashAsJson(storage: Storage): string {
  const items = { ...storage }

  // remove unnecessary values before calcing the sha256 hash
  for (const key of localStorageKeysExcludeFromBackup) {
    if (Object.hasOwn(items, key)) {
      delete items[key]
    }
  }

  return JSONstringifyOrder(items)
}

const SettingsDialog = React.memo(() => {
  const dlFilename = useSignal<string>('pentester-tools-backup')
  const currentBackupJsonHash = useSignal<string>('')
  const { backupJsonHash } = useContext(AppState)

useEffect(()=>{
  getSHA256Hash(convertLocalStorageForHashAsJson(localStorage)).then(
    (hash) => {
      currentBackupJsonHash.value = hash
    }
  )
})

  return (
    <AlertDialog
      onOpen={() => {
        getSHA256Hash(convertLocalStorageForHashAsJson(localStorage)).then(
          (hash) => {
            currentBackupJsonHash.value = hash
          }
        )
      }}
      title="Settings and Preferences"
      CustomIcon={
        <>
          {currentBackupJsonHash.value !== backupJsonHash.value ? (
            <Badge
              color="error"
              variant="dot"
              anchorOrigin={{
                vertical: 'top',
                horizontal: 'left',
              }}
            >
              <SettingsIcon />
            </Badge>
          ) : (
            <SettingsIcon />
          )}
          &nbsp;Settings
        </>
      }
    >
      <Typography>
        Manage your settings and preferences here.
        <br />
        <br />
      </Typography>

      <Box sx={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>
        <Box sx={{ display: 'flex', flexDirection: 'row', gap: '5px' }}>
          {currentBackupJsonHash.value !== backupJsonHash.value ? (
            <AlertDialog
              title="Warning: Backup localStorage Json"
              CustomIcon={<WarningIcon color="warning" />}
            >
              <Typography>
                The localStorage json has not been backed up since it's last
                change. This could lead to data loss relating to Loot, Command
                History or command specific values.
                <br />
                <br />
                Consider downloading the backup now.
              </Typography>
            </AlertDialog>
          ) : (
            <AlertDialog
              title="Backup is up-to-date"
              CustomIcon={<GppGoodIcon color="success" />}
            >
              <Typography>
                The localStorage json has been backed up and is expected to
                contain all of the values currently in localstorage. These
                include any Loot, Command History and other command specific
                values entered.
                <br />
                <br />A Warning icon will appear in the Settings area when a
                backup is out-of-date.
              </Typography>
            </AlertDialog>
          )}
          <AlertDialog title={'Help: Downloading LocalStorage Json'}>
            <Typography>
              This feature allows for saving a backup of the current state of
              values stored in localstorage. Localstorage is a browser storage
              mechanism that persists across page refreshes. The important
              values for this app are stored in localstorage such as Loot,
              Command History, and any values entered for specific commands.
            </Typography>
          </AlertDialog>

          <TextField
            value={dlFilename.value}
            label="Enter a filename"
            error={dlFilename.value === ''}
            helperText={
              dlFilename.value === '' ? 'A filename must be provided' : ''
            }
            onChange={(event) => {
              dlFilename.value = event.target.value
            }}
          />
          <Button
            startIcon={<CloudDownloadIcon />}
            variant="contained"
            color="success"
            disabled={dlFilename.value === ''}
            onClick={() => {
              const tmp = convertLocalStorageForHashAsJson(localStorage)
              download_file(
                `${dlFilename.value}-${Math.floor(Date.now() / 1000)}.json`,
                // btoa(JSON.stringify({ ...localStorage }))
                btoa(tmp)
              )

              getSHA256Hash(tmp).then((hash) => {
                backupJsonHash.value = hash
              })
            }}
          >
            Download Localstorage Json
          </Button>
        </Box>

        <CopyItem val={currentBackupJsonHash.value}>
          <Typography>
            Current LocalStorage SHA256 hash:
            <CodeTypography>{currentBackupJsonHash.value}</CodeTypography>
          </Typography>
        </CopyItem>
        <CopyItem val={backupJsonHash.value}>
          <Typography>
            Last Backup LocalStorage SHA256 hash:
            <CodeTypography>
              {backupJsonHash.value === ''
                ? 'backup not completed, backup now!'
                : backupJsonHash.value}
            </CodeTypography>
          </Typography>
        </CopyItem>

        <Box sx={{ display: 'flex', flexDirection: 'row', gap: '10px' }}>
          <AlertDialog title={'Help: Deleting All LocalStorage'}>
            <Typography>
              Deleting all localstorage will reset the app back to it's initial
              state. The page will also refresh to ensure the initial state is
              setup the same as the first time this app was loaded. Deleting
              cannot be undone unless you have a recent backup file to upload.
              Use the indicator(s) on the Settings menu to check if a new backup
              is needed.
            </Typography>
          </AlertDialog>

          <ConfirmDialog
            buttonText={'Delete All Localstorage'}
            title={'Confirm deleting all Localstorage'}
            desc={
              'By deleting the localstorage, all items will be lost. This includes data such as any Loot or Command History, as well as any values entered for specific commands. Are you sure?'
            }
            onConfirm={() => {
              localStorage.clear()

              location.reload()
            }}
          />
        </Box>
        <Box sx={{ display: 'flex', flexDirection: 'row', gap: '10px' }}>
          <AlertDialog title={'Help: Importing LocalStorage Json Backup'}>
            <Typography>
              Importing a backup will overwrite all existing localStorage values
              which includes any Loot, Command History or other command specific
              values entered. All of these values will be overwritten by the
              backup json values. To ensure that no data is lost, it's best to
              first download a backup json file, then import.
              <br />
              <br />
              NOTE: The indicator(s) will show if any changes have been made
              which could require a backup to ensure data integrity.
            </Typography>
          </AlertDialog>

          <FileUploadButton
            onContentsLoaded={(contents) => {
              // the user has uploaded an json file. parse it, clear localstorage and update localstorage then reload the page
              // reloadAfterImport.value = true

              const tmp = JSON.parse(contents)

              localStorage.clear()

              for (const key in tmp) {
                const item = tmp[key]

                if (localStorageKeysExcludeFromBackup.indexOf(key) < 0) {
                  localStorage.setItem(key, item)
                }
              }

              // set the last backup since they just imported the values
              getSHA256Hash(
                convertLocalStorageForHashAsJson(localStorage)
              ).then((hash) => {
                localStorage.setItem('backupJsonHash', hash)
                location.reload()
              })
            }}
          />
        </Box>
      </Box>
    </AlertDialog>
  )
})

export default SettingsDialog
