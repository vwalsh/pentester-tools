// downloads a file as @filename with the contents being converted from @b64data base64 string to binary
export const download_file = (filename: string, b64data: string) => {
  const data = new Blob([atob(b64data)], { type: 'text' })
  const csvURL = window.URL.createObjectURL(data)
  const tempLink = document.createElement('a')
  tempLink.href = csvURL
  tempLink.setAttribute('download', filename)
  tempLink.click()
}

// calculate the sha256 hash and return as a hexadecimal string
export const getSHA256Hash = async (input: string) => {
  const textAsBuffer = new TextEncoder().encode(input)
  const hashBuffer = await window.crypto.subtle.digest('SHA-256', textAsBuffer)
  const hashArray = Array.from(new Uint8Array(hashBuffer))
  const hash = hashArray
    .map((item) => item.toString(16).padStart(2, '0'))
    .join('')
  return hash
}

// stores the value of the width of the scrollbar for this browser.
// assumes this width will not change without a page refresh.
const scrollBarWidth = getScrollBarWidth()

// plain js function to get the scroll bar width of the browser.
function getScrollBarWidth() {
  const el = document.createElement('div')
  el.style.cssText = 'overflow:scroll; visibility:hidden; position:absolute;'
  document.body.appendChild(el)
  const width = el.offsetWidth - el.clientWidth
  el.remove()
  return width
}

// plain js function to check if the scrollbar is visible for the provided element.
// using the html element it can be determined if the scrollbar is shown
function scrollbarVisible(element: HTMLElement) {
  return element.scrollHeight > element.clientHeight
}

export function disablePageScrolling() {
  // disables the entire page scrolling temporarily.
  // this is to enable scrolling within the Number Input to change the value of a number input while disabling scroll for the rest of the web page!
  const htmlElem = document.getElementsByTagName('html')[0]
  const htmlStyle = htmlElem.style
  const bodyStyle = document.getElementsByTagName('body')[0].style
  bodyStyle.overflow = 'hidden'
  htmlStyle.overflow = 'hidden'

  if (
    navigator.userAgent.toLowerCase().indexOf('chrome') > -1 &&
    scrollbarVisible(htmlElem)
  ) {
    // NOTE: in Firefox, the scrollbar isn't this size so apply this ONLY to chrome
    bodyStyle.paddingRight = `${scrollBarWidth}px`
  }
}

export function enablePageScrolling(elem: HTMLElement | null) {
  // this enables the entire web page to scroll again when the user is done with this number input
  // these are the CSS defaults for these properties
  const htmlStyle = document.getElementsByTagName('html')[0].style
  const bodyStyle = document.getElementsByTagName('body')[0].style
  bodyStyle.overflow = 'visible'
  htmlStyle.overflow = 'visible'
  bodyStyle.paddingRight = ''
  elem?.blur()
}

// order an object and return it stringified.
// this is useful for hashing to compare json objects
export function JSONstringifyOrder(obj: Record<string, unknown>) {
  const allKeys: Set<string> = new Set()
  JSON.stringify(obj, (key, value) => (allKeys.add(key), value))
  return JSON.stringify(obj, Array.from(allKeys).sort())
}
